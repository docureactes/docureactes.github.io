"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[1567],{5226:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Comenzar","href":"/","docId":"index","unlisted":false},{"type":"category","label":"B\xe1sico","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introducci\xf3n a React y preparaci\xf3n del entorno de desarrollo","href":"/B\xe1sico/1-1-Introducci\xf3n a React y preparaci\xf3n del entorno de desarrollo","docId":"B\xe1sico/1-1-Introducci\xf3n a React y preparaci\xf3n del entorno de desarrollo","unlisted":false},{"type":"link","label":"Introducci\xf3n a JSX y expresi\xf3n de componentes en React","href":"/B\xe1sico/1-2-Introducci\xf3n a JSX y expresi\xf3n de componentes en React","docId":"B\xe1sico/1-2-Introducci\xf3n a JSX y expresi\xf3n de componentes en React","unlisted":false},{"type":"link","label":"Razones para usar componentes funcionales en lugar de componentes de clase","href":"/B\xe1sico/1-3-Razones para usar componentes funcionales en lugar de componentes de clase","docId":"B\xe1sico/1-3-Razones para usar componentes funcionales en lugar de componentes de clase","unlisted":false},{"type":"link","label":"Pasar datos a los componentes con Props","href":"/B\xe1sico/1-4-Pasar datos a los componentes con Props","docId":"B\xe1sico/1-4-Pasar datos a los componentes con Props","unlisted":false},{"type":"link","label":"Gesti\xf3n de estado con State","href":"/B\xe1sico/1-5-Gesti\xf3n de estado con State","docId":"B\xe1sico/1-5-Gesti\xf3n de estado con State","unlisted":false},{"type":"link","label":"Manejo de eventos en componentes","href":"/B\xe1sico/1-6-Manejo de eventos en componentes","docId":"B\xe1sico/1-6-Manejo de eventos en componentes","unlisted":false},{"type":"link","label":"Renderizado condicional y procesamiento de listas en JSX","href":"/B\xe1sico/1-7-Renderizado condicional y procesamiento de listas en JSX","docId":"B\xe1sico/1-7-Renderizado condicional y procesamiento de listas en JSX","unlisted":false}]},{"type":"category","label":"State","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introducci\xf3n a State y buenos nombres para State","href":"/State/2-1-Introducci\xf3n a State y buenos nombres para State","docId":"State/2-1-Introducci\xf3n a State y buenos nombres para State","unlisted":false},{"type":"link","label":"Gesti\xf3n de entradas del usuario con State","href":"/State/2-2-Gesti\xf3n de entradas del usuario con State","docId":"State/2-2-Gesti\xf3n de entradas del usuario con State","unlisted":false},{"type":"link","label":"Establecer valores iniciales correctos y eliminar estados innecesarios","href":"/State/2-3-Establecer valores iniciales correctos y eliminar estados innecesarios","docId":"State/2-3-Establecer valores iniciales correctos y eliminar estados innecesarios","unlisted":false},{"type":"link","label":"Identificaci\xf3n y soluci\xf3n de problemas con valores que no se actualizan","href":"/State/2-4-Identificaci\xf3n y soluci\xf3n de problemas con valores que no se actualizan","docId":"State/2-4-Identificaci\xf3n y soluci\xf3n de problemas con valores que no se actualizan","unlisted":false},{"type":"link","label":"Gesti\xf3n de estados de bandera","href":"/State/2-5-Gesti\xf3n de estados de bandera","docId":"State/2-5-Gesti\xf3n de estados de bandera","unlisted":false},{"type":"link","label":"Simplificaci\xf3n y estructuraci\xf3n de estados relacionados","href":"/State/2-6-Simplificaci\xf3n y estructuraci\xf3n de estados relacionados","docId":"State/2-6-Simplificaci\xf3n y estructuraci\xf3n de estados relacionados","unlisted":false},{"type":"link","label":"Introducci\xf3n a useRef y uso de variables de componente en lugar de useState","href":"/State/2-7-Introducci\xf3n a useRef y uso de variables de componente en lugar de useState","docId":"State/2-7-Introducci\xf3n a useRef y uso de variables de componente en lugar de useState","unlisted":false},{"type":"link","label":"Naturaleza as\xedncrona de la funci\xf3n de actualizaci\xf3n del estado, aprovechamiento del estado anterior y reinicializaci\xf3n del estado","href":"/State/2-8-Naturaleza as\xedncrona de la funci\xf3n de actualizaci\xf3n del estado, aprovechamiento del estado anterior y reinicializaci\xf3n del estado","docId":"State/2-8-Naturaleza as\xedncrona de la funci\xf3n de actualizaci\xf3n del estado, aprovechamiento del estado anterior y reinicializaci\xf3n del estado","unlisted":false}]},{"type":"category","label":"Props","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introducci\xf3n a Props y buenos nombres para Props","href":"/Props/3-1-Introducci\xf3n a Props y buenos nombres para Props","docId":"Props/3-1-Introducci\xf3n a Props y buenos nombres para Props","unlisted":false},{"type":"link","label":"Diferencias entre State y Props","href":"/Props/3-2-Diferencias entre State y Props","docId":"Props/3-2-Diferencias entre State y Props","unlisted":false},{"type":"link","label":"Ejemplos de copias y operaciones innecesarias con Props","href":"/Props/3-3-Ejemplos de copias y operaciones innecesarias con Props","docId":"Props/3-3-Ejemplos de copias y operaciones innecesarias con Props","unlisted":false},{"type":"link","label":"Verificaci\xf3n de tipos y configuraci\xf3n de valores predeterminados con PropTypes","href":"/Props/3-4-Verificaci\xf3n de tipos y configuraci\xf3n de valores predeterminados con PropTypes","docId":"Props/3-4-Verificaci\xf3n de tipos y configuraci\xf3n de valores predeterminados con PropTypes","unlisted":false},{"type":"link","label":"Consideraciones al usar la desestructuraci\xf3n y ...props","href":"/Props/3-5-Consideraciones al usar la desestructuraci\xf3n y ...props","docId":"Props/3-5-Consideraciones al usar la desestructuraci\xf3n y ...props","unlisted":false},{"type":"link","label":"Uso de Props abreviados","href":"/Props/3-6-Uso de Props abreviados","docId":"Props/3-6-Uso de Props abreviados","unlisted":false},{"type":"link","label":"Razones para dividir Props complejos y ventajas de Props simples","href":"/Props/3-7-Razones para dividir Props complejos y ventajas de Props simples","docId":"Props/3-7-Razones para dividir Props complejos y ventajas de Props simples","unlisted":false},{"type":"link","label":"Puntos a tener en cuenta al trabajar con atributos HTML","href":"/Props/3-8-Puntos a tener en cuenta al trabajar con atributos HTML","docId":"Props/3-8-Puntos a tener en cuenta al trabajar con atributos HTML","unlisted":false},{"type":"link","label":"defaultProps","href":"/Props/3-9-defaultProps","docId":"Props/3-9-defaultProps","unlisted":false}]},{"type":"category","label":"Ciclo de vida","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introducci\xf3n a useEffect y control del ciclo de vida","href":"/Ciclo de vida/4-1-Introducci\xf3n a useEffect y control del ciclo de vida","docId":"Ciclo de vida/4-1-Introducci\xf3n a useEffect y control del ciclo de vida","unlisted":false},{"type":"link","label":"Uso de useEffect con funciones con nombre","href":"/Ciclo de vida/4-2-Uso de useEffect con funciones con nombre","docId":"Ciclo de vida/4-2-Uso de useEffect con funciones con nombre","unlisted":false},{"type":"link","label":"Razones para que useEffect realice una sola tarea","href":"/Ciclo de vida/4-3-Razones para que useEffect realice una sola tarea","docId":"Ciclo de vida/4-3-Razones para que useEffect realice una sola tarea","unlisted":false},{"type":"link","label":"Gesti\xf3n de operaciones as\xedncronas dentro de useEffect","href":"/Ciclo de vida/4-4-Gesti\xf3n de operaciones as\xedncronas dentro de useEffect","docId":"Ciclo de vida/4-4-Gesti\xf3n de operaciones as\xedncronas dentro de useEffect","unlisted":false}]},{"type":"category","label":"Componente","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introducci\xf3n a componentes y buenos nombres para componentes","href":"/Componente/5-1-Introducci\xf3n a componentes y buenos nombres para componentes","docId":"Componente/5-1-Introducci\xf3n a componentes y buenos nombres para componentes","unlisted":false},{"type":"link","label":"Uso de etiquetas auto-cerradas","href":"/Componente/5-2-Uso de etiquetas auto-cerradas","docId":"Componente/5-2-Uso de etiquetas auto-cerradas","unlisted":false},{"type":"link","label":"Casos en los que se necesita Fragment y cu\xe1ndo no","href":"/Componente/5-3-Casos en los que se necesita Fragment y cu\xe1ndo no","docId":"Componente/5-3-Casos en los que se necesita Fragment y cu\xe1ndo no","unlisted":false},{"type":"link","label":"Retorno de JSX desde una funci\xf3n de componente","href":"/Componente/5-4-Retorno de JSX desde una funci\xf3n de componente","docId":"Componente/5-4-Retorno de JSX desde una funci\xf3n de componente","unlisted":false},{"type":"link","label":"Declaraci\xf3n de componentes internos dentro de un componente","href":"/Componente/5-5-Declaraci\xf3n de componentes internos dentro de un componente","docId":"Componente/5-5-Declaraci\xf3n de componentes internos dentro de un componente","unlisted":false},{"type":"link","label":"Configuraci\xf3n de displayName","href":"/Componente/5-6-Configuraci\xf3n de displayName","docId":"Componente/5-6-Configuraci\xf3n de displayName","unlisted":false},{"type":"link","label":"Consideraciones al estructurar componentes","href":"/Componente/5-7-Consideraciones al estructurar componentes","docId":"Componente/5-7-Consideraciones al estructurar componentes","unlisted":false},{"type":"link","label":"Componentes de orden superior (HOC)","href":"/Componente/5-8-Componentes de orden superior (HOC)","docId":"Componente/5-8-Componentes de orden superior (HOC)","unlisted":false}]},{"type":"category","label":"Renderizado","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Manejo de espacios en blanco en JSX","href":"/Renderizado/6-1-Manejo de espacios en blanco en JSX","docId":"Renderizado/6-1-Manejo de espacios en blanco en JSX","unlisted":false},{"type":"link","label":"Tratamiento del valor 0 (cero) en JSX","href":"/Renderizado/6-2-Tratamiento del valor 0 (cero) en JSX","docId":"Renderizado/6-2-Tratamiento del valor 0 (cero) en JSX","unlisted":false},{"type":"link","label":"Uso de Key dentro de listas","href":"/Renderizado/6-3-Uso de Key dentro de listas","docId":"Renderizado/6-3-Uso de Key dentro de listas","unlisted":false},{"type":"link","label":"Uso seguro de Raw HTML","href":"/Renderizado/6-4-Uso seguro de Raw HTML","docId":"Renderizado/6-4-Uso seguro de Raw HTML","unlisted":false},{"type":"link","label":"Renderizado din\xe1mico y condicional","href":"/Renderizado/6-5-Renderizado din\xe1mico y condicional","docId":"Renderizado/6-5-Renderizado din\xe1mico y condicional","unlisted":false}]},{"type":"category","label":"Hook","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Revisi\xf3n de useState, useRef, useEffect","href":"/Hook/7-1-Revisi\xf3n de useState, useRef, useEffect","docId":"Hook/7-1-Revisi\xf3n de useState, useRef, useEffect","unlisted":false},{"type":"link","label":"Tipos de retornos de Hooks personalizados","href":"/Hook/7-10-Tipos de retornos de Hooks personalizados","docId":"Hook/7-10-Tipos de retornos de Hooks personalizados","unlisted":false},{"type":"link","label":"Extracci\xf3n de l\xf3gica de estado con Hooks personalizados","href":"/Hook/7-11-Extracci\xf3n de l\xf3gica de estado con Hooks personalizados","docId":"Hook/7-11-Extracci\xf3n de l\xf3gica de estado con Hooks personalizados","unlisted":false},{"type":"link","label":"useContext","href":"/Hook/7-2-useContext","docId":"Hook/7-2-useContext","unlisted":false},{"type":"link","label":"useCallback","href":"/Hook/7-3-useCallback","docId":"Hook/7-3-useCallback","unlisted":false},{"type":"link","label":"useMemo","href":"/Hook/7-4-useMemo","docId":"Hook/7-4-useMemo","unlisted":false},{"type":"link","label":"useReducer","href":"/Hook/7-5-useReducer","docId":"Hook/7-5-useReducer","unlisted":false},{"type":"link","label":"useLayoutEffect","href":"/Hook/7-6-useLayoutEffect","docId":"Hook/7-6-useLayoutEffect","unlisted":false},{"type":"link","label":"Diferencias entre useLayoutEffect y useEffect","href":"/Hook/7-7-Diferencias entre useLayoutEffect y useEffect","docId":"Hook/7-7-Diferencias entre useLayoutEffect y useEffect","unlisted":false},{"type":"link","label":"useImperativeHandle","href":"/Hook/7-8-useImperativeHandle","docId":"Hook/7-8-useImperativeHandle","unlisted":false},{"type":"link","label":"Hooks personalizados","href":"/Hook/7-9-Hooks personalizados","docId":"Hook/7-9-Hooks personalizados","unlisted":false}]},{"type":"category","label":"Optimizaci\xf3n","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"T\xe9cnicas de optimizaci\xf3n del rendimiento de componentes","href":"/Optimizaci\xf3n/8-1-T\xe9cnicas de optimizaci\xf3n del rendimiento de componentes","docId":"Optimizaci\xf3n/8-1-T\xe9cnicas de optimizaci\xf3n del rendimiento de componentes","unlisted":false},{"type":"link","label":"T\xe9cnicas de optimizaci\xf3n del renderizado","href":"/Optimizaci\xf3n/8-2-T\xe9cnicas de optimizaci\xf3n del renderizado","docId":"Optimizaci\xf3n/8-2-T\xe9cnicas de optimizaci\xf3n del renderizado","unlisted":false}]},{"type":"category","label":"Estilo","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Estilo en l\xednea","href":"/Estilo/9-1-Estilo en l\xednea","docId":"Estilo/9-1-Estilo en l\xednea","unlisted":false},{"type":"link","label":"Emotion","href":"/Estilo/9-2-Emotion","docId":"Estilo/9-2-Emotion","unlisted":false},{"type":"link","label":"Styled-Components","href":"/Estilo/9-3-Styled-Components","docId":"Estilo/9-3-Styled-Components","unlisted":false},{"type":"link","label":"M\xf3dulos CSS","href":"/Estilo/9-4-M\xf3dulos CSS","docId":"Estilo/9-4-M\xf3dulos CSS","unlisted":false},{"type":"link","label":"Uso de la librer\xeda clsx","href":"/Estilo/9-5-Uso de la librer\xeda clsx","docId":"Estilo/9-5-Uso de la librer\xeda clsx","unlisted":false},{"type":"link","label":"Gesti\xf3n de estilos globales y temas","href":"/Estilo/9-6-Gesti\xf3n de estilos globales y temas","docId":"Estilo/9-6-Gesti\xf3n de estilos globales y temas","unlisted":false},{"type":"link","label":"Comparaci\xf3n entre CSS-in-JS y CSS tradicional","href":"/Estilo/9-7-Comparaci\xf3n entre CSS-in-JS y CSS tradicional","docId":"Estilo/9-7-Comparaci\xf3n entre CSS-in-JS y CSS tradicional","unlisted":false}]},{"type":"category","label":"\xbfFin","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"La comunidad y el ecosistema de React","href":"/\xbfFin/10-1-La comunidad y el ecosistema de React","docId":"\xbfFin/10-1-La comunidad y el ecosistema de React","unlisted":false}]}]},"docs":{"\xbfFin/10-1-La comunidad y el ecosistema de React":{"id":"\xbfFin/10-1-La comunidad y el ecosistema de React","title":"La comunidad y el ecosistema de React","description":"React no es solo una biblioteca de JavaScript para construir interfaces de usuario, es tambi\xe9n el centro de una comunidad vibrante y un ecosistema en constante evoluci\xf3n. Entender este aspecto de React puede abrirte las puertas a innumerables recursos, herramientas y oportunidades para mejorar tus habilidades y proyectos. En este apartado, exploraremos la comunidad y el ecosistema que rodean a React, desde c\xf3mo empezar a involucrarte hasta qu\xe9 herramientas y bibliotecas adicionales pueden ser \xfatiles en tu camino como desarrollador.","sidebar":"tutorialSidebar"},"B\xe1sico/1-1-Introducci\xf3n a React y preparaci\xf3n del entorno de desarrollo":{"id":"B\xe1sico/1-1-Introducci\xf3n a React y preparaci\xf3n del entorno de desarrollo","title":"Introducci\xf3n a React y preparaci\xf3n del entorno de desarrollo","description":"React es una biblioteca de JavaScript que nos permite construir interfaces de usuario de manera eficiente y manejable. Fue desarrollada por Facebook y se ha convertido en una de las herramientas m\xe1s populares para el desarrollo de aplicaciones web modernas. Una de sus caracter\xedsticas m\xe1s destacadas es su capacidad para construir componentes reutilizables, lo que facilita la creaci\xf3n y mantenimiento de proyectos grandes y complejos.","sidebar":"tutorialSidebar"},"B\xe1sico/1-2-Introducci\xf3n a JSX y expresi\xf3n de componentes en React":{"id":"B\xe1sico/1-2-Introducci\xf3n a JSX y expresi\xf3n de componentes en React","title":"Introducci\xf3n a JSX y expresi\xf3n de componentes en React","description":"\xbfQu\xe9 es JSX?","sidebar":"tutorialSidebar"},"B\xe1sico/1-3-Razones para usar componentes funcionales en lugar de componentes de clase":{"id":"B\xe1sico/1-3-Razones para usar componentes funcionales en lugar de componentes de clase","title":"Razones para usar componentes funcionales en lugar de componentes de clase","description":"Introducci\xf3n","sidebar":"tutorialSidebar"},"B\xe1sico/1-4-Pasar datos a los componentes con Props":{"id":"B\xe1sico/1-4-Pasar datos a los componentes con Props","title":"Pasar datos a los componentes con Props","description":"En React, una de las piezas fundamentales para construir interfaces din\xe1micas es la capacidad de pasar datos a los componentes. Estos datos se pasan a trav\xe9s de un mecanismo llamado Props (abreviatura de \\"properties\\"). Comprender c\xf3mo funcionan las Props es esencial para crear componentes reutilizables y eficientes en tus aplicaciones.","sidebar":"tutorialSidebar"},"B\xe1sico/1-5-Gesti\xf3n de estado con State":{"id":"B\xe1sico/1-5-Gesti\xf3n de estado con State","title":"Gesti\xf3n de estado con State","description":"En React, State es uno de los conceptos fundamentales que necesitas dominar para construir aplicaciones interactivas. El State permite que un componente \\"recuerde\\" datos entre renderizados y reaccione a las interacciones del usuario o a otros eventos que ocurran en la aplicaci\xf3n.","sidebar":"tutorialSidebar"},"B\xe1sico/1-6-Manejo de eventos en componentes":{"id":"B\xe1sico/1-6-Manejo de eventos en componentes","title":"Manejo de eventos en componentes","description":"Cuando trabajamos con React, uno de los aspectos m\xe1s importantes es el manejo de eventos dentro de nuestros componentes. Los eventos en React funcionan de manera similar a los eventos en el DOM (Document Object Model) tradicional, pero con algunas diferencias clave que hacen que sean m\xe1s f\xe1ciles de manejar y comprender.","sidebar":"tutorialSidebar"},"B\xe1sico/1-7-Renderizado condicional y procesamiento de listas en JSX":{"id":"B\xe1sico/1-7-Renderizado condicional y procesamiento de listas en JSX","title":"Renderizado condicional y procesamiento de listas en JSX","description":"En React, uno de los aspectos m\xe1s potentes es la capacidad de mostrar contenido din\xe1mico basado en condiciones espec\xedficas y de procesar listas de elementos de manera eficiente. Estas habilidades son esenciales para construir interfaces interactivas y flexibles. A continuaci\xf3n, exploraremos c\xf3mo implementar renderizado condicional y c\xf3mo trabajar con listas en JSX, la sintaxis que utiliza React para definir la interfaz de usuario.","sidebar":"tutorialSidebar"},"Ciclo de vida/4-1-Introducci\xf3n a useEffect y control del ciclo de vida":{"id":"Ciclo de vida/4-1-Introducci\xf3n a useEffect y control del ciclo de vida","title":"Introducci\xf3n a useEffect y control del ciclo de vida","description":"useEffect es uno de los hooks m\xe1s poderosos y utilizados en React. Nos permite gestionar efectos secundarios en componentes funcionales, como la obtenci\xf3n de datos, la suscripci\xf3n a servicios o la manipulaci\xf3n del DOM, asegur\xe1ndonos de que nuestras aplicaciones funcionen de manera correcta y eficiente. Pero, para usar useEffect correctamente, es fundamental entender c\xf3mo funciona el ciclo de vida de un componente en React.","sidebar":"tutorialSidebar"},"Ciclo de vida/4-2-Uso de useEffect con funciones con nombre":{"id":"Ciclo de vida/4-2-Uso de useEffect con funciones con nombre","title":"Uso de useEffect con funciones con nombre","description":"En el desarrollo con React, useEffect es un Hook crucial que nos permite manejar efectos secundarios en nuestros componentes, como llamadas a APIs, suscripciones o actualizaciones del DOM. A menudo, utilizamos funciones an\xf3nimas dentro de useEffect, pero en muchos casos es m\xe1s claro y organizado usar funciones con nombre. Veamos c\xf3mo y cu\xe1ndo hacerlo.","sidebar":"tutorialSidebar"},"Ciclo de vida/4-3-Razones para que useEffect realice una sola tarea":{"id":"Ciclo de vida/4-3-Razones para que useEffect realice una sola tarea","title":"Razones para que useEffect realice una sola tarea","description":"---","sidebar":"tutorialSidebar"},"Ciclo de vida/4-4-Gesti\xf3n de operaciones as\xedncronas dentro de useEffect":{"id":"Ciclo de vida/4-4-Gesti\xf3n de operaciones as\xedncronas dentro de useEffect","title":"Gesti\xf3n de operaciones as\xedncronas dentro de useEffect","description":"En React, el hook useEffect es una herramienta fundamental para manejar efectos secundarios en los componentes, como la suscripci\xf3n a servicios, la limpieza de recursos o, en nuestro caso, la gesti\xf3n de operaciones as\xedncronas. Es importante entender c\xf3mo y cu\xe1ndo ejecutar estas operaciones de manera eficiente y segura para mantener el rendimiento y la estabilidad de nuestras aplicaciones.","sidebar":"tutorialSidebar"},"Componente/5-1-Introducci\xf3n a componentes y buenos nombres para componentes":{"id":"Componente/5-1-Introducci\xf3n a componentes y buenos nombres para componentes","title":"Introducci\xf3n a componentes y buenos nombres para componentes","description":"\xbfQu\xe9 es un componente en React?","sidebar":"tutorialSidebar"},"Componente/5-2-Uso de etiquetas auto-cerradas":{"id":"Componente/5-2-Uso de etiquetas auto-cerradas","title":"Uso de etiquetas auto-cerradas","description":"\xbfQu\xe9 son las etiquetas auto-cerradas?","sidebar":"tutorialSidebar"},"Componente/5-3-Casos en los que se necesita Fragment y cu\xe1ndo no":{"id":"Componente/5-3-Casos en los que se necesita Fragment y cu\xe1ndo no","title":"Casos en los que se necesita Fragment y cu\xe1ndo no","description":"\xbfQu\xe9 es un Fragment en React?","sidebar":"tutorialSidebar"},"Componente/5-4-Retorno de JSX desde una funci\xf3n de componente":{"id":"Componente/5-4-Retorno de JSX desde una funci\xf3n de componente","title":"Retorno de JSX desde una funci\xf3n de componente","description":"Cuando trabajamos con React, uno de los conceptos m\xe1s importantes es entender c\xf3mo se retornan elementos JSX desde una funci\xf3n de componente. JSX es una extensi\xf3n de la sintaxis de JavaScript que nos permite escribir c\xf3digo similar a HTML dentro de un archivo JavaScript. Este c\xf3digo es luego transformado en elementos React que pueden ser renderizados en la interfaz de usuario.","sidebar":"tutorialSidebar"},"Componente/5-5-Declaraci\xf3n de componentes internos dentro de un componente":{"id":"Componente/5-5-Declaraci\xf3n de componentes internos dentro de un componente","title":"Declaraci\xf3n de componentes internos dentro de un componente","description":"Cuando trabajamos con React, a menudo necesitamos dividir nuestro c\xf3digo en partes m\xe1s peque\xf1as y manejables. Una forma efectiva de hacerlo es declarar componentes internos dentro de un componente m\xe1s grande. Este enfoque nos permite encapsular l\xf3gica espec\xedfica y mantener el c\xf3digo organizado, adem\xe1s de reducir el alcance de los componentes que no necesitan ser reutilizables en toda la aplicaci\xf3n.","sidebar":"tutorialSidebar"},"Componente/5-6-Configuraci\xf3n de displayName":{"id":"Componente/5-6-Configuraci\xf3n de displayName","title":"Configuraci\xf3n de displayName","description":"Cuando trabajamos con componentes en React, es posible que en alg\xfan momento necesitemos depurar el c\xf3digo o ver el \xe1rbol de componentes en herramientas como React DevTools. En estos casos, puede resultar \xfatil que los componentes tengan nombres claros y espec\xedficos, lo que facilita la identificaci\xf3n y resoluci\xf3n de problemas. Aqu\xed es donde entra en juego la propiedad displayName. Vamos a explorar c\xf3mo se utiliza y cu\xe1les son sus beneficios.","sidebar":"tutorialSidebar"},"Componente/5-7-Consideraciones al estructurar componentes":{"id":"Componente/5-7-Consideraciones al estructurar componentes","title":"Consideraciones al estructurar componentes","description":"Cuando desarrollas aplicaciones en React, es crucial estructurar tus componentes de manera que sean f\xe1ciles de mantener, reutilizables y comprensibles. A continuaci\xf3n, exploraremos algunas pr\xe1cticas recomendadas para lograr una buena estructura en tus componentes.","sidebar":"tutorialSidebar"},"Componente/5-8-Componentes de orden superior (HOC)":{"id":"Componente/5-8-Componentes de orden superior (HOC)","title":"Componentes de orden superior (HOC)","description":"\xbfQu\xe9 es un componente de orden superior?","sidebar":"tutorialSidebar"},"Estilo/9-1-Estilo en l\xednea":{"id":"Estilo/9-1-Estilo en l\xednea","title":"Estilo en l\xednea","description":"Cuando trabajas con React, uno de los temas clave es c\xf3mo aplicar estilos a tus componentes. Una de las maneras m\xe1s directas y r\xe1pidas de hacerlo es usando estilos en l\xednea. Este m\xe9todo es muy similar a c\xf3mo se estilizan elementos directamente en HTML usando el atributo style, pero con algunas diferencias importantes que exploraremos a continuaci\xf3n.","sidebar":"tutorialSidebar"},"Estilo/9-2-Emotion":{"id":"Estilo/9-2-Emotion","title":"Emotion","description":"\xbfQu\xe9 es Emotion?","sidebar":"tutorialSidebar"},"Estilo/9-3-Styled-Components":{"id":"Estilo/9-3-Styled-Components","title":"Styled-Components","description":"Styled-Components es una librer\xeda muy popular en el ecosistema de React que permite escribir estilos CSS directamente en los componentes, utilizando una sintaxis que combina JavaScript y CSS. Este enfoque, conocido como CSS-in-JS, simplifica la gesti\xf3n de estilos al asociar los estilos directamente con los componentes, evitando conflictos globales de CSS y facilitando la creaci\xf3n de interfaces m\xe1s predecibles y modulares.","sidebar":"tutorialSidebar"},"Estilo/9-4-M\xf3dulos CSS":{"id":"Estilo/9-4-M\xf3dulos CSS","title":"M\xf3dulos CSS","description":"Cuando trabajamos con React, uno de los desaf\xedos m\xe1s comunes es la gesti\xf3n de estilos en componentes, especialmente cuando se trata de evitar conflictos de nombres de clases y mantener el c\xf3digo organizado. Aqu\xed es donde los M\xf3dulos CSS se convierten en una herramienta invaluable. Los M\xf3dulos CSS permiten escribir estilos que son autom\xe1ticamente locales al componente en el que se usan, lo que significa que no necesitamos preocuparnos por colisiones de nombres en todo nuestro proyecto.","sidebar":"tutorialSidebar"},"Estilo/9-5-Uso de la librer\xeda clsx":{"id":"Estilo/9-5-Uso de la librer\xeda clsx","title":"Uso de la librer\xeda clsx","description":"\xbfQu\xe9 es clsx y por qu\xe9 usarla?","sidebar":"tutorialSidebar"},"Estilo/9-6-Gesti\xf3n de estilos globales y temas":{"id":"Estilo/9-6-Gesti\xf3n de estilos globales y temas","title":"Gesti\xf3n de estilos globales y temas","description":"Cuando trabajamos en aplicaciones React, el estilo y la presentaci\xf3n de nuestros componentes son tan importantes como la funcionalidad. Gestionar los estilos globales y los temas de manera eficiente puede hacer que tu aplicaci\xf3n no solo luzca bien, sino que tambi\xe9n sea m\xe1s f\xe1cil de mantener y escalar. Vamos a explorar c\xf3mo puedes manejar estos aspectos de manera efectiva en React.","sidebar":"tutorialSidebar"},"Estilo/9-7-Comparaci\xf3n entre CSS-in-JS y CSS tradicional":{"id":"Estilo/9-7-Comparaci\xf3n entre CSS-in-JS y CSS tradicional","title":"Comparaci\xf3n entre CSS-in-JS y CSS tradicional","description":"Cuando trabajamos con React, una de las decisiones importantes que debemos tomar es c\xf3mo manejar los estilos de nuestros componentes. Las dos opciones m\xe1s comunes son CSS-in-JS y CSS tradicional. Ambas tienen sus ventajas y desventajas, y entenderlas te ayudar\xe1 a elegir la mejor opci\xf3n para tu proyecto.","sidebar":"tutorialSidebar"},"Hook/7-1-Revisi\xf3n de useState, useRef, useEffect":{"id":"Hook/7-1-Revisi\xf3n de useState, useRef, useEffect","title":"Revisi\xf3n de useState, useRef, useEffect","description":"Cuando trabajas con React, te encontrar\xe1s frecuentemente con tres hooks fundamentales: useState, useRef, y useEffect. Estos hooks son herramientas clave que te permiten gestionar el estado, interactuar con referencias a elementos del DOM, y controlar efectos secundarios en tus componentes de React. En esta secci\xf3n, revisaremos cada uno de estos hooks con ejemplos claros para que puedas entender c\xf3mo y cu\xe1ndo utilizarlos.","sidebar":"tutorialSidebar"},"Hook/7-10-Tipos de retornos de Hooks personalizados":{"id":"Hook/7-10-Tipos de retornos de Hooks personalizados","title":"Tipos de retornos de Hooks personalizados","description":"Introducci\xf3n","sidebar":"tutorialSidebar"},"Hook/7-11-Extracci\xf3n de l\xf3gica de estado con Hooks personalizados":{"id":"Hook/7-11-Extracci\xf3n de l\xf3gica de estado con Hooks personalizados","title":"Extracci\xf3n de l\xf3gica de estado con Hooks personalizados","description":"En React, la reutilizaci\xf3n de la l\xf3gica de estado entre componentes puede ser un desaf\xedo cuando se utiliza el useState y useEffect directamente dentro de los componentes. Afortunadamente, React ofrece una soluci\xf3n elegante a este problema a trav\xe9s de los Hooks personalizados. Los Hooks personalizados te permiten extraer la l\xf3gica de estado y reutilizarla en diferentes componentes, lo que simplifica tu c\xf3digo y lo hace m\xe1s mantenible.","sidebar":"tutorialSidebar"},"Hook/7-2-useContext":{"id":"Hook/7-2-useContext","title":"useContext","description":"El Hook useContext es una herramienta poderosa en React que nos permite compartir datos entre componentes sin tener que pasar las props manualmente en cada nivel de la jerarqu\xeda de componentes. Este enfoque es especialmente \xfatil cuando tenemos valores que necesitan ser accesibles por muchos componentes en diferentes niveles de la aplicaci\xf3n, como el tema de la interfaz, el idioma de la aplicaci\xf3n o la autenticaci\xf3n del usuario.","sidebar":"tutorialSidebar"},"Hook/7-3-useCallback":{"id":"Hook/7-3-useCallback","title":"useCallback","description":"El hook useCallback es una herramienta poderosa en React que te permite memorizar funciones para evitar que se vuelvan a crear en cada renderizado. Esto es especialmente \xfatil cuando pasas funciones como props a componentes hijos que dependen de estas funciones, evitando as\xed renderizados innecesarios y mejorando el rendimiento de la aplicaci\xf3n.","sidebar":"tutorialSidebar"},"Hook/7-4-useMemo":{"id":"Hook/7-4-useMemo","title":"useMemo","description":"\xbfQu\xe9 es useMemo?","sidebar":"tutorialSidebar"},"Hook/7-5-useReducer":{"id":"Hook/7-5-useReducer","title":"useReducer","description":"El hook useReducer en React es una herramienta poderosa que te permite gestionar el estado de un componente de manera m\xe1s estructurada y predecible, especialmente cuando el estado es complejo o involucra m\xfaltiples valores. A continuaci\xf3n, exploraremos c\xf3mo funciona, cu\xe1ndo es \xfatil y c\xf3mo puedes implementarlo en tus proyectos de React.","sidebar":"tutorialSidebar"},"Hook/7-6-useLayoutEffect":{"id":"Hook/7-6-useLayoutEffect","title":"useLayoutEffect","description":"El useLayoutEffect es un hook en React que se parece mucho a useEffect, pero con una diferencia clave en cuanto al momento en que se ejecuta. Mientras que useEffect se ejecuta despu\xe9s de que el renderizado est\xe9 pintado en la pantalla, useLayoutEffect se ejecuta justo despu\xe9s del renderizado, pero antes de que el navegador actualice lo que el usuario ve en la pantalla. Esto significa que useLayoutEffect se ejecuta sincr\xf3nicamente durante el proceso de renderizado, lo que puede ser \xfatil para realizar mediciones o ajustes que deban aplicarse antes de que el navegador pinte la pantalla.","sidebar":"tutorialSidebar"},"Hook/7-7-Diferencias entre useLayoutEffect y useEffect":{"id":"Hook/7-7-Diferencias entre useLayoutEffect y useEffect","title":"Diferencias entre useLayoutEffect y useEffect","description":"Cuando comenzamos a trabajar con React, uno de los aspectos m\xe1s importantes que debemos entender es c\xf3mo gestionar los efectos secundarios en nuestros componentes. Para esto, React nos proporciona dos hooks clave: useEffect y useLayoutEffect. Aunque a primera vista pueden parecer similares, tienen diferencias cruciales que afectan el rendimiento y el comportamiento de nuestros componentes. En esta secci\xf3n, te explicar\xe9 detalladamente estas diferencias y cu\xe1ndo utilizar cada uno.","sidebar":"tutorialSidebar"},"Hook/7-8-useImperativeHandle":{"id":"Hook/7-8-useImperativeHandle","title":"useImperativeHandle","description":"\xbfQu\xe9 es useImperativeHandle?","sidebar":"tutorialSidebar"},"Hook/7-9-Hooks personalizados":{"id":"Hook/7-9-Hooks personalizados","title":"Hooks personalizados","description":"Los Hooks personalizados en React son una poderosa herramienta que te permite extraer y reutilizar la l\xf3gica de estado entre diferentes componentes. Al igual que los Hooks integrados de React como useState, useEffect y useRef, los Hooks personalizados permiten encapsular l\xf3gica relacionada con el estado o efectos en funciones que pueden ser reutilizadas en cualquier parte de tu aplicaci\xf3n.","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"Comenzar","description":"Introducci\xf3n y c\xf3mo usar este documento","sidebar":"tutorialSidebar"},"Optimizaci\xf3n/8-1-T\xe9cnicas de optimizaci\xf3n del rendimiento de componentes":{"id":"Optimizaci\xf3n/8-1-T\xe9cnicas de optimizaci\xf3n del rendimiento de componentes","title":"T\xe9cnicas de optimizaci\xf3n del rendimiento de componentes","description":"Cuando trabajas con React, uno de los principales retos es mantener el rendimiento \xf3ptimo de tus componentes a medida que tu aplicaci\xf3n crece. React hace un gran trabajo optimizando el renderizado de los componentes, pero hay situaciones en las que puedes aplicar t\xe9cnicas adicionales para asegurarte de que tu aplicaci\xf3n sigue siendo r\xe1pida y eficiente. En este apartado, exploraremos algunas de las mejores pr\xe1cticas y estrategias para optimizar el rendimiento de los componentes en React.","sidebar":"tutorialSidebar"},"Optimizaci\xf3n/8-2-T\xe9cnicas de optimizaci\xf3n del renderizado":{"id":"Optimizaci\xf3n/8-2-T\xe9cnicas de optimizaci\xf3n del renderizado","title":"T\xe9cnicas de optimizaci\xf3n del renderizado","description":"Cuando trabajamos con React, uno de los objetivos m\xe1s importantes es mantener nuestra aplicaci\xf3n r\xe1pida y eficiente. Esto es crucial porque las aplicaciones de React suelen manejar grandes cantidades de datos y componentes, lo que puede llevar a problemas de rendimiento si no se maneja correctamente. En esta secci\xf3n, exploraremos algunas t\xe9cnicas para optimizar el renderizado en React, asegur\xe1ndonos de que nuestra aplicaci\xf3n sea lo m\xe1s \xe1gil posible.","sidebar":"tutorialSidebar"},"Props/3-1-Introducci\xf3n a Props y buenos nombres para Props":{"id":"Props/3-1-Introducci\xf3n a Props y buenos nombres para Props","title":"Introducci\xf3n a Props y buenos nombres para Props","description":"\xbfQu\xe9 son los Props en React?","sidebar":"tutorialSidebar"},"Props/3-2-Diferencias entre State y Props":{"id":"Props/3-2-Diferencias entre State y Props","title":"Diferencias entre State y Props","description":"Cuando trabajamos con React, es esencial entender la diferencia entre State y Props. Ambos son fundamentales para manejar la informaci\xf3n dentro de los componentes, pero tienen prop\xf3sitos y comportamientos distintos.","sidebar":"tutorialSidebar"},"Props/3-3-Ejemplos de copias y operaciones innecesarias con Props":{"id":"Props/3-3-Ejemplos de copias y operaciones innecesarias con Props","title":"Ejemplos de copias y operaciones innecesarias con Props","description":"En este apartado, vamos a explorar c\xf3mo podemos optimizar nuestro c\xf3digo React evitando copias y operaciones innecesarias con las Props. Es fundamental entender c\xf3mo se comportan las Props en React para escribir c\xf3digo m\xe1s eficiente y claro.","sidebar":"tutorialSidebar"},"Props/3-4-Verificaci\xf3n de tipos y configuraci\xf3n de valores predeterminados con PropTypes":{"id":"Props/3-4-Verificaci\xf3n de tipos y configuraci\xf3n de valores predeterminados con PropTypes","title":"Verificaci\xf3n de tipos y configuraci\xf3n de valores predeterminados con PropTypes","description":"Cuando trabajamos con componentes en React, es com\xfan que queramos asegurarnos de que las propiedades (props) que se pasan a estos componentes tengan el tipo correcto y que existan valores predeterminados para aquellos props que son opcionales. Para esto, React nos proporciona una herramienta muy \xfatil llamada PropTypes.","sidebar":"tutorialSidebar"},"Props/3-5-Consideraciones al usar la desestructuraci\xf3n y ...props":{"id":"Props/3-5-Consideraciones al usar la desestructuraci\xf3n y ...props","title":"Consideraciones al usar la desestructuraci\xf3n y ...props","description":"En React, la desestructuraci\xf3n y el uso del operador ...props son t\xe9cnicas comunes para manejar las propiedades (props) que se pasan a los componentes. Estas herramientas pueden hacer tu c\xf3digo m\xe1s limpio y f\xe1cil de leer, pero es importante usarlas con cuidado para evitar errores y asegurar un buen rendimiento.","sidebar":"tutorialSidebar"},"Props/3-6-Uso de Props abreviados":{"id":"Props/3-6-Uso de Props abreviados","title":"Uso de Props abreviados","description":"En React, los \\"Props\\" (propiedades) son un mecanismo esencial para pasar datos desde un componente padre a sus componentes hijos. Este proceso es fundamental para crear interfaces din\xe1micas y reactivas. En esta lecci\xf3n, nos enfocaremos en una t\xe9cnica que puede ayudarte a escribir c\xf3digo m\xe1s limpio y conciso: el uso de Props abreviados.","sidebar":"tutorialSidebar"},"Props/3-7-Razones para dividir Props complejos y ventajas de Props simples":{"id":"Props/3-7-Razones para dividir Props complejos y ventajas de Props simples","title":"Razones para dividir Props complejos y ventajas de Props simples","description":"\xbfPor qu\xe9 dividir Props complejos?","sidebar":"tutorialSidebar"},"Props/3-8-Puntos a tener en cuenta al trabajar con atributos HTML":{"id":"Props/3-8-Puntos a tener en cuenta al trabajar con atributos HTML","title":"Puntos a tener en cuenta al trabajar con atributos HTML","description":"Cuando trabajamos con React, es importante recordar que los atributos HTML en JSX (la sintaxis que se usa para escribir componentes en React) tienen algunas peculiaridades. A continuaci\xf3n, repasaremos los aspectos m\xe1s importantes que debes tener en cuenta al manejar estos atributos para que tus componentes funcionen correctamente y tu c\xf3digo sea m\xe1s limpio y mantenible.","sidebar":"tutorialSidebar"},"Props/3-9-defaultProps":{"id":"Props/3-9-defaultProps","title":"defaultProps","description":"En React, los defaultProps son una herramienta poderosa que te permite definir valores predeterminados para las Props de un componente. Esto es especialmente \xfatil cuando deseas asegurarte de que un componente siempre tenga un valor para una prop, incluso si no se le pasa un valor expl\xedcito. Vamos a explorar c\xf3mo funcionan los defaultProps, c\xf3mo se usan y por qu\xe9 son importantes.","sidebar":"tutorialSidebar"},"Renderizado/6-1-Manejo de espacios en blanco en JSX":{"id":"Renderizado/6-1-Manejo de espacios en blanco en JSX","title":"Manejo de espacios en blanco en JSX","description":"En React, el uso de JSX nos permite escribir c\xf3digo de una manera que se asemeja a HTML, pero con la potencia de JavaScript. Uno de los aspectos que puede resultar confuso al principio es c\xf3mo se manejan los espacios en blanco en JSX. A continuaci\xf3n, exploraremos c\xf3mo funcionan estos espacios y c\xf3mo puedes controlarlos para que tu interfaz se vea tal como la imaginas.","sidebar":"tutorialSidebar"},"Renderizado/6-2-Tratamiento del valor 0 (cero) en JSX":{"id":"Renderizado/6-2-Tratamiento del valor 0 (cero) en JSX","title":"Tratamiento del valor 0 (cero) en JSX","description":"En React, JSX es una extensi\xf3n de JavaScript que nos permite escribir elementos de la interfaz de usuario de una manera que se parece mucho al HTML. Sin embargo, hay ciertos matices que debemos tener en cuenta al manejar ciertos valores, y uno de ellos es el n\xfamero 0. Aunque 0 es un valor perfectamente v\xe1lido en JavaScript, su tratamiento en JSX puede tener algunas particularidades que es importante conocer para evitar errores o comportamientos inesperados.","sidebar":"tutorialSidebar"},"Renderizado/6-3-Uso de Key dentro de listas":{"id":"Renderizado/6-3-Uso de Key dentro de listas","title":"Uso de Key dentro de listas","description":"En React, cuando trabajamos con listas, uno de los aspectos m\xe1s importantes a tener en cuenta es el uso de la propiedad key. Este concepto puede parecer un poco confuso al principio, pero es fundamental para asegurar que React maneje el DOM de manera eficiente y correcta.","sidebar":"tutorialSidebar"},"Renderizado/6-4-Uso seguro de Raw HTML":{"id":"Renderizado/6-4-Uso seguro de Raw HTML","title":"Uso seguro de Raw HTML","description":"El uso de HTML \\"en bruto\\" (Raw HTML) en React puede ser necesario en ciertas ocasiones, como cuando quieres insertar c\xf3digo HTML directamente en tus componentes. Sin embargo, esto debe hacerse con cuidado para evitar problemas de seguridad como ataques de Cross-Site Scripting (XSS). En este art\xedculo, te mostrar\xe9 c\xf3mo manejar HTML en bruto de manera segura dentro de tus aplicaciones React.","sidebar":"tutorialSidebar"},"Renderizado/6-5-Renderizado din\xe1mico y condicional":{"id":"Renderizado/6-5-Renderizado din\xe1mico y condicional","title":"Renderizado din\xe1mico y condicional","description":"En React, uno de los conceptos m\xe1s poderosos es la capacidad de renderizar contenido de manera din\xe1mica y condicional. Esto significa que puedes mostrar o esconder elementos en tu aplicaci\xf3n bas\xe1ndote en ciertas condiciones, lo cual es esencial para crear interfaces interactivas y responsivas.","sidebar":"tutorialSidebar"},"State/2-1-Introducci\xf3n a State y buenos nombres para State":{"id":"State/2-1-Introducci\xf3n a State y buenos nombres para State","title":"Introducci\xf3n a State y buenos nombres para State","description":"\xbfQu\xe9 es el State en React?","sidebar":"tutorialSidebar"},"State/2-2-Gesti\xf3n de entradas del usuario con State":{"id":"State/2-2-Gesti\xf3n de entradas del usuario con State","title":"Gesti\xf3n de entradas del usuario con State","description":"Introducci\xf3n","sidebar":"tutorialSidebar"},"State/2-3-Establecer valores iniciales correctos y eliminar estados innecesarios":{"id":"State/2-3-Establecer valores iniciales correctos y eliminar estados innecesarios","title":"Establecer valores iniciales correctos y eliminar estados innecesarios","description":"La importancia de un estado bien definido","sidebar":"tutorialSidebar"},"State/2-4-Identificaci\xf3n y soluci\xf3n de problemas con valores que no se actualizan":{"id":"State/2-4-Identificaci\xf3n y soluci\xf3n de problemas con valores que no se actualizan","title":"Identificaci\xf3n y soluci\xf3n de problemas con valores que no se actualizan","description":"Cuando trabajamos con State en React, uno de los desaf\xedos m\xe1s comunes es enfrentar situaciones donde los valores que esperamos que se actualicen, no lo hacen. Esto puede ser frustrante, especialmente si no entendemos por qu\xe9 ocurre. En esta secci\xf3n, exploraremos algunas de las razones m\xe1s comunes detr\xe1s de este comportamiento y c\xf3mo solucionarlo.","sidebar":"tutorialSidebar"},"State/2-5-Gesti\xf3n de estados de bandera":{"id":"State/2-5-Gesti\xf3n de estados de bandera","title":"Gesti\xf3n de estados de bandera","description":"En el desarrollo de aplicaciones con React, es com\xfan encontrarse con situaciones donde necesitamos manejar estados que act\xfaan como \\"banderas\\" o \\"flags\\". Estos estados son esencialmente valores booleanos (true o false) que nos permiten controlar el flujo de la aplicaci\xf3n, como mostrar u ocultar un componente, habilitar o deshabilitar un bot\xf3n, entre otros.","sidebar":"tutorialSidebar"},"State/2-6-Simplificaci\xf3n y estructuraci\xf3n de estados relacionados":{"id":"State/2-6-Simplificaci\xf3n y estructuraci\xf3n de estados relacionados","title":"Simplificaci\xf3n y estructuraci\xf3n de estados relacionados","description":"En React, la gesti\xf3n del estado (state) es esencial para construir aplicaciones interactivas. Sin embargo, cuando el estado de un componente comienza a volverse complejo, puede ser dif\xedcil de manejar y propenso a errores. Por eso, es fundamental aprender a simplificar y estructurar los estados relacionados de manera efectiva. En esta lecci\xf3n, te ense\xf1ar\xe9 c\xf3mo hacerlo utilizando t\xe9cnicas sencillas y ejemplos claros.","sidebar":"tutorialSidebar"},"State/2-7-Introducci\xf3n a useRef y uso de variables de componente en lugar de useState":{"id":"State/2-7-Introducci\xf3n a useRef y uso de variables de componente en lugar de useState","title":"Introducci\xf3n a useRef y uso de variables de componente en lugar de useState","description":"En el desarrollo con React, useState es una herramienta fundamental para gestionar el estado de un componente, pero hay situaciones en las que otra herramienta llamada useRef puede ser m\xe1s adecuada. En esta lecci\xf3n, vamos a explorar useRef, entendiendo c\xf3mo y cu\xe1ndo usarlo, y por qu\xe9, en ciertos casos, es preferible al uso de useState.","sidebar":"tutorialSidebar"},"State/2-8-Naturaleza as\xedncrona de la funci\xf3n de actualizaci\xf3n del estado, aprovechamiento del estado anterior y reinicializaci\xf3n del estado":{"id":"State/2-8-Naturaleza as\xedncrona de la funci\xf3n de actualizaci\xf3n del estado, aprovechamiento del estado anterior y reinicializaci\xf3n del estado","title":"Naturaleza as\xedncrona de la funci\xf3n de actualizaci\xf3n del estado, aprovechamiento del estado anterior y reinicializaci\xf3n del estado","description":"Cuando trabajamos con state en React, es fundamental comprender que la funci\xf3n que actualiza el estado (setState en los componentes de clase o la funci\xf3n retornada por useState en los componentes funcionales) es as\xedncrona. Esto significa que las actualizaciones del estado no se aplican de inmediato, sino que React las agrupa y las procesa en lotes para optimizar el rendimiento.","sidebar":"tutorialSidebar"}}}}')}}]);