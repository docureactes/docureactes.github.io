"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[8252],{7134:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>r});var a=s(4848),o=s(8453);const l={},t="Gesti\xf3n de estilos globales y temas",i={id:"Estilo/9-6-Gesti\xf3n de estilos globales y temas",title:"Gesti\xf3n de estilos globales y temas",description:"Cuando trabajamos en aplicaciones React, el estilo y la presentaci\xf3n de nuestros componentes son tan importantes como la funcionalidad. Gestionar los estilos globales y los temas de manera eficiente puede hacer que tu aplicaci\xf3n no solo luzca bien, sino que tambi\xe9n sea m\xe1s f\xe1cil de mantener y escalar. Vamos a explorar c\xf3mo puedes manejar estos aspectos de manera efectiva en React.",source:"@site/docs/9-Estilo/9-6-Gesti\xf3n de estilos globales y temas.md",sourceDirName:"9-Estilo",slug:"/Estilo/9-6-Gesti\xf3n de estilos globales y temas",permalink:"/Estilo/9-6-Gesti\xf3n de estilos globales y temas",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Uso de la librer\xeda clsx",permalink:"/Estilo/9-5-Uso de la librer\xeda clsx"},next:{title:"Comparaci\xf3n entre CSS-in-JS y CSS tradicional",permalink:"/Estilo/9-7-Comparaci\xf3n entre CSS-in-JS y CSS tradicional"}},c={},r=[{value:"\xbfQu\xe9 son los estilos globales?",id:"qu\xe9-son-los-estilos-globales",level:2},{value:"Ejemplo de estilos globales",id:"ejemplo-de-estilos-globales",level:3},{value:"\xbfQu\xe9 es un tema en React?",id:"qu\xe9-es-un-tema-en-react",level:2},{value:"Implementaci\xf3n b\xe1sica de temas",id:"implementaci\xf3n-b\xe1sica-de-temas",level:3},{value:"Puntos clave a considerar",id:"puntos-clave-a-considerar",level:2},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"gesti\xf3n-de-estilos-globales-y-temas",children:"Gesti\xf3n de estilos globales y temas"}),"\n",(0,a.jsx)(n.p,{children:"Cuando trabajamos en aplicaciones React, el estilo y la presentaci\xf3n de nuestros componentes son tan importantes como la funcionalidad. Gestionar los estilos globales y los temas de manera eficiente puede hacer que tu aplicaci\xf3n no solo luzca bien, sino que tambi\xe9n sea m\xe1s f\xe1cil de mantener y escalar. Vamos a explorar c\xf3mo puedes manejar estos aspectos de manera efectiva en React."}),"\n",(0,a.jsx)(n.h2,{id:"qu\xe9-son-los-estilos-globales",children:"\xbfQu\xe9 son los estilos globales?"}),"\n",(0,a.jsx)(n.p,{children:"Los estilos globales son reglas CSS que se aplican a toda la aplicaci\xf3n. A diferencia de los estilos espec\xedficos de componentes, los estilos globales afectan a todos los elementos que coinciden con los selectores definidos. Estos se suelen definir en un archivo CSS separado, que se importa al inicio de la aplicaci\xf3n."}),"\n",(0,a.jsx)(n.h3,{id:"ejemplo-de-estilos-globales",children:"Ejemplo de estilos globales"}),"\n",(0,a.jsxs)(n.p,{children:["Imaginemos que tienes un archivo ",(0,a.jsx)(n.code,{children:"global.css"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:"/* global.css */\n\n/* Aplicar un fondo gris claro a todo el cuerpo de la p\xe1gina */\nbody {\n  background-color: #f0f0f0;\n  font-family: Arial, sans-serif;\n}\n\n/* Hacer que todos los encabezados h1 sean de color azul oscuro */\nh1 {\n  color: #003366;\n}\n\n/* Establecer un margen predeterminado para todos los p\xe1rrafos */\np {\n  margin: 1em 0;\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Para aplicar estos estilos globales en tu aplicaci\xf3n React, simplemente importa el archivo CSS en el punto de entrada de tu aplicaci\xf3n, normalmente ",(0,a.jsx)(n.code,{children:"index.js"})," o ",(0,a.jsx)(n.code,{children:"App.js"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.css';  // Importa los estilos globales\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Con este enfoque, todos los componentes de tu aplicaci\xf3n se ver\xe1n afectados por las reglas CSS definidas en ",(0,a.jsx)(n.code,{children:"global.css"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"qu\xe9-es-un-tema-en-react",children:"\xbfQu\xe9 es un tema en React?"}),"\n",(0,a.jsx)(n.p,{children:"Un tema en React se refiere a un conjunto de estilos predefinidos que puedes aplicar din\xe1micamente a tu aplicaci\xf3n. Los temas permiten cambiar el aspecto general de tu aplicaci\xf3n, como los colores, fuentes y otros estilos, sin tener que modificar los componentes individuales."}),"\n",(0,a.jsx)(n.h3,{id:"implementaci\xf3n-b\xe1sica-de-temas",children:"Implementaci\xf3n b\xe1sica de temas"}),"\n",(0,a.jsxs)(n.p,{children:["Supongamos que queremos que nuestra aplicaci\xf3n tenga un tema claro y un tema oscuro, y que el usuario pueda cambiar entre ellos. Podemos lograr esto utilizando el contexto de React (",(0,a.jsx)(n.code,{children:"React Context"}),") y un archivo CSS para cada tema."]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Definir los estilos para cada tema en archivos CSS:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:"/* light-theme.css */\n:root {\n  --background-color: white;\n  --text-color: black;\n}\n\n/* dark-theme.css */\n:root {\n  --background-color: black;\n  --text-color: white;\n}\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Crear un contexto para el tema:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// ThemeContext.js\n\nimport React, { createContext, useState } from 'react';\n\nexport const ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light');\n\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Aplicar el tema en el componente principal:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// App.js\n\nimport React, { useContext } from 'react';\nimport { ThemeContext, ThemeProvider } from './ThemeContext';\nimport './light-theme.css';\nimport './dark-theme.css';\n\nfunction App() {\n  const { theme, toggleTheme } = useContext(ThemeContext);\n\n  return (\n    <div className={`App ${theme}-theme`}>\n      <button onClick={toggleTheme}>\n        Cambiar a tema {theme === 'light' ? 'oscuro' : 'claro'}\n      </button>\n      <h1>Hola, Mundo!</h1>\n      <p>Este es un ejemplo de cambio de temas en React.</p>\n    </div>\n  );\n}\n\nexport default function Root() {\n  return (\n    <ThemeProvider>\n      <App />\n    </ThemeProvider>\n  );\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["En este ejemplo, utilizamos clases CSS (",(0,a.jsx)(n.code,{children:"light-theme"})," y ",(0,a.jsx)(n.code,{children:"dark-theme"}),") para aplicar diferentes estilos dependiendo del tema seleccionado. La funci\xf3n ",(0,a.jsx)(n.code,{children:"toggleTheme"})," permite al usuario cambiar entre los temas claro y oscuro."]}),"\n",(0,a.jsx)(n.h2,{id:"puntos-clave-a-considerar",children:"Puntos clave a considerar"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:["Variables CSS (",(0,a.jsx)(n.code,{children:":root"}),")"]}),": Usar variables CSS en los temas facilita la modificaci\xf3n y reutilizaci\xf3n de estilos a lo largo de la aplicaci\xf3n."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Contexto de React"}),": Es ideal para compartir el estado del tema entre m\xfaltiples componentes sin necesidad de pasar props manualmente."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Arquitectura escalable"}),": Mantener los estilos tem\xe1ticos en archivos separados y manejarlos mediante clases CSS o variables, permite escalar la aplicaci\xf3n y manejar m\xfaltiples temas con facilidad."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"React Context API"}),"\n",(0,a.jsxs)(n.li,{children:["Variables CSS (",(0,a.jsx)(n.code,{children:":root"}),")"]}),"\n",(0,a.jsx)(n.li,{children:"Gesti\xf3n de temas en aplicaciones web"}),"\n",(0,a.jsx)(n.li,{children:"Estilos globales vs estilos de componentes"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,a.jsx)(n.p,{children:"La gesti\xf3n de estilos globales y temas en React es crucial para mantener una aplicaci\xf3n consistente y f\xe1cil de mantener. Los estilos globales se aplican en toda la aplicaci\xf3n, mientras que los temas permiten cambiar din\xe1micamente el aspecto de la aplicaci\xf3n mediante el uso de variables CSS y la API de contexto de React. Implementar ambos de manera efectiva puede mejorar significativamente la experiencia de desarrollo y la usabilidad de tu aplicaci\xf3n."})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>i});var a=s(6540);const o={},l=a.createContext(o);function t(e){const n=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),a.createElement(l.Provider,{value:n},e.children)}}}]);