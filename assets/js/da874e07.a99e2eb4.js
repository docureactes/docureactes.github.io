"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[5379],{8196:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var s=o(4848),t=o(8453);const r={},a="Tipos de retornos de Hooks personalizados",i={id:"Hook/7-10-Tipos de retornos de Hooks personalizados",title:"Tipos de retornos de Hooks personalizados",description:"Introducci\xf3n",source:"@site/docs/7-Hook/7-10-Tipos de retornos de Hooks personalizados.md",sourceDirName:"7-Hook",slug:"/Hook/7-10-Tipos de retornos de Hooks personalizados",permalink:"/Hook/7-10-Tipos de retornos de Hooks personalizados",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Revisi\xf3n de useState, useRef, useEffect",permalink:"/Hook/7-1-Revisi\xf3n de useState, useRef, useEffect"},next:{title:"Extracci\xf3n de l\xf3gica de estado con Hooks personalizados",permalink:"/Hook/7-11-Extracci\xf3n de l\xf3gica de estado con Hooks personalizados"}},l={},d=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Retorno de valores primitivos",id:"retorno-de-valores-primitivos",level:2},{value:"Retorno de objetos",id:"retorno-de-objetos",level:2},{value:"Retorno de arrays",id:"retorno-de-arrays",level:2},{value:"Retorno de funciones",id:"retorno-de-funciones",level:2},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"tipos-de-retornos-de-hooks-personalizados",children:"Tipos de retornos de Hooks personalizados"}),"\n",(0,s.jsx)(n.h2,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,s.jsx)(n.p,{children:"En React, los Hooks personalizados son una herramienta poderosa que nos permite reutilizar l\xf3gica de estado y efectos entre diferentes componentes. Al crear un Hook personalizado, una de las decisiones clave es qu\xe9 tipo de valor o valores devolver. En este apartado, exploraremos los distintos tipos de retornos que puedes utilizar en tus Hooks personalizados y c\xf3mo cada uno de ellos puede ser \xfatil seg\xfan el caso."}),"\n",(0,s.jsx)(n.h2,{id:"retorno-de-valores-primitivos",children:"Retorno de valores primitivos"}),"\n",(0,s.jsx)(n.p,{children:"Uno de los tipos de retorno m\xe1s simples que puede tener un Hook personalizado es un valor primitivo, como un n\xfamero, una cadena o un booleano. Esto es \xfatil cuando tu Hook realiza una operaci\xf3n que calcula o determina un valor \xfanico."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// Un Hook personalizado que verifica si el usuario est\xe1 online\nfunction useIsOnline() {\n  const [isOnline, setIsOnline] = React.useState(navigator.onLine);\n\n  React.useEffect(() => {\n    function updateOnlineStatus() {\n      setIsOnline(navigator.onLine);\n    }\n\n    window.addEventListener('online', updateOnlineStatus);\n    window.addEventListener('offline', updateOnlineStatus);\n\n    return () => {\n      window.removeEventListener('online', updateOnlineStatus);\n      window.removeEventListener('offline', updateOnlineStatus);\n    };\n  }, []);\n\n  return isOnline; // Retorna un valor booleano\n}\n\n// Uso del Hook en un componente\nfunction Status() {\n  const isOnline = useIsOnline();\n\n  return (\n    <div>\n      {isOnline ? \"Est\xe1s en l\xednea\" : \"Est\xe1s desconectado\"}\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Punto clave:"})," Este tipo de retorno es ideal para casos en los que el Hook maneja una sola pieza de informaci\xf3n que el componente necesita."]}),"\n",(0,s.jsx)(n.h2,{id:"retorno-de-objetos",children:"Retorno de objetos"}),"\n",(0,s.jsx)(n.p,{children:"En situaciones donde tu Hook necesita devolver m\xfaltiples valores relacionados, un objeto es una excelente opci\xf3n. Esto permite encapsular varios estados o funciones en una estructura f\xe1cil de usar."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// Un Hook personalizado que maneja la l\xf3gica de un contador\nfunction useCounter(initialValue = 0) {\n  const [count, setCount] = React.useState(initialValue);\n\n  const increment = () => setCount(count + 1);\n  const decrement = () => setCount(count - 1);\n  const reset = () => setCount(initialValue);\n\n  return {\n    count,       // Estado actual del contador\n    increment,   // Funci\xf3n para incrementar el contador\n    decrement,   // Funci\xf3n para decrementar el contador\n    reset        // Funci\xf3n para reiniciar el contador\n  };\n}\n\n// Uso del Hook en un componente\nfunction Counter() {\n  const { count, increment, decrement, reset } = useCounter(10);\n\n  return (\n    <div>\n      <p>Contador: {count}</p>\n      <button onClick={increment}>Incrementar</button>\n      <button onClick={decrement}>Decrementar</button>\n      <button onClick={reset}>Reiniciar</button>\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Punto clave:"})," Utilizar objetos como retorno es \xfatil para agrupar estados y funciones que trabajan en conjunto."]}),"\n",(0,s.jsx)(n.h2,{id:"retorno-de-arrays",children:"Retorno de arrays"}),"\n",(0,s.jsxs)(n.p,{children:["Otra forma com\xfan de devolver m\xfaltiples valores desde un Hook es utilizando un array. Esto es similar a la estructura que retorna ",(0,s.jsx)(n.code,{children:"useState"}),", lo que hace que el patr\xf3n sea familiar y f\xe1cil de entender."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// Un Hook personalizado que maneja el estado de un modal\nfunction useModal() {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const openModal = () => setIsOpen(true);\n  const closeModal = () => setIsOpen(false);\n\n  return [isOpen, openModal, closeModal];\n}\n\n// Uso del Hook en un componente\nfunction ModalComponent() {\n  const [isOpen, openModal, closeModal] = useModal();\n\n  return (\n    <div>\n      <button onClick={openModal}>Abrir Modal</button>\n      {isOpen && (\n        <div>\n          <p>Contenido del Modal</p>\n          <button onClick={closeModal}>Cerrar</button>\n        </div>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Punto clave:"})," Este patr\xf3n es ideal cuando el orden de los valores es claro y los nombres pueden derivarse del contexto."]}),"\n",(0,s.jsx)(n.h2,{id:"retorno-de-funciones",children:"Retorno de funciones"}),"\n",(0,s.jsx)(n.p,{children:"En algunos casos, es posible que un Hook personalizado no necesite devolver un valor de estado, sino \xfanicamente una o m\xe1s funciones. Esto es \xfatil cuando el Hook encapsula una acci\xf3n que no requiere almacenar estado interno, sino solo realizar una operaci\xf3n."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'// Un Hook personalizado para copiar texto al portapapeles\nfunction useCopyToClipboard() {\n  const copy = text => {\n    navigator.clipboard.writeText(text).then(() => {\n      console.log("Texto copiado al portapapeles");\n    });\n  };\n\n  return copy;\n}\n\n// Uso del Hook en un componente\nfunction Clipboard() {\n  const copyToClipboard = useCopyToClipboard();\n\n  return (\n    <div>\n      <button onClick={() => copyToClipboard("\xa1Hola Mundo!")}>\n        Copiar "\xa1Hola Mundo!"\n      </button>\n    </div>\n  );\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Punto clave:"})," Retornar funciones es \xfatil cuando el Hook realiza una operaci\xf3n espec\xedfica que no requiere un estado persistente."]}),"\n",(0,s.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Hooks personalizados"}),"\n",(0,s.jsx)(n.li,{children:"React Hooks"}),"\n",(0,s.jsx)(n.li,{children:"Manejo de estado en React"}),"\n",(0,s.jsx)(n.li,{children:"Buenas pr\xe1cticas en el dise\xf1o de Hooks"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,s.jsx)(n.p,{children:"Los Hooks personalizados en React pueden devolver distintos tipos de valores, desde primitivos y objetos hasta arrays y funciones. La elecci\xf3n del tipo de retorno depende de la naturaleza de la l\xf3gica que encapsula el Hook y de c\xf3mo se espera que los componentes consuman esos valores. Entender estos patrones te permitir\xe1 crear Hooks m\xe1s flexibles y reutilizables."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>i});var s=o(6540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);