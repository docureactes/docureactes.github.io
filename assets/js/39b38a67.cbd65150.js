"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[4634],{1584:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>d,contentTitle:()=>a,default:()=>t,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=n(4848),s=n(8453);const i={},a="Verificaci\xf3n de tipos y configuraci\xf3n de valores predeterminados con PropTypes",c={id:"Props/3-4-Verificaci\xf3n de tipos y configuraci\xf3n de valores predeterminados con PropTypes",title:"Verificaci\xf3n de tipos y configuraci\xf3n de valores predeterminados con PropTypes",description:"Cuando trabajamos con componentes en React, es com\xfan que queramos asegurarnos de que las propiedades (props) que se pasan a estos componentes tengan el tipo correcto y que existan valores predeterminados para aquellos props que son opcionales. Para esto, React nos proporciona una herramienta muy \xfatil llamada PropTypes.",source:"@site/docs/3-Props/3-4-Verificaci\xf3n de tipos y configuraci\xf3n de valores predeterminados con PropTypes.md",sourceDirName:"3-Props",slug:"/Props/3-4-Verificaci\xf3n de tipos y configuraci\xf3n de valores predeterminados con PropTypes",permalink:"/Props/3-4-Verificaci\xf3n de tipos y configuraci\xf3n de valores predeterminados con PropTypes",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Ejemplos de copias y operaciones innecesarias con Props",permalink:"/Props/3-3-Ejemplos de copias y operaciones innecesarias con Props"},next:{title:"Consideraciones al usar la desestructuraci\xf3n y ...props",permalink:"/Props/3-5-Consideraciones al usar la desestructuraci\xf3n y ...props"}},d={},p=[{value:"\xbfQu\xe9 son <code>PropTypes</code> y por qu\xe9 son importantes?",id:"qu\xe9-son-proptypes-y-por-qu\xe9-son-importantes",level:2},{value:"Ejemplo b\xe1sico de <code>PropTypes</code>",id:"ejemplo-b\xe1sico-de-proptypes",level:3},{value:"Explicaci\xf3n del c\xf3digo",id:"explicaci\xf3n-del-c\xf3digo",level:3},{value:"PropTypes disponibles",id:"proptypes-disponibles",level:3},{value:"Ejemplo con <code>PropTypes.shape</code>",id:"ejemplo-con-proptypesshape",level:3},{value:"Puntos clave",id:"puntos-clave",level:3},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function l(e){const o={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.h1,{id:"verificaci\xf3n-de-tipos-y-configuraci\xf3n-de-valores-predeterminados-con-proptypes",children:"Verificaci\xf3n de tipos y configuraci\xf3n de valores predeterminados con PropTypes"}),"\n",(0,r.jsxs)(o.p,{children:["Cuando trabajamos con componentes en React, es com\xfan que queramos asegurarnos de que las propiedades (",(0,r.jsx)(o.code,{children:"props"}),") que se pasan a estos componentes tengan el tipo correcto y que existan valores predeterminados para aquellos ",(0,r.jsx)(o.code,{children:"props"})," que son opcionales. Para esto, React nos proporciona una herramienta muy \xfatil llamada ",(0,r.jsx)(o.code,{children:"PropTypes"}),"."]}),"\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.code,{children:"PropTypes"})," es una librer\xeda que nos permite definir los tipos de las ",(0,r.jsx)(o.code,{children:"props"})," que un componente espera recibir, as\xed como establecer valores predeterminados para aquellas que no se proporcionen. Esto es especialmente \xfatil para evitar errores inesperados en tu aplicaci\xf3n y para mejorar la legibilidad y el mantenimiento del c\xf3digo."]}),"\n",(0,r.jsxs)(o.h2,{id:"qu\xe9-son-proptypes-y-por-qu\xe9-son-importantes",children:["\xbfQu\xe9 son ",(0,r.jsx)(o.code,{children:"PropTypes"})," y por qu\xe9 son importantes?"]}),"\n",(0,r.jsxs)(o.p,{children:["Los ",(0,r.jsx)(o.code,{children:"PropTypes"})," act\xfaan como una capa de verificaci\xf3n que asegura que los datos pasados a tus componentes cumplen con el formato esperado. Esto es fundamental para prevenir errores que pueden surgir cuando, por ejemplo, se espera un n\xfamero pero se recibe una cadena de texto, lo que podr\xeda causar fallos en el comportamiento del componente."]}),"\n",(0,r.jsxs)(o.h3,{id:"ejemplo-b\xe1sico-de-proptypes",children:["Ejemplo b\xe1sico de ",(0,r.jsx)(o.code,{children:"PropTypes"})]}),"\n",(0,r.jsxs)(o.p,{children:["A continuaci\xf3n, veremos c\xf3mo implementar ",(0,r.jsx)(o.code,{children:"PropTypes"})," en un componente sencillo:"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:"import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Saludo = ({ nombre, edad }) => {\n  return (\n    <div>\n      <h1>Hola, {nombre}!</h1>\n      <p>Tienes {edad} a\xf1os.</p>\n    </div>\n  );\n};\n\n// Definimos los tipos de las props esperadas\nSaludo.propTypes = {\n  nombre: PropTypes.string.isRequired, // nombre debe ser una cadena de texto y es obligatorio\n  edad: PropTypes.number, // edad debe ser un n\xfamero\n};\n\n// Valores predeterminados para props opcionales\nSaludo.defaultProps = {\n  edad: 18, // Si no se proporciona la edad, el valor predeterminado ser\xe1 18\n};\n\nexport default Saludo;\n"})}),"\n",(0,r.jsx)(o.h3,{id:"explicaci\xf3n-del-c\xf3digo",children:"Explicaci\xf3n del c\xf3digo"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:["\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.strong,{children:(0,r.jsx)(o.code,{children:"PropTypes.string.isRequired"})}),": Aqu\xed estamos diciendo que la ",(0,r.jsx)(o.code,{children:"prop"})," ",(0,r.jsx)(o.code,{children:"nombre"})," debe ser una cadena de texto y que su presencia es obligatoria. Si no se proporciona, React mostrar\xe1 una advertencia en la consola durante el desarrollo."]}),"\n"]}),"\n",(0,r.jsxs)(o.li,{children:["\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.strong,{children:(0,r.jsx)(o.code,{children:"PropTypes.number"})}),": En este caso, ",(0,r.jsx)(o.code,{children:"edad"})," debe ser un n\xfamero, pero no es obligatorio. Si no se proporciona, el componente no lanzar\xe1 una advertencia, gracias al valor predeterminado que hemos definido."]}),"\n"]}),"\n",(0,r.jsxs)(o.li,{children:["\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.strong,{children:(0,r.jsx)(o.code,{children:"defaultProps"})}),": Si la ",(0,r.jsx)(o.code,{children:"prop"})," ",(0,r.jsx)(o.code,{children:"edad"})," no se pasa al componente, tomar\xe1 el valor predeterminado de ",(0,r.jsx)(o.code,{children:"18"}),". Esto es \xfatil para evitar que el componente falle o que se muestre informaci\xf3n incorrecta."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(o.h3,{id:"proptypes-disponibles",children:"PropTypes disponibles"}),"\n",(0,r.jsxs)(o.p,{children:["React proporciona una variedad de ",(0,r.jsx)(o.code,{children:"PropTypes"})," que puedes utilizar para verificar diferentes tipos de datos. Algunos de los m\xe1s comunes son:"]}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:(0,r.jsx)(o.code,{children:"PropTypes.string"})}),": Verifica que la ",(0,r.jsx)(o.code,{children:"prop"})," sea una cadena de texto."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:(0,r.jsx)(o.code,{children:"PropTypes.number"})}),": Verifica que la ",(0,r.jsx)(o.code,{children:"prop"})," sea un n\xfamero."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:(0,r.jsx)(o.code,{children:"PropTypes.bool"})}),": Verifica que la ",(0,r.jsx)(o.code,{children:"prop"})," sea un valor booleano (",(0,r.jsx)(o.code,{children:"true"})," o ",(0,r.jsx)(o.code,{children:"false"}),")."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:(0,r.jsx)(o.code,{children:"PropTypes.array"})}),": Verifica que la ",(0,r.jsx)(o.code,{children:"prop"})," sea un arreglo."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:(0,r.jsx)(o.code,{children:"PropTypes.object"})}),": Verifica que la ",(0,r.jsx)(o.code,{children:"prop"})," sea un objeto."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:(0,r.jsx)(o.code,{children:"PropTypes.func"})}),": Verifica que la ",(0,r.jsx)(o.code,{children:"prop"})," sea una funci\xf3n."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:(0,r.jsx)(o.code,{children:"PropTypes.node"})}),": Verifica que la ",(0,r.jsx)(o.code,{children:"prop"})," sea cualquier cosa que React pueda renderizar (n\xfamero, cadena, elemento, etc.)."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:(0,r.jsx)(o.code,{children:"PropTypes.arrayOf"})}),": Verifica que la ",(0,r.jsx)(o.code,{children:"prop"})," sea un arreglo de un tipo espec\xedfico. Ejemplo: ",(0,r.jsx)(o.code,{children:"PropTypes.arrayOf(PropTypes.number)"})," para un arreglo de n\xfameros."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:(0,r.jsx)(o.code,{children:"PropTypes.shape"})}),": Verifica que la ",(0,r.jsx)(o.code,{children:"prop"})," sea un objeto con una forma espec\xedfica, es decir, que tenga propiedades con tipos definidos."]}),"\n"]}),"\n",(0,r.jsxs)(o.h3,{id:"ejemplo-con-proptypesshape",children:["Ejemplo con ",(0,r.jsx)(o.code,{children:"PropTypes.shape"})]}),"\n",(0,r.jsxs)(o.p,{children:["Veamos un ejemplo donde queremos asegurarnos de que una ",(0,r.jsx)(o.code,{children:"prop"})," sea un objeto con una forma espec\xedfica:"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-jsx",children:"const Usuario = ({ datosUsuario }) => {\n  return (\n    <div>\n      <h1>{datosUsuario.nombre}</h1>\n      <p>Edad: {datosUsuario.edad}</p>\n      <p>Correo: {datosUsuario.correo}</p>\n    </div>\n  );\n};\n\nUsuario.propTypes = {\n  datosUsuario: PropTypes.shape({\n    nombre: PropTypes.string.isRequired,\n    edad: PropTypes.number.isRequired,\n    correo: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default Usuario;\n"})}),"\n",(0,r.jsx)(o.h3,{id:"puntos-clave",children:"Puntos clave"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"Verificaci\xf3n de tipos"}),": Implementar ",(0,r.jsx)(o.code,{children:"PropTypes"})," te ayuda a detectar errores y mejorar la robustez de tus componentes, asegurando que reciban los datos en el formato esperado."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"Valores predeterminados"}),": ",(0,r.jsx)(o.code,{children:"defaultProps"})," es \xfatil para definir valores por defecto para las ",(0,r.jsx)(o.code,{children:"props"})," opcionales, lo que previene comportamientos inesperados cuando ciertas ",(0,r.jsx)(o.code,{children:"props"})," no se pasan al componente."]}),"\n"]}),"\n",(0,r.jsx)(o.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"PropTypes"}),": Tipos de verificaci\xf3n adicionales y personalizados."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"defaultProps"}),": Establecimiento de valores predeterminados avanzados."]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.strong,{children:"PropTypes.shape"}),": C\xf3mo estructurar objetos complejos dentro de ",(0,r.jsx)(o.code,{children:"PropTypes"}),"."]}),"\n"]}),"\n",(0,r.jsx)(o.h2,{id:"resumen",children:"Resumen"}),"\n",(0,r.jsxs)(o.p,{children:["El uso de ",(0,r.jsx)(o.code,{children:"PropTypes"})," y ",(0,r.jsx)(o.code,{children:"defaultProps"})," en React es una pr\xe1ctica recomendada que mejora la confiabilidad y la legibilidad del c\xf3digo. ",(0,r.jsx)(o.code,{children:"PropTypes"})," te permite verificar los tipos de datos que reciben tus componentes, mientras que ",(0,r.jsx)(o.code,{children:"defaultProps"})," asegura que tus componentes funcionen incluso si algunas ",(0,r.jsx)(o.code,{children:"props"})," opcionales no se proporcionan. Implementarlos correctamente te ayudar\xe1 a evitar errores comunes y a mantener un c\xf3digo m\xe1s limpio y f\xe1cil de mantener."]})]})}function t(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>a,x:()=>c});var r=n(6540);const s={},i=r.createContext(s);function a(e){const o=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:o},e.children)}}}]);