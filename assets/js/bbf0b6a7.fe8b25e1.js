"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[941],{6640:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>l});var i=o(4848),a=o(8453);const d={},r="Renderizado din\xe1mico y condicional",s={id:"Renderizado/6-5-Renderizado din\xe1mico y condicional",title:"Renderizado din\xe1mico y condicional",description:"En React, uno de los conceptos m\xe1s poderosos es la capacidad de renderizar contenido de manera din\xe1mica y condicional. Esto significa que puedes mostrar o esconder elementos en tu aplicaci\xf3n bas\xe1ndote en ciertas condiciones, lo cual es esencial para crear interfaces interactivas y responsivas.",source:"@site/docs/6-Renderizado/6-5-Renderizado din\xe1mico y condicional.md",sourceDirName:"6-Renderizado",slug:"/Renderizado/6-5-Renderizado din\xe1mico y condicional",permalink:"/Renderizado/6-5-Renderizado din\xe1mico y condicional",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Uso seguro de Raw HTML",permalink:"/Renderizado/6-4-Uso seguro de Raw HTML"},next:{title:"Revisi\xf3n de useState, useRef, useEffect",permalink:"/Hook/7-1-Revisi\xf3n de useState, useRef, useEffect"}},c={},l=[{value:"\xbfQu\xe9 es el renderizado din\xe1mico?",id:"qu\xe9-es-el-renderizado-din\xe1mico",level:2},{value:"Ejemplo b\xe1sico de renderizado din\xe1mico",id:"ejemplo-b\xe1sico-de-renderizado-din\xe1mico",level:3},{value:"Renderizado condicional",id:"renderizado-condicional",level:2},{value:"Usando operadores l\xf3gicos para el renderizado condicional",id:"usando-operadores-l\xf3gicos-para-el-renderizado-condicional",level:3},{value:"Operador &amp;&amp; (AND)",id:"operador--and",level:4},{value:"Operador ternario",id:"operador-ternario",level:4},{value:"Renderizado de listas condicionalmente",id:"renderizado-de-listas-condicionalmente",level:2},{value:"Ejemplo de renderizado condicional de listas",id:"ejemplo-de-renderizado-condicional-de-listas",level:3},{value:"Puntos clave",id:"puntos-clave",level:2},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function t(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"renderizado-din\xe1mico-y-condicional",children:"Renderizado din\xe1mico y condicional"}),"\n",(0,i.jsx)(n.p,{children:"En React, uno de los conceptos m\xe1s poderosos es la capacidad de renderizar contenido de manera din\xe1mica y condicional. Esto significa que puedes mostrar o esconder elementos en tu aplicaci\xf3n bas\xe1ndote en ciertas condiciones, lo cual es esencial para crear interfaces interactivas y responsivas."}),"\n",(0,i.jsx)(n.h2,{id:"qu\xe9-es-el-renderizado-din\xe1mico",children:"\xbfQu\xe9 es el renderizado din\xe1mico?"}),"\n",(0,i.jsxs)(n.p,{children:["El ",(0,i.jsx)(n.strong,{children:"renderizado din\xe1mico"})," se refiere a la capacidad de mostrar diferentes elementos en la interfaz seg\xfan el estado o las propiedades (props) de un componente. Es din\xe1mico porque el contenido que se muestra puede cambiar durante la ejecuci\xf3n de la aplicaci\xf3n, en lugar de estar fijo desde el inicio."]}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-b\xe1sico-de-renderizado-din\xe1mico",children:"Ejemplo b\xe1sico de renderizado din\xe1mico"}),"\n",(0,i.jsx)(n.p,{children:"Supongamos que tenemos un componente que muestra un mensaje de bienvenida personalizado. El mensaje cambia dependiendo de si el usuario est\xe1 autenticado o no."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"function MensajeBienvenida({ usuario }) {\n  // Si hay un nombre de usuario, se muestra un mensaje personalizado.\n  if (usuario) {\n    return <h1>\xa1Hola, {usuario.nombre}!</h1>;\n  } else {\n    // Si no hay un usuario, se muestra un mensaje gen\xe9rico.\n    return <h1>Bienvenido, invitado</h1>;\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["En este ejemplo, usamos una estructura condicional (",(0,i.jsx)(n.code,{children:"if-else"}),") para determinar qu\xe9 mensaje mostrar. Si ",(0,i.jsx)(n.code,{children:"usuario"})," tiene un valor, se muestra el nombre del usuario. Si no, se muestra un saludo gen\xe9rico."]}),"\n",(0,i.jsx)(n.h2,{id:"renderizado-condicional",children:"Renderizado condicional"}),"\n",(0,i.jsxs)(n.p,{children:["El ",(0,i.jsx)(n.strong,{children:"renderizado condicional"})," es una t\xe9cnica que permite controlar la renderizaci\xf3n de un componente o un elemento basado en una condici\xf3n. Es similar al renderizado din\xe1mico, pero m\xe1s espec\xedfico en cuanto a cu\xe1ndo y c\xf3mo ciertos elementos deben aparecer."]}),"\n",(0,i.jsx)(n.h3,{id:"usando-operadores-l\xf3gicos-para-el-renderizado-condicional",children:"Usando operadores l\xf3gicos para el renderizado condicional"}),"\n",(0,i.jsxs)(n.p,{children:["En lugar de usar un ",(0,i.jsx)(n.code,{children:"if-else"}),", tambi\xe9n podemos utilizar operadores l\xf3gicos para hacer que el c\xf3digo sea m\xe1s conciso."]}),"\n",(0,i.jsx)(n.h4,{id:"operador--and",children:"Operador && (AND)"}),"\n",(0,i.jsxs)(n.p,{children:["El operador ",(0,i.jsx)(n.code,{children:"&&"})," es \xfatil cuando quieres renderizar un componente o elemento solo si una condici\xf3n es verdadera."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"function MostrarBoton({ estaAutenticado }) {\n  return (\n    <div>\n      {/* El bot\xf3n solo se muestra si el usuario est\xe1 autenticado */}\n      {estaAutenticado && <button>Cerrar sesi\xf3n</button>}\n    </div>\n  );\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:['Aqu\xed, el bot\xf3n "Cerrar sesi\xf3n" solo se renderiza si ',(0,i.jsx)(n.code,{children:"estaAutenticado"})," es ",(0,i.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"operador-ternario",children:"Operador ternario"}),"\n",(0,i.jsxs)(n.p,{children:["El operador ternario (",(0,i.jsx)(n.code,{children:"? :"}),") permite manejar condiciones m\xe1s complejas de manera concisa."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"function EstadoDelUsuario({ estaAutenticado }) {\n  return (\n    <div>\n      {estaAutenticado ? (\n        <h2>Est\xe1s conectado</h2>\n      ) : (\n        <h2>No est\xe1s conectado</h2>\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"En este ejemplo, se muestra un mensaje dependiendo de si el usuario est\xe1 autenticado o no. El operador ternario ayuda a mantener el c\xf3digo limpio y f\xe1cil de leer."}),"\n",(0,i.jsx)(n.h2,{id:"renderizado-de-listas-condicionalmente",children:"Renderizado de listas condicionalmente"}),"\n",(0,i.jsxs)(n.p,{children:["Es com\xfan tener que renderizar listas de elementos basadas en ciertas condiciones. Esto se puede hacer utilizando un ",(0,i.jsx)(n.code,{children:"map"})," para iterar sobre una lista y combinarlo con operadores condicionales."]}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-de-renderizado-condicional-de-listas",children:"Ejemplo de renderizado condicional de listas"}),"\n",(0,i.jsx)(n.p,{children:"Imagina que tienes una lista de tareas y quieres mostrar solo aquellas que no han sido completadas:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"function ListaDeTareas({ tareas }) {\n  return (\n    <ul>\n      {tareas.map((tarea) => (\n        tarea.completada ? null : <li key={tarea.id}>{tarea.texto}</li>\n      ))}\n    </ul>\n  );\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["En este caso, solo se renderizan las tareas que no est\xe1n completadas. Si una tarea est\xe1 marcada como ",(0,i.jsx)(n.code,{children:"completada"}),", no se renderiza nada (",(0,i.jsx)(n.code,{children:"null"}),")."]}),"\n",(0,i.jsx)(n.h2,{id:"puntos-clave",children:"Puntos clave"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Renderizado din\xe1mico"}),": Muestra diferentes contenidos basados en las propiedades o el estado del componente."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Renderizado condicional"}),": Usa condiciones para controlar si un elemento o componente debe renderizarse."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operadores l\xf3gicos y ternarios"}),": Son \xfatiles para escribir renderizado condicional de manera concisa."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Renderizado condicional en React"}),"\n",(0,i.jsx)(n.li,{children:"Operadores l\xf3gicos en JSX"}),"\n",(0,i.jsx)(n.li,{children:"Renderizado de listas en React"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,i.jsxs)(n.p,{children:["El renderizado din\xe1mico y condicional en React es fundamental para crear interfaces interactivas y responsivas. Puedes controlar lo que se muestra en la pantalla dependiendo del estado o las propiedades del componente utilizando estructuras como ",(0,i.jsx)(n.code,{children:"if-else"}),", operadores l\xf3gicos ",(0,i.jsx)(n.code,{children:"&&"})," y el operador ternario. Estos conceptos permiten un control preciso sobre el contenido visual, mejorando la experiencia del usuario."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(t,{...e})}):t(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>s});var i=o(6540);const a={},d=i.createContext(a);function r(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);