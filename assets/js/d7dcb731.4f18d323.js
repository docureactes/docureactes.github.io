"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[7642],{8662:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>l});var s=o(4848),a=o(8453);const t={},c="useContext",r={id:"Hook/7-2-useContext",title:"useContext",description:"El Hook useContext es una herramienta poderosa en React que nos permite compartir datos entre componentes sin tener que pasar las props manualmente en cada nivel de la jerarqu\xeda de componentes. Este enfoque es especialmente \xfatil cuando tenemos valores que necesitan ser accesibles por muchos componentes en diferentes niveles de la aplicaci\xf3n, como el tema de la interfaz, el idioma de la aplicaci\xf3n o la autenticaci\xf3n del usuario.",source:"@site/docs/7-Hook/7-2-useContext.md",sourceDirName:"7-Hook",slug:"/Hook/7-2-useContext",permalink:"/Hook/7-2-useContext",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Extracci\xf3n de l\xf3gica de estado con Hooks personalizados",permalink:"/Hook/7-11-Extracci\xf3n de l\xf3gica de estado con Hooks personalizados"},next:{title:"useCallback",permalink:"/Hook/7-3-useCallback"}},i={},l=[{value:"\xbfQu\xe9 es el Contexto en React?",id:"qu\xe9-es-el-contexto-en-react",level:2},{value:"Ejemplo b\xe1sico de <code>useContext</code>",id:"ejemplo-b\xe1sico-de-usecontext",level:3},{value:"Explicaci\xf3n del ejemplo",id:"explicaci\xf3n-del-ejemplo",level:3},{value:"Beneficios de usar <code>useContext</code>",id:"beneficios-de-usar-usecontext",level:3},{value:"Consideraciones al usar <code>useContext</code>",id:"consideraciones-al-usar-usecontext",level:3},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"usecontext",children:"useContext"}),"\n",(0,s.jsxs)(n.p,{children:["El Hook ",(0,s.jsx)(n.code,{children:"useContext"})," es una herramienta poderosa en React que nos permite compartir datos entre componentes sin tener que pasar las props manualmente en cada nivel de la jerarqu\xeda de componentes. Este enfoque es especialmente \xfatil cuando tenemos valores que necesitan ser accesibles por muchos componentes en diferentes niveles de la aplicaci\xf3n, como el tema de la interfaz, el idioma de la aplicaci\xf3n o la autenticaci\xf3n del usuario."]}),"\n",(0,s.jsx)(n.h2,{id:"qu\xe9-es-el-contexto-en-react",children:"\xbfQu\xe9 es el Contexto en React?"}),"\n",(0,s.jsx)(n.p,{children:'El contexto en React es como una "caja" que almacena valores globales para nuestra aplicaci\xf3n. Estos valores pueden ser accedidos por cualquier componente que est\xe9 "suscrito" a este contexto. Sin embargo, a diferencia de otras t\xe9cnicas como pasar props, el contexto permite que cualquier componente, sin importar lo profundo que est\xe9 en el \xe1rbol de componentes, acceda a estos valores sin la necesidad de que sus padres los pasen manualmente.'}),"\n",(0,s.jsxs)(n.h3,{id:"ejemplo-b\xe1sico-de-usecontext",children:["Ejemplo b\xe1sico de ",(0,s.jsx)(n.code,{children:"useContext"})]}),"\n",(0,s.jsxs)(n.p,{children:["Veamos un ejemplo sencillo para entender c\xf3mo se utiliza ",(0,s.jsx)(n.code,{children:"useContext"}),". Supongamos que estamos creando una aplicaci\xf3n donde necesitamos compartir un tema de color entre varios componentes."]}),"\n",(0,s.jsx)(n.p,{children:"Primero, definimos un contexto:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import React, { createContext, useContext } from 'react';\n\n// Creamos el contexto con un valor por defecto\nconst TemaContexto = createContext('claro');\n\nconst ComponenteHijo = () => {\n  // Accedemos al valor del contexto usando useContext\n  const tema = useContext(TemaContexto);\n\n  // Usamos el valor del contexto en el componente\n  return (\n    <div style={{ background: tema === 'claro' ? '#fff' : '#333', color: tema === 'claro' ? '#000' : '#fff' }}>\n      {/* Mostramos el tema actual */}\n      El tema actual es {tema}\n    </div>\n  );\n};\n\nconst ComponentePadre = () => {\n  // Proveemos un valor diferente al contexto\n  return (\n    <TemaContexto.Provider value=\"oscuro\">\n      <ComponenteHijo />\n    </TemaContexto.Provider>\n  );\n};\n\nexport default ComponentePadre;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"explicaci\xf3n-del-ejemplo",children:"Explicaci\xf3n del ejemplo"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Definici\xf3n del Contexto"}),": Usamos ",(0,s.jsx)(n.code,{children:"createContext"})," para crear un nuevo contexto llamado ",(0,s.jsx)(n.code,{children:"TemaContexto"}),". El valor inicial es ",(0,s.jsx)(n.code,{children:"'claro'"}),", lo que significa que si un componente no tiene un proveedor de contexto, utilizar\xe1 este valor por defecto."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Proveer el Contexto"}),": En ",(0,s.jsx)(n.code,{children:"ComponentePadre"}),", usamos ",(0,s.jsx)(n.code,{children:"TemaContexto.Provider"})," para establecer el valor del tema en ",(0,s.jsx)(n.code,{children:"'oscuro'"}),". Todos los componentes hijos dentro de ",(0,s.jsx)(n.code,{children:"ComponentePadre"})," tendr\xe1n acceso a este valor."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Consumir el Contexto"}),": En ",(0,s.jsx)(n.code,{children:"ComponenteHijo"}),", usamos ",(0,s.jsx)(n.code,{children:"useContext(TemaContexto)"})," para acceder al valor del tema. Dependiendo del valor del tema, el fondo y el color del texto del ",(0,s.jsx)(n.code,{children:"div"})," cambiar\xe1n."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"beneficios-de-usar-usecontext",children:["Beneficios de usar ",(0,s.jsx)(n.code,{children:"useContext"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Simplicidad"}),": ",(0,s.jsx)(n.code,{children:"useContext"})," elimina la necesidad de pasar props manualmente a trav\xe9s de m\xfaltiples niveles de componentes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mantenimiento"}),": Con ",(0,s.jsx)(n.code,{children:"useContext"}),", es m\xe1s f\xe1cil mantener el c\xf3digo, ya que no necesitas modificar m\xfaltiples componentes solo para pasar una prop."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Desempe\xf1o"}),": Aunque ",(0,s.jsx)(n.code,{children:"useContext"})," es potente, debes usarlo con cuidado. Cuando el valor del contexto cambia, todos los componentes que consumen ese contexto se vuelven a renderizar, lo que podr\xeda impactar el rendimiento si no se gestiona adecuadamente."]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"consideraciones-al-usar-usecontext",children:["Consideraciones al usar ",(0,s.jsx)(n.code,{children:"useContext"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Re-renderizados innecesarios"}),": Ten cuidado al actualizar los valores del contexto, ya que esto puede desencadenar re-renderizados de todos los componentes que dependen de \xe9l."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Evitar sobreuso"}),": Aunque ",(0,s.jsx)(n.code,{children:"useContext"})," es \xfatil, no deber\xeda ser tu primera opci\xf3n para manejar la mayor\xeda de las comunicaciones entre componentes. \xdasalo cuando realmente necesites compartir valores globales."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Context API"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Hooks en React"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Optimizaci\xf3n de re-renderizados en React"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Gesti\xf3n de estado global"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,s.jsxs)(n.p,{children:["El Hook ",(0,s.jsx)(n.code,{children:"useContext"})," es una herramienta fundamental en React para compartir valores globales entre componentes sin la necesidad de pasar props manualmente en cada nivel. Es ideal para manejar temas, autenticaci\xf3n, o configuraciones globales que necesitan ser accesibles en toda la aplicaci\xf3n. Sin embargo, es importante usarlo con precauci\xf3n para evitar re-renderizados innecesarios que puedan afectar el rendimiento de la aplicaci\xf3n."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>r});var s=o(6540);const a={},t=s.createContext(a);function c(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);