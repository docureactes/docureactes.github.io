"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[1156],{4264:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>t});var s=o(4848),a=o(8453);const r={},d="Pasar datos a los componentes con Props",i={id:"B\xe1sico/1-4-Pasar datos a los componentes con Props",title:"Pasar datos a los componentes con Props",description:'En React, una de las piezas fundamentales para construir interfaces din\xe1micas es la capacidad de pasar datos a los componentes. Estos datos se pasan a trav\xe9s de un mecanismo llamado Props (abreviatura de "properties"). Comprender c\xf3mo funcionan las Props es esencial para crear componentes reutilizables y eficientes en tus aplicaciones.',source:"@site/docs/1-B\xe1sico/1-4-Pasar datos a los componentes con Props.md",sourceDirName:"1-B\xe1sico",slug:"/B\xe1sico/1-4-Pasar datos a los componentes con Props",permalink:"/B\xe1sico/1-4-Pasar datos a los componentes con Props",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Razones para usar componentes funcionales en lugar de componentes de clase",permalink:"/B\xe1sico/1-3-Razones para usar componentes funcionales en lugar de componentes de clase"},next:{title:"Gesti\xf3n de estado con State",permalink:"/B\xe1sico/1-5-Gesti\xf3n de estado con State"}},c={},t=[{value:"\xbfQu\xe9 son las Props?",id:"qu\xe9-son-las-props",level:2},{value:"Ejemplo b\xe1sico de uso de Props",id:"ejemplo-b\xe1sico-de-uso-de-props",level:3},{value:"Explicaci\xf3n del c\xf3digo",id:"explicaci\xf3n-del-c\xf3digo",level:3},{value:"Pasar m\xfaltiples Props",id:"pasar-m\xfaltiples-props",level:2},{value:"Conceptos clave",id:"conceptos-clave",level:3},{value:"Ejemplo con spread operator",id:"ejemplo-con-spread-operator",level:3},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"pasar-datos-a-los-componentes-con-props",children:"Pasar datos a los componentes con Props"}),"\n",(0,s.jsxs)(n.p,{children:["En React, una de las piezas fundamentales para construir interfaces din\xe1micas es la capacidad de pasar datos a los componentes. Estos datos se pasan a trav\xe9s de un mecanismo llamado ",(0,s.jsx)(n.strong,{children:"Props"}),' (abreviatura de "properties"). Comprender c\xf3mo funcionan las Props es esencial para crear componentes reutilizables y eficientes en tus aplicaciones.']}),"\n",(0,s.jsx)(n.h2,{id:"qu\xe9-son-las-props",children:"\xbfQu\xe9 son las Props?"}),"\n",(0,s.jsxs)(n.p,{children:["Las ",(0,s.jsx)(n.strong,{children:"Props"})," en React son un objeto que se utiliza para enviar datos desde un componente padre a un componente hijo. Los componentes hijos pueden acceder a estos datos y usarlos para renderizar contenido din\xe1mico. Es importante destacar que las Props son ",(0,s.jsx)(n.strong,{children:"inmutables"}),", lo que significa que no se pueden modificar una vez que se les ha asignado un valor. Esto ayuda a mantener la predictibilidad y la estabilidad en el comportamiento de los componentes."]}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-b\xe1sico-de-uso-de-props",children:"Ejemplo b\xe1sico de uso de Props"}),"\n",(0,s.jsx)(n.p,{children:"Imaginemos que tienes un componente que muestra un saludo. Queremos hacer que este componente sea reutilizable para saludar a diferentes personas."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// Componente Saludo que recibe una prop llamada 'nombre'\nfunction Saludo({ nombre }) {\n  return (\n    <h1>Hola, {nombre}!</h1>\n  );\n}\n\n// Componente principal que usa el componente Saludo\nfunction App() {\n  return (\n    <div>\n      {/* Pasamos la prop 'nombre' con el valor 'Juan' */}\n      <Saludo nombre=\"Juan\" />\n      {/* Pasamos la prop 'nombre' con el valor 'Mar\xeda' */}\n      <Saludo nombre=\"Mar\xeda\" />\n    </div>\n  );\n}\n\nexport default App;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"explicaci\xf3n-del-c\xf3digo",children:"Explicaci\xf3n del c\xf3digo"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Componente Saludo:"})," Este componente recibe un objeto Props que contiene una propiedad llamada ",(0,s.jsx)(n.code,{children:"nombre"}),". Usamos la desestructuraci\xf3n de objetos para extraer directamente ",(0,s.jsx)(n.code,{children:"nombre"})," de las Props."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Componente App:"})," Aqu\xed, utilizamos el componente ",(0,s.jsx)(n.code,{children:"Saludo"})," dos veces, pasando diferentes valores para la prop ",(0,s.jsx)(n.code,{children:"nombre"}),". Como resultado, ",(0,s.jsx)(n.code,{children:"Saludo"}),' renderiza "Hola, Juan!" y "Hola, Mar\xeda!" en la p\xe1gina.']}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pasar-m\xfaltiples-props",children:"Pasar m\xfaltiples Props"}),"\n",(0,s.jsx)(n.p,{children:"Puedes pasar tantas Props como necesites a un componente. Supongamos que queremos que nuestro componente de saludo tambi\xe9n muestre la edad de la persona:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// Componente Saludo que recibe 'nombre' y 'edad' como Props\nfunction Saludo({ nombre, edad }) {\n  return (\n    <div>\n      <h1>Hola, {nombre}!</h1>\n      <p>Tienes {edad} a\xf1os.</p>\n    </div>\n  );\n}\n\n// Componente principal que usa el componente Saludo\nfunction App() {\n  return (\n    <div>\n      <Saludo nombre=\"Juan\" edad={30} />\n      <Saludo nombre=\"Mar\xeda\" edad={25} />\n    </div>\n  );\n}\n\nexport default App;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"conceptos-clave",children:"Conceptos clave"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Inmutabilidad de Props:"})," Recuerda que las Props son inmutables. No intentes modificarlas dentro del componente hijo. Si necesitas cambiar valores, debes manejarlo en el componente padre, posiblemente usando el estado (",(0,s.jsx)(n.strong,{children:"State"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Uso de desestructuraci\xf3n:"})," Es com\xfan desestructurar las Props directamente en los par\xe1metros de la funci\xf3n del componente para un c\xf3digo m\xe1s limpio y f\xe1cil de leer."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Propagaci\xf3n de Props:"})," Puedes pasar todas las Props de un componente padre a un hijo usando la sintaxis ",(0,s.jsx)(n.code,{children:"{...props}"}),', lo que se conoce como "spread operator". Esto es \xfatil cuando un componente necesita todas las Props que se le est\xe1n pasando.']}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-con-spread-operator",children:"Ejemplo con spread operator"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'function Saludo({ nombre, edad }) {\n  return (\n    <div>\n      <h1>Hola, {nombre}!</h1>\n      <p>Tienes {edad} a\xf1os.</p>\n    </div>\n  );\n}\n\nfunction App() {\n  const datosPersona = { nombre: "Juan", edad: 30 };\n\n  return (\n    <div>\n      {/* Pasamos todas las Props de datosPersona usando el spread operator */}\n      <Saludo {...datosPersona} />\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,s.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Props y desestructuraci\xf3n"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Props vs. State"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Buenas pr\xe1cticas para nombrar Props"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Propagaci\xf3n de Props con el spread operator"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,s.jsx)(n.p,{children:"Las Props son fundamentales para pasar datos entre componentes en React, permitiendo la creaci\xf3n de interfaces din\xe1micas y reutilizables. Las Props son inmutables y se pueden pasar en cualquier cantidad desde un componente padre a un componente hijo. Usar desestructuraci\xf3n y el spread operator puede simplificar la manera en que trabajas con Props."})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>d,x:()=>i});var s=o(6540);const a={},r=s.createContext(a);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);