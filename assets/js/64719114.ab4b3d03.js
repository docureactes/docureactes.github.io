"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[6176],{598:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>d,toc:()=>c});var s=o(4848),r=o(8453);const t={},a="Retorno de JSX desde una funci\xf3n de componente",d={id:"Componente/5-4-Retorno de JSX desde una funci\xf3n de componente",title:"Retorno de JSX desde una funci\xf3n de componente",description:"Cuando trabajamos con React, uno de los conceptos m\xe1s importantes es entender c\xf3mo se retornan elementos JSX desde una funci\xf3n de componente. JSX es una extensi\xf3n de la sintaxis de JavaScript que nos permite escribir c\xf3digo similar a HTML dentro de un archivo JavaScript. Este c\xf3digo es luego transformado en elementos React que pueden ser renderizados en la interfaz de usuario.",source:"@site/docs/5-Componente/5-4-Retorno de JSX desde una funci\xf3n de componente.md",sourceDirName:"5-Componente",slug:"/Componente/5-4-Retorno de JSX desde una funci\xf3n de componente",permalink:"/Componente/5-4-Retorno de JSX desde una funci\xf3n de componente",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Casos en los que se necesita Fragment y cu\xe1ndo no",permalink:"/Componente/5-3-Casos en los que se necesita Fragment y cu\xe1ndo no"},next:{title:"Declaraci\xf3n de componentes internos dentro de un componente",permalink:"/Componente/5-5-Declaraci\xf3n de componentes internos dentro de un componente"}},i={},c=[{value:"\xbfQu\xe9 es JSX?",id:"qu\xe9-es-jsx",level:2},{value:"Ejemplo b\xe1sico de retorno de JSX",id:"ejemplo-b\xe1sico-de-retorno-de-jsx",level:3},{value:"Componentes con m\xe1s de un elemento JSX",id:"componentes-con-m\xe1s-de-un-elemento-jsx",level:3},{value:"Uso de <code>React.Fragment</code>",id:"uso-de-reactfragment",level:3},{value:"Resaltando los conceptos clave",id:"resaltando-los-conceptos-clave",level:2},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"retorno-de-jsx-desde-una-funci\xf3n-de-componente",children:"Retorno de JSX desde una funci\xf3n de componente"}),"\n",(0,s.jsx)(n.p,{children:"Cuando trabajamos con React, uno de los conceptos m\xe1s importantes es entender c\xf3mo se retornan elementos JSX desde una funci\xf3n de componente. JSX es una extensi\xf3n de la sintaxis de JavaScript que nos permite escribir c\xf3digo similar a HTML dentro de un archivo JavaScript. Este c\xf3digo es luego transformado en elementos React que pueden ser renderizados en la interfaz de usuario."}),"\n",(0,s.jsx)(n.h2,{id:"qu\xe9-es-jsx",children:"\xbfQu\xe9 es JSX?"}),"\n",(0,s.jsxs)(n.p,{children:["JSX (JavaScript XML) es una sintaxis que nos permite describir c\xf3mo deber\xeda verse la interfaz de usuario de nuestra aplicaci\xf3n React utilizando una mezcla de JavaScript y HTML. Aunque a primera vista puede parecer que estamos escribiendo HTML, en realidad, todo lo que escribimos en JSX es transformado en llamadas a ",(0,s.jsx)(n.code,{children:"React.createElement()"})," que construyen la estructura de la interfaz."]}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-b\xe1sico-de-retorno-de-jsx",children:"Ejemplo b\xe1sico de retorno de JSX"}),"\n",(0,s.jsx)(n.p,{children:"Veamos un ejemplo simple de c\xf3mo un componente de React puede retornar JSX:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"function Saludo() {\n  // Aqu\xed estamos retornando un simple elemento JSX que es un h1 con un saludo.\n  return <h1>\xa1Hola, mundo!</h1>;\n}\n\nexport default Saludo;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["En este caso, ",(0,s.jsx)(n.code,{children:"Saludo"})," es un componente funcional que retorna un elemento JSX. Este elemento JSX es lo que finalmente se ver\xe1 en la pantalla cuando este componente se renderice."]}),"\n",(0,s.jsx)(n.h3,{id:"componentes-con-m\xe1s-de-un-elemento-jsx",children:"Componentes con m\xe1s de un elemento JSX"}),"\n",(0,s.jsxs)(n.p,{children:["\xbfQu\xe9 sucede si necesitamos retornar m\xe1s de un elemento JSX? En React, un componente siempre debe retornar un solo elemento. Para lograr esto, podemos envolver m\xfaltiples elementos dentro de un contenedor, como un ",(0,s.jsx)(n.code,{children:"<div>"})," o un ",(0,s.jsx)(n.code,{children:"React.Fragment"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"function MensajeDeBienvenida() {\n  // Retornamos m\xfaltiples elementos dentro de un div\n  return (\n    <div>\n      <h1>\xa1Bienvenido!</h1>\n      <p>Estamos felices de verte aqu\xed.</p>\n    </div>\n  );\n}\n\nexport default MensajeDeBienvenida;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Aqu\xed, hemos utilizado un ",(0,s.jsx)(n.code,{children:"<div>"})," para envolver dos elementos JSX: un ",(0,s.jsx)(n.code,{children:"<h1>"})," y un ",(0,s.jsx)(n.code,{children:"<p>"}),". Esto asegura que estamos retornando un \xfanico elemento, tal como React lo requiere."]}),"\n",(0,s.jsxs)(n.h3,{id:"uso-de-reactfragment",children:["Uso de ",(0,s.jsx)(n.code,{children:"React.Fragment"})]}),"\n",(0,s.jsxs)(n.p,{children:["Si no queremos agregar un contenedor adicional en el DOM, podemos usar ",(0,s.jsx)(n.code,{children:"React.Fragment"}),", que nos permite retornar m\xfaltiples elementos JSX sin introducir nodos adicionales."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"function InfoUsuario() {\n  // React.Fragment nos permite devolver m\xfaltiples elementos sin a\xf1adir nodos extra\n  return (\n    <React.Fragment>\n      <h2>Nombre: Juan P\xe9rez</h2>\n      <p>Edad: 30 a\xf1os</p>\n    </React.Fragment>\n  );\n}\n\nexport default InfoUsuario;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["El resultado es el mismo que si hubi\xe9ramos usado un ",(0,s.jsx)(n.code,{children:"<div>"}),", pero sin crear un nuevo nodo en el DOM, lo cual puede ser \xfatil para mantener el c\xf3digo limpio y sem\xe1nticamente correcto."]}),"\n",(0,s.jsx)(n.h2,{id:"resaltando-los-conceptos-clave",children:"Resaltando los conceptos clave"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JSX"}),": Es una extensi\xf3n de JavaScript que permite escribir c\xf3digo similar a HTML dentro de archivos JavaScript."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Retorno de JSX"}),": Un componente de React debe retornar un solo elemento JSX. Si necesitas retornar m\xfaltiples elementos, envu\xe9lvelos en un contenedor como ",(0,s.jsx)(n.code,{children:"<div>"})," o usa ",(0,s.jsx)(n.code,{children:"React.Fragment"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"React.Fragment"})}),": Permite retornar m\xfaltiples elementos JSX sin crear nodos adicionales en el DOM."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"JSX"}),"\n",(0,s.jsx)(n.li,{children:"React.Fragment"}),"\n",(0,s.jsx)(n.li,{children:"Componentes funcionales"}),"\n",(0,s.jsx)(n.li,{children:"React.createElement"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,s.jsxs)(n.p,{children:["El retorno de JSX desde una funci\xf3n de componente es un proceso esencial en React, que permite definir la estructura visual de la interfaz. Es importante recordar que siempre debemos retornar un solo elemento JSX, utilizando contenedores como ",(0,s.jsx)(n.code,{children:"<div>"})," o ",(0,s.jsx)(n.code,{children:"React.Fragment"})," cuando sea necesario para manejar m\xfaltiples elementos. Esto asegura un c\xf3digo React eficiente y limpio, facilitando el desarrollo de aplicaciones."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>d});var s=o(6540);const r={},t=s.createContext(r);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);