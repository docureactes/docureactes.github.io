"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[7132],{7226:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>l});var s=a(4848),o=a(8453);const t={},c="Gesti\xf3n de estado con State",r={id:"B\xe1sico/1-5-Gesti\xf3n de estado con State",title:"Gesti\xf3n de estado con State",description:'En React, State es uno de los conceptos fundamentales que necesitas dominar para construir aplicaciones interactivas. El State permite que un componente "recuerde" datos entre renderizados y reaccione a las interacciones del usuario o a otros eventos que ocurran en la aplicaci\xf3n.',source:"@site/docs/1-B\xe1sico/1-5-Gesti\xf3n de estado con State.md",sourceDirName:"1-B\xe1sico",slug:"/B\xe1sico/1-5-Gesti\xf3n de estado con State",permalink:"/B\xe1sico/1-5-Gesti\xf3n de estado con State",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Pasar datos a los componentes con Props",permalink:"/B\xe1sico/1-4-Pasar datos a los componentes con Props"},next:{title:"Manejo de eventos en componentes",permalink:"/B\xe1sico/1-6-Manejo de eventos en componentes"}},i={},l=[{value:"\xbfQu\xe9 es el State?",id:"qu\xe9-es-el-state",level:2},{value:"Ejemplo b\xe1sico de uso de State",id:"ejemplo-b\xe1sico-de-uso-de-state",level:3},{value:"Desglose del ejemplo",id:"desglose-del-ejemplo",level:3},{value:"Conceptos clave",id:"conceptos-clave",level:3},{value:"Buenas pr\xe1cticas al gestionar el State",id:"buenas-pr\xe1cticas-al-gestionar-el-state",level:2},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"gesti\xf3n-de-estado-con-state",children:"Gesti\xf3n de estado con State"}),"\n",(0,s.jsxs)(n.p,{children:["En React, ",(0,s.jsx)(n.strong,{children:"State"})," es uno de los conceptos fundamentales que necesitas dominar para construir aplicaciones interactivas. El ",(0,s.jsx)(n.strong,{children:"State"}),' permite que un componente "recuerde" datos entre renderizados y reaccione a las interacciones del usuario o a otros eventos que ocurran en la aplicaci\xf3n.']}),"\n",(0,s.jsx)(n.h2,{id:"qu\xe9-es-el-state",children:"\xbfQu\xe9 es el State?"}),"\n",(0,s.jsxs)(n.p,{children:["El ",(0,s.jsx)(n.strong,{children:"State"}),' (o "estado" en espa\xf1ol) es un objeto que almacena valores que pueden cambiar con el tiempo y que afectan la forma en que un componente se renderiza. Cada vez que el ',(0,s.jsx)(n.strong,{children:"State"})," de un componente cambia, React vuelve a renderizar ese componente para reflejar el nuevo estado en la interfaz de usuario."]}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-b\xe1sico-de-uso-de-state",children:"Ejemplo b\xe1sico de uso de State"}),"\n",(0,s.jsxs)(n.p,{children:["Veamos un ejemplo simple para ilustrar c\xf3mo se utiliza el ",(0,s.jsx)(n.strong,{children:"State"})," en un componente funcional de React. Imagina que quieres crear un contador que aumenta en uno cada vez que se hace clic en un bot\xf3n."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import React, { useState } from 'react';\n\nfunction Contador() {\n  // Declaramos una variable de estado llamada 'contador' y una funci\xf3n para actualizarla llamada 'setContador'\n  const [contador, setContador] = useState(0); // '0' es el valor inicial de 'contador'\n\n  // Funci\xf3n que se ejecuta al hacer clic en el bot\xf3n\n  const incrementar = () => {\n    setContador(contador + 1); // Actualizamos el estado con el nuevo valor de 'contador'\n  };\n\n  return (\n    <div>\n      <p>Has hecho clic {contador} veces</p>\n      <button onClick={incrementar}>Haz clic aqu\xed</button>\n    </div>\n  );\n}\n\nexport default Contador;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"desglose-del-ejemplo",children:"Desglose del ejemplo"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["Importaci\xf3n de ",(0,s.jsx)(n.code,{children:"useState"})]}),": La funci\xf3n ",(0,s.jsx)(n.code,{children:"useState"})," es un ",(0,s.jsx)(n.em,{children:"Hook"})," de React que permite a\xf1adir ",(0,s.jsx)(n.strong,{children:"State"})," a un componente funcional. La importamos al inicio del archivo."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Declaraci\xf3n del State"}),": ",(0,s.jsx)(n.code,{children:"const [contador, setContador] = useState(0);"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"contador"}),": Es el valor actual del ",(0,s.jsx)(n.strong,{children:"State"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"setContador"}),": Es la funci\xf3n que usaremos para actualizar el valor de ",(0,s.jsx)(n.code,{children:"contador"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"useState(0)"}),": Inicializa el ",(0,s.jsx)(n.strong,{children:"State"})," con un valor inicial de ",(0,s.jsx)(n.code,{children:"0"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Funci\xf3n para actualizar el State"}),": La funci\xf3n ",(0,s.jsx)(n.code,{children:"incrementar"})," usa ",(0,s.jsx)(n.code,{children:"setContador(contador + 1);"})," para aumentar el valor de ",(0,s.jsx)(n.code,{children:"contador"})," en 1 cada vez que se ejecuta."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Renderizado del componente"}),": El componente renderiza un p\xe1rrafo que muestra el valor actual de ",(0,s.jsx)(n.code,{children:"contador"})," y un bot\xf3n que, al hacer clic, llama a la funci\xf3n ",(0,s.jsx)(n.code,{children:"incrementar"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"conceptos-clave",children:"Conceptos clave"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Estado inicial"}),": El valor que se pasa a ",(0,s.jsx)(n.code,{children:"useState"})," es el estado inicial del componente. En el ejemplo, el contador comienza en ",(0,s.jsx)(n.code,{children:"0"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Re-renderizado"}),": Cada vez que se llama a ",(0,s.jsx)(n.code,{children:"setContador"}),", React vuelve a renderizar el componente con el nuevo valor de ",(0,s.jsx)(n.code,{children:"contador"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Inmutabilidad del State"}),": Es importante no modificar directamente el ",(0,s.jsx)(n.strong,{children:"State"}),". En lugar de eso, siempre usamos la funci\xf3n de actualizaci\xf3n (",(0,s.jsx)(n.code,{children:"setContador"})," en este caso) para asegurarnos de que React maneje correctamente el cambio de estado."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"buenas-pr\xe1cticas-al-gestionar-el-state",children:"Buenas pr\xe1cticas al gestionar el State"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Nombres claros y descriptivos"}),": Usa nombres de variables de ",(0,s.jsx)(n.strong,{children:"State"})," que describan claramente su prop\xf3sito. Esto facilita la comprensi\xf3n y el mantenimiento del c\xf3digo."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"State local en lugar de global"}),": Mant\xe9n el ",(0,s.jsx)(n.strong,{children:"State"})," lo m\xe1s local posible. Si solo un componente necesita acceder a una pieza de estado, mant\xe9nlo en ese componente en lugar de propagarlo innecesariamente."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Evita duplicar el State"}),": No dupliques el ",(0,s.jsx)(n.strong,{children:"State"})," en varios lugares si no es necesario. Esto puede causar inconsistencias y hacer que el c\xf3digo sea m\xe1s dif\xedcil de mantener."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Hooks de React"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Re-renderizado en React"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Inmutabilidad en JavaScript"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Componentes funcionales vs. componentes de clase"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,s.jsxs)(n.p,{children:["El ",(0,s.jsx)(n.strong,{children:"State"})," en React permite que un componente gestione y responda a cambios en datos a lo largo del tiempo, lo que es esencial para crear interfaces de usuario din\xe1micas e interactivas. Usando ",(0,s.jsx)(n.code,{children:"useState"}),", podemos inicializar y actualizar valores de estado dentro de componentes funcionales, asegurando que React vuelva a renderizar el componente cuando sea necesario. Mantener nombres descriptivos y evitar la duplicaci\xf3n de estado son pr\xe1cticas recomendadas para un c\xf3digo m\xe1s claro y mantenible."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>r});var s=a(6540);const o={},t=s.createContext(o);function c(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);