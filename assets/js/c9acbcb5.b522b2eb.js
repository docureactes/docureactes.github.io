"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[2033],{4503:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>r});var i=s(4848),o=s(8453);const a={},t="Comparaci\xf3n entre CSS-in-JS y CSS tradicional",c={id:"Estilo/9-7-Comparaci\xf3n entre CSS-in-JS y CSS tradicional",title:"Comparaci\xf3n entre CSS-in-JS y CSS tradicional",description:"Cuando trabajamos con React, una de las decisiones importantes que debemos tomar es c\xf3mo manejar los estilos de nuestros componentes. Las dos opciones m\xe1s comunes son CSS-in-JS y CSS tradicional. Ambas tienen sus ventajas y desventajas, y entenderlas te ayudar\xe1 a elegir la mejor opci\xf3n para tu proyecto.",source:"@site/docs/9-Estilo/9-7-Comparaci\xf3n entre CSS-in-JS y CSS tradicional.md",sourceDirName:"9-Estilo",slug:"/Estilo/9-7-Comparaci\xf3n entre CSS-in-JS y CSS tradicional",permalink:"/Estilo/9-7-Comparaci\xf3n entre CSS-in-JS y CSS tradicional",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Gesti\xf3n de estilos globales y temas",permalink:"/Estilo/9-6-Gesti\xf3n de estilos globales y temas"},next:{title:"La comunidad y el ecosistema de React",permalink:"/\xbfFin/10-1-La comunidad y el ecosistema de React"}},l={},r=[{value:"\xbfQu\xe9 es CSS-in-JS?",id:"qu\xe9-es-css-in-js",level:2},{value:"Ejemplo b\xe1sico de CSS-in-JS con <code>styled-components</code>",id:"ejemplo-b\xe1sico-de-css-in-js-con-styled-components",level:3},{value:"\xbfQu\xe9 es CSS tradicional?",id:"qu\xe9-es-css-tradicional",level:2},{value:"Ejemplo b\xe1sico de CSS tradicional",id:"ejemplo-b\xe1sico-de-css-tradicional",level:3},{value:"Comparaci\xf3n: CSS-in-JS vs. CSS tradicional",id:"comparaci\xf3n-css-in-js-vs-css-tradicional",level:2},{value:"Ventajas de CSS-in-JS",id:"ventajas-de-css-in-js",level:3},{value:"Desventajas de CSS-in-JS",id:"desventajas-de-css-in-js",level:3},{value:"Ventajas de CSS tradicional",id:"ventajas-de-css-tradicional",level:3},{value:"Desventajas de CSS tradicional",id:"desventajas-de-css-tradicional",level:3},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"comparaci\xf3n-entre-css-in-js-y-css-tradicional",children:"Comparaci\xf3n entre CSS-in-JS y CSS tradicional"}),"\n",(0,i.jsxs)(n.p,{children:["Cuando trabajamos con React, una de las decisiones importantes que debemos tomar es c\xf3mo manejar los estilos de nuestros componentes. Las dos opciones m\xe1s comunes son ",(0,i.jsx)(n.strong,{children:"CSS-in-JS"})," y ",(0,i.jsx)(n.strong,{children:"CSS tradicional"}),". Ambas tienen sus ventajas y desventajas, y entenderlas te ayudar\xe1 a elegir la mejor opci\xf3n para tu proyecto."]}),"\n",(0,i.jsx)(n.h2,{id:"qu\xe9-es-css-in-js",children:"\xbfQu\xe9 es CSS-in-JS?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"CSS-in-JS"})," es una t\xe9cnica que permite escribir estilos CSS directamente dentro de un archivo JavaScript. En lugar de tener un archivo ",(0,i.jsx)(n.code,{children:".css"})," separado, los estilos se definen en el mismo archivo donde resides tu componente de React. Esto facilita el encapsulamiento de estilos, ya que est\xe1n estrechamente ligados al componente que estilizan."]}),"\n",(0,i.jsxs)(n.h3,{id:"ejemplo-b\xe1sico-de-css-in-js-con-styled-components",children:["Ejemplo b\xe1sico de CSS-in-JS con ",(0,i.jsx)(n.code,{children:"styled-components"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import React from 'react';\nimport styled from 'styled-components';\n\n// Definimos un bot\xf3n usando styled-components\nconst Boton = styled.button`\n  background-color: #4CAF50; /* Verde */\n  border: none;\n  color: blanco;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  cursor: pointer;\n`;\n\nfunction App() {\n  return (\n    <div>\n      <Boton>\xa1Haz clic aqu\xed!</Boton>\n    </div>\n  );\n}\n\nexport default App;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["En este ejemplo, el componente ",(0,i.jsx)(n.code,{children:"Boton"})," es estilizado directamente dentro de un archivo JavaScript utilizando la biblioteca ",(0,i.jsx)(n.code,{children:"styled-components"}),". Esto hace que el c\xf3digo sea m\xe1s modular y f\xe1cil de mantener, ya que los estilos est\xe1n encapsulados dentro del mismo componente."]}),"\n",(0,i.jsx)(n.h2,{id:"qu\xe9-es-css-tradicional",children:"\xbfQu\xe9 es CSS tradicional?"}),"\n",(0,i.jsxs)(n.p,{children:["El ",(0,i.jsx)(n.strong,{children:"CSS tradicional"})," es la forma en la que normalmente hemos estilizado nuestras p\xe1ginas web. Consiste en escribir reglas CSS en archivos ",(0,i.jsx)(n.code,{children:".css"})," separados y luego vincular esos archivos a nuestros componentes o p\xe1ginas."]}),"\n",(0,i.jsx)(n.h3,{id:"ejemplo-b\xe1sico-de-css-tradicional",children:"Ejemplo b\xe1sico de CSS tradicional"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"/* archivo estilos.css */\n.boton {\n  background-color: #4CAF50; /* Verde */\n  border: none;\n  color: blanco;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  cursor: pointer;\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import React from 'react';\nimport './estilos.css'; // Importamos el archivo CSS\n\nfunction App() {\n  return (\n    <div>\n      <button className=\"boton\">\xa1Haz clic aqu\xed!</button>\n    </div>\n  );\n}\n\nexport default App;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["En este ejemplo, los estilos se definen en un archivo CSS separado (",(0,i.jsx)(n.code,{children:"estilos.css"}),") y se aplican a los elementos HTML utilizando clases CSS. Este m\xe9todo es muy conocido y utilizado, especialmente en proyectos donde los estilos deben ser reutilizables entre m\xfaltiples componentes."]}),"\n",(0,i.jsx)(n.h2,{id:"comparaci\xf3n-css-in-js-vs-css-tradicional",children:"Comparaci\xf3n: CSS-in-JS vs. CSS tradicional"}),"\n",(0,i.jsx)(n.h3,{id:"ventajas-de-css-in-js",children:"Ventajas de CSS-in-JS"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Encapsulamiento de estilos"}),": Los estilos est\xe1n directamente vinculados a los componentes, lo que evita conflictos de nombres y facilita el mantenimiento del c\xf3digo."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Condicionalidad y dinamismo"}),": CSS-in-JS permite aplicar estilos de manera condicional o din\xe1mica basado en las props o el estado del componente."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Eliminaci\xf3n autom\xe1tica de estilos no utilizados"}),": En muchas implementaciones de CSS-in-JS, los estilos que no se utilizan se eliminan autom\xe1ticamente, lo que mejora el rendimiento."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"desventajas-de-css-in-js",children:"Desventajas de CSS-in-JS"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Curva de aprendizaje"}),": Puede ser un desaf\xedo para quienes est\xe1n acostumbrados al CSS tradicional."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tama\xf1o del bundle"}),": Dependiendo de la implementaci\xf3n, el uso de CSS-in-JS puede aumentar el tama\xf1o de tu bundle de JavaScript, lo que podr\xeda afectar el rendimiento de la aplicaci\xf3n."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ventajas-de-css-tradicional",children:"Ventajas de CSS tradicional"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simplicidad y familiaridad"}),": Es una t\xe9cnica bien conocida por los desarrolladores y sigue siendo la opci\xf3n m\xe1s sencilla para peque\xf1os proyectos."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Facilidad para reutilizar estilos"}),": Es m\xe1s f\xe1cil compartir estilos entre diferentes partes de la aplicaci\xf3n."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Separaci\xf3n de responsabilidades"}),": Mantiene la separaci\xf3n entre estructura (HTML/JSX) y presentaci\xf3n (CSS), lo que algunos desarrolladores consideran una buena pr\xe1ctica."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"desventajas-de-css-tradicional",children:"Desventajas de CSS tradicional"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Conflictos de nombres"}),": En proyectos grandes, es f\xe1cil que se produzcan conflictos de nombres entre las clases CSS."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dificultad en el manejo de estilos condicionales"}),": Aplicar estilos de manera condicional puede requerir c\xf3digo adicional y ser menos directo que en CSS-in-JS."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Styled-components"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Modularidad en CSS"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Optimizaci\xf3n de rendimiento en React"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Webpack y el manejo de CSS"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,i.jsx)(n.p,{children:"CSS-in-JS y CSS tradicional son dos enfoques para manejar los estilos en una aplicaci\xf3n React, cada uno con sus propias ventajas y desventajas. CSS-in-JS ofrece un encapsulamiento y dinamismo de estilos, ideal para componentes altamente modulares, mientras que CSS tradicional es familiar y efectivo para proyectos donde los estilos son m\xe1s globales y compartidos. La elecci\xf3n entre uno y otro depende de las necesidades espec\xedficas de tu proyecto y de tus preferencias como desarrollador."})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var i=s(6540);const o={},a=i.createContext(o);function t(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);