"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[7662],{4955:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=a(4848),o=a(8453);const s={},i="Tratamiento del valor 0 (cero) en JSX",l={id:"Renderizado/6-2-Tratamiento del valor 0 (cero) en JSX",title:"Tratamiento del valor 0 (cero) en JSX",description:"En React, JSX es una extensi\xf3n de JavaScript que nos permite escribir elementos de la interfaz de usuario de una manera que se parece mucho al HTML. Sin embargo, hay ciertos matices que debemos tener en cuenta al manejar ciertos valores, y uno de ellos es el n\xfamero 0. Aunque 0 es un valor perfectamente v\xe1lido en JavaScript, su tratamiento en JSX puede tener algunas particularidades que es importante conocer para evitar errores o comportamientos inesperados.",source:"@site/docs/6-Renderizado/6-2-Tratamiento del valor 0 (cero) en JSX.md",sourceDirName:"6-Renderizado",slug:"/Renderizado/6-2-Tratamiento del valor 0 (cero) en JSX",permalink:"/Renderizado/6-2-Tratamiento del valor 0 (cero) en JSX",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Manejo de espacios en blanco en JSX",permalink:"/Renderizado/6-1-Manejo de espacios en blanco en JSX"},next:{title:"Uso de Key dentro de listas",permalink:"/Renderizado/6-3-Uso de Key dentro de listas"}},d={},c=[{value:"\xbfPor qu\xe9 el 0 puede ser problem\xe1tico en JSX?",id:"por-qu\xe9-el-0-puede-ser-problem\xe1tico-en-jsx",level:2},{value:"Ejemplo b\xe1sico",id:"ejemplo-b\xe1sico",level:2},{value:"Casos donde el 0 puede no aparecer",id:"casos-donde-el-0-puede-no-aparecer",level:2},{value:"Soluciones para renderizar 0 correctamente",id:"soluciones-para-renderizar-0-correctamente",level:2},{value:"1. Uso del operador ternario",id:"1-uso-del-operador-ternario",level:3},{value:"2. Uso de una doble negaci\xf3n (!!)",id:"2-uso-de-una-doble-negaci\xf3n-",level:3},{value:"Puntos clave a recordar",id:"puntos-clave-a-recordar",level:2},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function t(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"tratamiento-del-valor-0-cero-en-jsx",children:"Tratamiento del valor 0 (cero) en JSX"}),"\n",(0,r.jsxs)(n.p,{children:["En React, JSX es una extensi\xf3n de JavaScript que nos permite escribir elementos de la interfaz de usuario de una manera que se parece mucho al HTML. Sin embargo, hay ciertos matices que debemos tener en cuenta al manejar ciertos valores, y uno de ellos es el n\xfamero ",(0,r.jsx)(n.strong,{children:"0"}),". Aunque 0 es un valor perfectamente v\xe1lido en JavaScript, su tratamiento en JSX puede tener algunas particularidades que es importante conocer para evitar errores o comportamientos inesperados."]}),"\n",(0,r.jsx)(n.h2,{id:"por-qu\xe9-el-0-puede-ser-problem\xe1tico-en-jsx",children:"\xbfPor qu\xe9 el 0 puede ser problem\xe1tico en JSX?"}),"\n",(0,r.jsxs)(n.p,{children:["En JSX, cualquier expresi\xf3n dentro de llaves ",(0,r.jsx)(n.code,{children:"{}"})," se eval\xfaa en JavaScript, y dependiendo del resultado, se muestra o no en la interfaz. Por ejemplo, si una expresi\xf3n eval\xfaa a ",(0,r.jsx)(n.code,{children:"null"}),", ",(0,r.jsx)(n.code,{children:"undefined"}),", ",(0,r.jsx)(n.code,{children:"false"}),", o una cadena vac\xeda ",(0,r.jsx)(n.code,{children:"''"}),", JSX no renderiza nada en el DOM. Lo que puede resultar confuso es que ",(0,r.jsx)(n.strong,{children:'0 tambi\xe9n se considera un valor "falsy" en JavaScript'}),', pero a diferencia de otros valores "falsy", s\xed puede tener un significado importante en el contexto de la interfaz de usuario.']}),"\n",(0,r.jsx)(n.h2,{id:"ejemplo-b\xe1sico",children:"Ejemplo b\xe1sico"}),"\n",(0,r.jsx)(n.p,{children:"Supongamos que tenemos el siguiente c\xf3digo:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"function MostrarValor() {\n  const valor = 0;\n\n  return (\n    <div>\n      El valor es: {valor}\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:['A primera vista, podr\xedamos esperar que este componente muestre "El valor es: 0" en la p\xe1gina. Sin embargo, dado que ',(0,r.jsx)(n.strong,{children:'0 es un valor "falsy"'}),", algunos desarrolladores pueden temer que JSX lo trate como si fuera ",(0,r.jsx)(n.code,{children:"null"})," o ",(0,r.jsx)(n.code,{children:"undefined"}),", no mostrando nada en absoluto."]}),"\n",(0,r.jsxs)(n.p,{children:["Por suerte, en este caso espec\xedfico, JSX renderiza el 0 correctamente porque se trata de un n\xfamero. Si hubiera sido ",(0,r.jsx)(n.code,{children:"false"}),", ",(0,r.jsx)(n.code,{children:"null"}),", ",(0,r.jsx)(n.code,{children:"undefined"})," o una cadena vac\xeda, entonces no se hubiera mostrado nada."]}),"\n",(0,r.jsx)(n.h2,{id:"casos-donde-el-0-puede-no-aparecer",children:"Casos donde el 0 puede no aparecer"}),"\n",(0,r.jsx)(n.p,{children:'El problema real surge cuando tratamos de renderizar 0 junto con otras expresiones que podr\xedan ser "falsy". Mira este ejemplo:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"function MostrarMensaje({ mensaje }) {\n  return (\n    <div>\n      {mensaje || 'No hay mensaje disponible'}\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Si llamamos a este componente pasando 0 como valor para ",(0,r.jsx)(n.code,{children:"mensaje"}),', podr\xedamos esperar ver "0" en pantalla. Sin embargo, debido a que el operador l\xf3gico ',(0,r.jsx)(n.code,{children:"||"})," eval\xfaa a ",(0,r.jsx)(n.code,{children:"false"}),' cuando encuentra un valor "falsy" (como 0), lo que se renderizar\xe1 ser\xe1 ',(0,r.jsx)(n.code,{children:"'No hay mensaje disponible'"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\xa1Esto es algo a tener en cuenta!"})}),"\n",(0,r.jsx)(n.h2,{id:"soluciones-para-renderizar-0-correctamente",children:"Soluciones para renderizar 0 correctamente"}),"\n",(0,r.jsx)(n.h3,{id:"1-uso-del-operador-ternario",children:"1. Uso del operador ternario"}),"\n",(0,r.jsx)(n.p,{children:"Una manera de asegurarse de que 0 se renderiza correctamente es utilizar el operador ternario:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"function MostrarMensaje({ mensaje }) {\n  return (\n    <div>\n      {mensaje !== undefined && mensaje !== null ? mensaje : 'No hay mensaje disponible'}\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["En este caso, comprobamos expl\xedcitamente si ",(0,r.jsx)(n.code,{children:"mensaje"})," es ",(0,r.jsx)(n.code,{children:"undefined"})," o ",(0,r.jsx)(n.code,{children:"null"}),". Si no lo es, se mostrar\xe1 su valor, incluso si es 0."]}),"\n",(0,r.jsx)(n.h3,{id:"2-uso-de-una-doble-negaci\xf3n-",children:"2. Uso de una doble negaci\xf3n (!!)"}),"\n",(0,r.jsx)(n.p,{children:"Otra t\xe9cnica \xfatil es la doble negaci\xf3n, que convierte cualquier valor en su equivalente booleano y permite manejar el caso espec\xedfico de 0:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"function MostrarMensaje({ mensaje }) {\n  return (\n    <div>\n      {mensaje || mensaje === 0 ? mensaje : 'No hay mensaje disponible'}\n    </div>\n  );\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Aqu\xed, nos aseguramos de que el valor se renderice si es 0, incluso si se encuentra en una expresi\xf3n l\xf3gica."}),"\n",(0,r.jsx)(n.h2,{id:"puntos-clave-a-recordar",children:"Puntos clave a recordar"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:'0 es un valor "falsy" en JavaScript, pero se puede mostrar correctamente en JSX'})," si se maneja con cuidado."]}),"\n",(0,r.jsxs)(n.li,{children:["Al usar expresiones l\xf3gicas en JSX, ",(0,r.jsx)(n.strong,{children:"ten en cuenta c\xf3mo se evaluar\xe1 el valor 0"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Usa operadores ternarios o condiciones expl\xedcitas para asegurarte de que ",(0,r.jsx)(n.strong,{children:"0 no se trate de manera incorrecta"})," en tus componentes."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Evaluaci\xf3n de expresiones en JSX"}),"\n",(0,r.jsx)(n.li,{children:'Manejo de valores "falsy" en JavaScript'}),"\n",(0,r.jsx)(n.li,{children:"Operadores l\xf3gicos en React"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,r.jsxs)(n.p,{children:["El valor ",(0,r.jsx)(n.strong,{children:"0"}),' en JSX, aunque "falsy" en JavaScript, se muestra correctamente en la mayor\xeda de los casos, excepto cuando se combina con operadores l\xf3gicos que pueden confundir su tratamiento. Es esencial ser consciente de este comportamiento y manejarlo adecuadamente usando operadores ternarios o condiciones expl\xedcitas para evitar que el valor 0 desaparezca en la interfaz.']})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>l});var r=a(6540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);