"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[7484],{4915:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>t,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>l});var a=o(4848),s=o(8453);const c={},t="Manejo de eventos en componentes",i={id:"B\xe1sico/1-6-Manejo de eventos en componentes",title:"Manejo de eventos en componentes",description:"Cuando trabajamos con React, uno de los aspectos m\xe1s importantes es el manejo de eventos dentro de nuestros componentes. Los eventos en React funcionan de manera similar a los eventos en el DOM (Document Object Model) tradicional, pero con algunas diferencias clave que hacen que sean m\xe1s f\xe1ciles de manejar y comprender.",source:"@site/docs/1-B\xe1sico/1-6-Manejo de eventos en componentes.md",sourceDirName:"1-B\xe1sico",slug:"/B\xe1sico/1-6-Manejo de eventos en componentes",permalink:"/B\xe1sico/1-6-Manejo de eventos en componentes",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Gesti\xf3n de estado con State",permalink:"/B\xe1sico/1-5-Gesti\xf3n de estado con State"},next:{title:"Renderizado condicional y procesamiento de listas en JSX",permalink:"/B\xe1sico/1-7-Renderizado condicional y procesamiento de listas en JSX"}},r={},l=[{value:"\xbfQu\xe9 es un evento?",id:"qu\xe9-es-un-evento",level:2},{value:"Ejemplo b\xe1sico: Manejo de un clic de bot\xf3n",id:"ejemplo-b\xe1sico-manejo-de-un-clic-de-bot\xf3n",level:3},{value:"\xbfQu\xe9 sucede aqu\xed?",id:"qu\xe9-sucede-aqu\xed",level:3},{value:"Eventos comunes en React",id:"eventos-comunes-en-react",level:2},{value:"Cambios en campos de texto",id:"cambios-en-campos-de-texto",level:3},{value:"Detalles clave sobre el manejo de eventos en React",id:"detalles-clave-sobre-el-manejo-de-eventos-en-react",level:3},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"manejo-de-eventos-en-componentes",children:"Manejo de eventos en componentes"}),"\n",(0,a.jsx)(n.p,{children:"Cuando trabajamos con React, uno de los aspectos m\xe1s importantes es el manejo de eventos dentro de nuestros componentes. Los eventos en React funcionan de manera similar a los eventos en el DOM (Document Object Model) tradicional, pero con algunas diferencias clave que hacen que sean m\xe1s f\xe1ciles de manejar y comprender."}),"\n",(0,a.jsx)(n.h2,{id:"qu\xe9-es-un-evento",children:"\xbfQu\xe9 es un evento?"}),"\n",(0,a.jsx)(n.p,{children:"Un evento es cualquier interacci\xf3n que ocurre en la interfaz de usuario, como un clic de bot\xf3n, un cambio en un campo de texto, o el env\xedo de un formulario. En React, podemos manejar estos eventos de manera declarativa, lo que significa que simplemente le decimos a React qu\xe9 hacer cuando ocurre un evento, y React se encarga de todo lo dem\xe1s."}),"\n",(0,a.jsx)(n.h3,{id:"ejemplo-b\xe1sico-manejo-de-un-clic-de-bot\xf3n",children:"Ejemplo b\xe1sico: Manejo de un clic de bot\xf3n"}),"\n",(0,a.jsx)(n.p,{children:"Supongamos que queremos manejar un evento de clic en un bot\xf3n. Primero, necesitamos definir una funci\xf3n que se ejecutar\xe1 cuando el usuario haga clic en el bot\xf3n. Luego, conectamos esa funci\xf3n al bot\xf3n utilizando la sintaxis de React."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import React, { useState } from 'react';\n\nfunction ContadorDeClics() {\n  // Definimos un estado local para llevar la cuenta de los clics\n  const [contador, setContador] = useState(0);\n\n  // Funci\xf3n que se ejecuta cuando el bot\xf3n es clicado\n  const manejarClic = () => {\n    setContador(contador + 1); // Actualizamos el contador sumando 1\n  };\n\n  return (\n    <div>\n      {/* Mostramos el n\xfamero de clics */}\n      <p>Has hecho clic {contador} veces.</p>\n      {/* Bot\xf3n que maneja el evento de clic */}\n      <button onClick={manejarClic}>\n        \xa1Haz clic aqu\xed!\n      </button>\n    </div>\n  );\n}\n\nexport default ContadorDeClics;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"qu\xe9-sucede-aqu\xed",children:"\xbfQu\xe9 sucede aqu\xed?"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Definimos una funci\xf3n de evento:"})," En este caso, ",(0,a.jsx)(n.code,{children:"manejarClic"})," es una funci\xf3n que se encarga de incrementar el contador cada vez que se hace clic en el bot\xf3n."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Conectamos la funci\xf3n al evento:"})," Utilizamos el atributo ",(0,a.jsx)(n.code,{children:"onClick"})," para conectar nuestro bot\xf3n con la funci\xf3n ",(0,a.jsx)(n.code,{children:"manejarClic"}),". Este es un patr\xf3n com\xfan para todos los eventos en React (por ejemplo, ",(0,a.jsx)(n.code,{children:"onChange"})," para cambios en campos de texto, ",(0,a.jsx)(n.code,{children:"onSubmit"})," para el env\xedo de formularios, etc.)."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Manejamos el estado:"})," Usamos ",(0,a.jsx)(n.code,{children:"useState"})," para almacenar el n\xfamero de clics. Cada vez que el usuario hace clic, actualizamos el estado y React vuelve a renderizar el componente, mostrando el nuevo valor."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"eventos-comunes-en-react",children:"Eventos comunes en React"}),"\n",(0,a.jsx)(n.h3,{id:"cambios-en-campos-de-texto",children:"Cambios en campos de texto"}),"\n",(0,a.jsx)(n.p,{children:"Otro evento com\xfan es manejar cambios en campos de texto. Por ejemplo, podemos querer capturar lo que el usuario escribe en un cuadro de texto en tiempo real."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import React, { useState } from 'react';\n\nfunction CampoDeTexto() {\n  const [texto, setTexto] = useState('');\n\n  const manejarCambio = (evento) => {\n    setTexto(evento.target.value); // Actualizamos el estado con el valor del campo de texto\n  };\n\n  return (\n    <div>\n      <input \n        type=\"text\" \n        value={texto} \n        onChange={manejarCambio} \n        placeholder=\"Escribe algo...\" \n      />\n      <p>Texto introducido: {texto}</p>\n    </div>\n  );\n}\n\nexport default CampoDeTexto;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"detalles-clave-sobre-el-manejo-de-eventos-en-react",children:"Detalles clave sobre el manejo de eventos en React"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Sintaxis camelCase:"})," A diferencia de HTML donde los eventos se escriben en min\xfasculas (por ejemplo, ",(0,a.jsx)(n.code,{children:"onclick"}),"), en React los eventos utilizan camelCase (",(0,a.jsx)(n.code,{children:"onClick"}),")."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Funciones como manejadores de eventos:"})," Debes pasar una referencia a la funci\xf3n como manejador de eventos, no debes invocar la funci\xf3n directamente. Por ejemplo, ",(0,a.jsx)(n.code,{children:"onClick={manejarClic}"})," es correcto, mientras que ",(0,a.jsx)(n.code,{children:"onClick={manejarClic()}"})," no lo es, ya que esto ejecutar\xeda la funci\xf3n inmediatamente en lugar de pasarla como referencia."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Eventos sint\xe9ticos:"})," React utiliza un sistema de eventos sint\xe9ticos que se basa en el est\xe1ndar de eventos del DOM, pero los envuelve en un contenedor para asegurar la compatibilidad entre diferentes navegadores y mejorar el rendimiento."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Eventos sint\xe9ticos en React"}),"\n",(0,a.jsx)(n.li,{children:"Estado y manejo de eventos"}),"\n",(0,a.jsx)(n.li,{children:"Componentes funcionales y eventos"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,a.jsx)(n.p,{children:"El manejo de eventos en React permite interactuar con los usuarios de manera eficiente. Utilizando funciones de manejo de eventos y la sintaxis de React, podemos crear aplicaciones interactivas y din\xe1micas con facilidad. Es esencial comprender c\xf3mo conectar correctamente las funciones a los eventos y manejar el estado asociado para desarrollar aplicaciones React robustas y f\xe1ciles de mantener."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>i});var a=o(6540);const s={},c=a.createContext(s);function t(e){const n=a.useContext(c);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),a.createElement(c.Provider,{value:n},e.children)}}}]);