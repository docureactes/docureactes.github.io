"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[7300],{5885:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>d});var a=o(4848),s=o(8453);const c={},i="useCallback",r={id:"Hook/7-3-useCallback",title:"useCallback",description:"El hook useCallback es una herramienta poderosa en React que te permite memorizar funciones para evitar que se vuelvan a crear en cada renderizado. Esto es especialmente \xfatil cuando pasas funciones como props a componentes hijos que dependen de estas funciones, evitando as\xed renderizados innecesarios y mejorando el rendimiento de la aplicaci\xf3n.",source:"@site/docs/7-Hook/7-3-useCallback.md",sourceDirName:"7-Hook",slug:"/Hook/7-3-useCallback",permalink:"/Hook/7-3-useCallback",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useContext",permalink:"/Hook/7-2-useContext"},next:{title:"useMemo",permalink:"/Hook/7-4-useMemo"}},l={},d=[{value:"\xbfQu\xe9 es <code>useCallback</code>?",id:"qu\xe9-es-usecallback",level:2},{value:"Ejemplo b\xe1sico",id:"ejemplo-b\xe1sico",level:3},{value:"Explicaci\xf3n del c\xf3digo",id:"explicaci\xf3n-del-c\xf3digo",level:3},{value:"\xbfPor qu\xe9 usar <code>useCallback</code>?",id:"por-qu\xe9-usar-usecallback",level:3},{value:"Ejemplo con componentes hijos",id:"ejemplo-con-componentes-hijos",level:3},{value:"Cu\xe1ndo no usar <code>useCallback</code>",id:"cu\xe1ndo-no-usar-usecallback",level:2},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function t(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"usecallback",children:"useCallback"}),"\n",(0,a.jsxs)(n.p,{children:["El hook ",(0,a.jsx)(n.code,{children:"useCallback"})," es una herramienta poderosa en React que te permite memorizar funciones para evitar que se vuelvan a crear en cada renderizado. Esto es especialmente \xfatil cuando pasas funciones como props a componentes hijos que dependen de estas funciones, evitando as\xed renderizados innecesarios y mejorando el rendimiento de la aplicaci\xf3n."]}),"\n",(0,a.jsxs)(n.h2,{id:"qu\xe9-es-usecallback",children:["\xbfQu\xe9 es ",(0,a.jsx)(n.code,{children:"useCallback"}),"?"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"useCallback"})," es un hook que retorna una versi\xf3n memorizada de la funci\xf3n que le pasas. La funci\xf3n solo se vuelve a crear si alguna de las dependencias que le has indicado cambia. Si no cambian, React usar\xe1 la versi\xf3n memorizada de la funci\xf3n, lo que puede evitar costosos renderizados."]}),"\n",(0,a.jsx)(n.h3,{id:"ejemplo-b\xe1sico",children:"Ejemplo b\xe1sico"}),"\n",(0,a.jsxs)(n.p,{children:["Veamos un ejemplo simple para entender mejor c\xf3mo funciona ",(0,a.jsx)(n.code,{children:"useCallback"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import React, { useState, useCallback } from 'react';\n\nfunction Contador() {\n  const [contador, setContador] = useState(0);\n\n  // Memorizar la funci\xf3n para incrementar el contador\n  const incrementar = useCallback(() => {\n    setContador(contador + 1);\n  }, [contador]);\n\n  return (\n    <div>\n      <h1>Contador: {contador}</h1>\n      <button onClick={incrementar}>Incrementar</button>\n    </div>\n  );\n}\n\nexport default Contador;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"explicaci\xf3n-del-c\xf3digo",children:"Explicaci\xf3n del c\xf3digo"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Definici\xf3n del estado"}),": Tenemos un estado ",(0,a.jsx)(n.code,{children:"contador"})," que iniciamos en ",(0,a.jsx)(n.code,{children:"0"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsxs)(n.strong,{children:["Creaci\xf3n de la funci\xf3n ",(0,a.jsx)(n.code,{children:"incrementar"})]}),": Usamos ",(0,a.jsx)(n.code,{children:"useCallback"})," para memorizar la funci\xf3n ",(0,a.jsx)(n.code,{children:"incrementar"}),". Esta funci\xf3n incrementa el valor del contador en 1."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Dependencias"}),": El segundo par\xe1metro de ",(0,a.jsx)(n.code,{children:"useCallback"})," es un array de dependencias. En este caso, hemos pasado ",(0,a.jsx)(n.code,{children:"contador"}),", lo que significa que la funci\xf3n ",(0,a.jsx)(n.code,{children:"incrementar"})," solo se volver\xe1 a crear si ",(0,a.jsx)(n.code,{children:"contador"})," cambia."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Renderizaci\xf3n"}),": El bot\xf3n utiliza la funci\xf3n ",(0,a.jsx)(n.code,{children:"incrementar"})," como manejador de eventos para su propiedad ",(0,a.jsx)(n.code,{children:"onClick"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"por-qu\xe9-usar-usecallback",children:["\xbfPor qu\xe9 usar ",(0,a.jsx)(n.code,{children:"useCallback"}),"?"]}),"\n",(0,a.jsxs)(n.p,{children:["El principal beneficio de ",(0,a.jsx)(n.code,{children:"useCallback"})," es evitar la creaci\xf3n innecesaria de funciones en cada renderizado. Esto es crucial cuando trabajas con componentes hijos que reciben estas funciones como props, ya que ayuda a prevenir renderizados adicionales que podr\xedan afectar el rendimiento."]}),"\n",(0,a.jsx)(n.h3,{id:"ejemplo-con-componentes-hijos",children:"Ejemplo con componentes hijos"}),"\n",(0,a.jsxs)(n.p,{children:["Supongamos que tienes un componente que recibe la funci\xf3n ",(0,a.jsx)(n.code,{children:"incrementar"})," como prop:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\n\nfunction Boton({ onClick }) {\n  console.log('Bot\xf3n renderizado');\n  return <button onClick={onClick}>Incrementar</button>;\n}\n\nexport default Boton;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Si no usamos ",(0,a.jsx)(n.code,{children:"useCallback"}),", cada vez que el componente ",(0,a.jsx)(n.code,{children:"Contador"})," se renderiza, la funci\xf3n ",(0,a.jsx)(n.code,{children:"incrementar"})," se volver\xe1 a crear, lo que causar\xe1 que el componente ",(0,a.jsx)(n.code,{children:"Boton"})," se renderice tambi\xe9n, incluso si no ha cambiado nada m\xe1s."]}),"\n",(0,a.jsxs)(n.p,{children:["Al utilizar ",(0,a.jsx)(n.code,{children:"useCallback"}),", podemos evitar esto:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import React, { useState, useCallback } from 'react';\nimport Boton from './Boton';\n\nfunction Contador() {\n  const [contador, setContador] = useState(0);\n\n  const incrementar = useCallback(() => {\n    setContador(contador + 1);\n  }, [contador]);\n\n  return (\n    <div>\n      <h1>Contador: {contador}</h1>\n      <Boton onClick={incrementar} />\n    </div>\n  );\n}\n\nexport default Contador;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["En este caso, ",(0,a.jsx)(n.code,{children:"Boton"})," solo se renderizar\xe1 de nuevo si cambia alguna de sus props, gracias a que ",(0,a.jsx)(n.code,{children:"incrementar"})," se memoriza con ",(0,a.jsx)(n.code,{children:"useCallback"}),"."]}),"\n",(0,a.jsxs)(n.h2,{id:"cu\xe1ndo-no-usar-usecallback",children:["Cu\xe1ndo no usar ",(0,a.jsx)(n.code,{children:"useCallback"})]}),"\n",(0,a.jsxs)(n.p,{children:["Aunque ",(0,a.jsx)(n.code,{children:"useCallback"})," puede ser muy \xfatil, no siempre es necesario usarlo. Si tu aplicaci\xf3n no tiene problemas de rendimiento o si la funci\xf3n que est\xe1s creando no se pasa como prop a un componente hijo, podr\xedas no necesitar ",(0,a.jsx)(n.code,{children:"useCallback"}),". Usarlo indiscriminadamente puede agregar complejidad innecesaria al c\xf3digo sin un beneficio real."]}),"\n",(0,a.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"useMemo"}),": Otro hook de React que memoriza valores, no funciones."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Renderizado condicional"}),": T\xe9cnica que se puede optimizar junto con ",(0,a.jsx)(n.code,{children:"useCallback"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Optimizaciones de rendimiento"}),": Casos donde ",(0,a.jsx)(n.code,{children:"useCallback"})," puede hacer una diferencia significativa."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,a.jsxs)(n.p,{children:["El hook ",(0,a.jsx)(n.code,{children:"useCallback"})," se utiliza para memorizar funciones y evitar que se vuelvan a crear en cada renderizado, mejorando as\xed el rendimiento de los componentes. Es particularmente \xfatil cuando estas funciones se pasan como props a componentes hijos. Sin embargo, su uso debe ser considerado y justificado, ya que no siempre es necesario y puede a\xf1adir complejidad innecesaria."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(t,{...e})}):t(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>r});var a=o(6540);const s={},c=a.createContext(s);function i(e){const n=a.useContext(c);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(c.Provider,{value:n},e.children)}}}]);