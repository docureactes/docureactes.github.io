"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[4100],{1565:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var s=o(4848),r=o(8453);const a={},i="defaultProps",d={id:"Props/3-9-defaultProps",title:"defaultProps",description:"En React, los defaultProps son una herramienta poderosa que te permite definir valores predeterminados para las Props de un componente. Esto es especialmente \xfatil cuando deseas asegurarte de que un componente siempre tenga un valor para una prop, incluso si no se le pasa un valor expl\xedcito. Vamos a explorar c\xf3mo funcionan los defaultProps, c\xf3mo se usan y por qu\xe9 son importantes.",source:"@site/docs/3-Props/3-9-defaultProps.md",sourceDirName:"3-Props",slug:"/Props/3-9-defaultProps",permalink:"/Props/3-9-defaultProps",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Puntos a tener en cuenta al trabajar con atributos HTML",permalink:"/Props/3-8-Puntos a tener en cuenta al trabajar con atributos HTML"},next:{title:"Introducci\xf3n a useEffect y control del ciclo de vida",permalink:"/Ciclo de vida/4-1-Introducci\xf3n a useEffect y control del ciclo de vida"}},l={},c=[{value:"\xbfQu\xe9 son los <code>defaultProps</code>?",id:"qu\xe9-son-los-defaultprops",level:2},{value:"Ejemplo b\xe1sico",id:"ejemplo-b\xe1sico",level:3},{value:"\xbfPor qu\xe9 usar <code>defaultProps</code>?",id:"por-qu\xe9-usar-defaultprops",level:3},{value:"Sintaxis y uso de <code>defaultProps</code>",id:"sintaxis-y-uso-de-defaultprops",level:3},{value:"Consideraciones al usar <code>defaultProps</code>",id:"consideraciones-al-usar-defaultprops",level:2},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function t(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"defaultprops",children:"defaultProps"}),"\n",(0,s.jsxs)(n.p,{children:["En React, los ",(0,s.jsx)(n.code,{children:"defaultProps"})," son una herramienta poderosa que te permite definir valores predeterminados para las ",(0,s.jsx)(n.code,{children:"Props"})," de un componente. Esto es especialmente \xfatil cuando deseas asegurarte de que un componente siempre tenga un valor para una prop, incluso si no se le pasa un valor expl\xedcito. Vamos a explorar c\xf3mo funcionan los ",(0,s.jsx)(n.code,{children:"defaultProps"}),", c\xf3mo se usan y por qu\xe9 son importantes."]}),"\n",(0,s.jsxs)(n.h2,{id:"qu\xe9-son-los-defaultprops",children:["\xbfQu\xe9 son los ",(0,s.jsx)(n.code,{children:"defaultProps"}),"?"]}),"\n",(0,s.jsxs)(n.p,{children:["Los ",(0,s.jsx)(n.code,{children:"defaultProps"})," son una forma de definir valores predeterminados para las propiedades de un componente en React. Esto significa que si no se proporciona un valor para una prop espec\xedfica cuando se utiliza el componente, React usar\xe1 el valor predeterminado que has especificado en ",(0,s.jsx)(n.code,{children:"defaultProps"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-b\xe1sico",children:"Ejemplo b\xe1sico"}),"\n",(0,s.jsxs)(n.p,{children:["Supongamos que tienes un componente simple que muestra un mensaje de saludo. Este componente recibe una prop llamada ",(0,s.jsx)(n.code,{children:"nombre"}),". Si no se proporciona un ",(0,s.jsx)(n.code,{children:"nombre"}),", queremos que el componente muestre un saludo gen\xe9rico."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\n\n// Definimos el componente Saludo\nconst Saludo = ({ nombre }) => {\n  return <h1>Hola, {nombre}!</h1>;\n};\n\n// Establecemos el valor predeterminado para la prop 'nombre'\nSaludo.defaultProps = {\n  nombre: 'Amigo',\n};\n\nexport default Saludo;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["En este ejemplo, si usas el componente ",(0,s.jsx)(n.code,{children:"Saludo"})," sin pasar un ",(0,s.jsx)(n.code,{children:"nombre"}),', se mostrar\xe1 "Hola, Amigo!". Sin embargo, si proporcionas un ',(0,s.jsx)(n.code,{children:"nombre"}),", como en ",(0,s.jsx)(n.code,{children:'<Saludo nombre="Carlos" />'}),', se mostrar\xe1 "Hola, Carlos!".']}),"\n",(0,s.jsxs)(n.h3,{id:"por-qu\xe9-usar-defaultprops",children:["\xbfPor qu\xe9 usar ",(0,s.jsx)(n.code,{children:"defaultProps"}),"?"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Garant\xeda de valores:"})," ",(0,s.jsx)(n.code,{children:"defaultProps"})," te ayuda a evitar errores o comportamientos inesperados al asegurarte de que las ",(0,s.jsx)(n.code,{children:"Props"})," siempre tengan un valor, incluso si el usuario del componente olvida proporcionar uno."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Simplificaci\xf3n de c\xf3digo:"})," Al usar ",(0,s.jsx)(n.code,{children:"defaultProps"}),", no necesitas escribir c\xf3digo adicional para verificar si una prop est\xe1 definida o no antes de usarla. React lo maneja por ti."]}),"\n",(0,s.jsxs)(n.h3,{id:"sintaxis-y-uso-de-defaultprops",children:["Sintaxis y uso de ",(0,s.jsx)(n.code,{children:"defaultProps"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"defaultProps"})," se define como una propiedad est\xe1tica del componente. Aunque tambi\xe9n se puede definir dentro del cuerpo de la funci\xf3n para los componentes funcionales modernos."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Para componentes de clase:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import React, { Component } from 'react';\n\nclass Saludo extends Component {\n  render() {\n    return <h1>Hola, {this.props.nombre}!</h1>;\n  }\n}\n\n// Estableciendo defaultProps para un componente de clase\nSaludo.defaultProps = {\n  nombre: 'Amigo',\n};\n\nexport default Saludo;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Para componentes funcionales:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\n\nfunction Saludo({ nombre }) {\n  return <h1>Hola, {nombre}!</h1>;\n}\n\n// Estableciendo defaultProps para un componente funcional\nSaludo.defaultProps = {\n  nombre: 'Amigo',\n};\n\nexport default Saludo;\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"consideraciones-al-usar-defaultprops",children:["Consideraciones al usar ",(0,s.jsx)(n.code,{children:"defaultProps"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Compatibilidad con PropTypes:"})," Los ",(0,s.jsx)(n.code,{children:"defaultProps"})," son particularmente \xfatiles cuando se utilizan junto con ",(0,s.jsx)(n.code,{children:"PropTypes"})," para definir el tipo de datos esperado para cada prop. Esto asegura que incluso si una prop no se proporciona, siempre haya un valor de un tipo adecuado."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Posibles deprecaciones:"})," En versiones recientes de React, con el uso extensivo de ",(0,s.jsx)(n.strong,{children:"Hooks"})," y ",(0,s.jsx)(n.strong,{children:"ES6"}),", se ha popularizado definir valores predeterminados directamente en la lista de argumentos de las funciones. Sin embargo, ",(0,s.jsx)(n.code,{children:"defaultProps"})," sigue siendo ampliamente utilizado y soportado."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Evitar dependencias innecesarias:"})," Usar ",(0,s.jsx)(n.code,{children:"defaultProps"})," puede simplificar la l\xf3gica interna del componente, evitando que tengas que escribir c\xf3digo adicional para manejar la ausencia de ciertas ",(0,s.jsx)(n.code,{children:"Props"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Props en React"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"PropTypes"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Componentes funcionales vs. componentes de clase"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Hooks en React"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Manejo de errores en componentes"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"defaultProps"})," en React es una herramienta esencial que te permite definir valores predeterminados para las ",(0,s.jsx)(n.code,{children:"Props"})," de un componente. Esto garantiza que los componentes siempre tengan un valor usable, mejorando la robustez y simplicidad del c\xf3digo. Es compatible tanto con componentes funcionales como de clase, y sigue siendo relevante en el desarrollo moderno de React, especialmente cuando se combina con PropTypes para una validaci\xf3n m\xe1s fuerte de las Props."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>d});var s=o(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);