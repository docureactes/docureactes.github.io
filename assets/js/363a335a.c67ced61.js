"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[4228],{1598:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>t,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=a(4848),s=a(8453);const r={},t="Introducci\xf3n a State y buenos nombres para State",l={id:"State/2-1-Introducci\xf3n a State y buenos nombres para State",title:"Introducci\xf3n a State y buenos nombres para State",description:"\xbfQu\xe9 es el State en React?",source:"@site/docs/2-State/2-1-Introducci\xf3n a State y buenos nombres para State.md",sourceDirName:"2-State",slug:"/State/2-1-Introducci\xf3n a State y buenos nombres para State",permalink:"/State/2-1-Introducci\xf3n a State y buenos nombres para State",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Renderizado condicional y procesamiento de listas en JSX",permalink:"/B\xe1sico/1-7-Renderizado condicional y procesamiento de listas en JSX"},next:{title:"Gesti\xf3n de entradas del usuario con State",permalink:"/State/2-2-Gesti\xf3n de entradas del usuario con State"}},i={},c=[{value:"\xbfQu\xe9 es el State en React?",id:"qu\xe9-es-el-state-en-react",level:2},{value:"Ejemplo b\xe1sico de uso de State",id:"ejemplo-b\xe1sico-de-uso-de-state",level:3},{value:"Desglosando el ejemplo",id:"desglosando-el-ejemplo",level:3},{value:"Buenos nombres para State",id:"buenos-nombres-para-state",level:2},{value:"Ejemplos de buenos nombres para State",id:"ejemplos-de-buenos-nombres-para-state",level:3},{value:"Ejemplo pr\xe1ctico con m\xfaltiples estados",id:"ejemplo-pr\xe1ctico-con-m\xfaltiples-estados",level:3},{value:"Explicaci\xf3n del ejemplo",id:"explicaci\xf3n-del-ejemplo",level:3},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"introducci\xf3n-a-state-y-buenos-nombres-para-state",children:"Introducci\xf3n a State y buenos nombres para State"}),"\n",(0,o.jsx)(n.h2,{id:"qu\xe9-es-el-state-en-react",children:"\xbfQu\xe9 es el State en React?"}),"\n",(0,o.jsxs)(n.p,{children:["En React, el ",(0,o.jsx)(n.strong,{children:"State"})," (o estado) es un objeto que permite a los componentes mantener y gestionar informaci\xf3n que puede cambiar a lo largo del tiempo. A diferencia de las ",(0,o.jsx)(n.strong,{children:"Props"}),", que son inmutables, el ",(0,o.jsx)(n.strong,{children:"State"})," es mutable, lo que significa que puede cambiar durante la vida \xfatil del componente."]}),"\n",(0,o.jsxs)(n.p,{children:["El ",(0,o.jsx)(n.strong,{children:"State"})," es especialmente \xfatil cuando se necesita reflejar cambios en la interfaz de usuario en respuesta a eventos como la interacci\xf3n del usuario, las solicitudes de red o cualquier otra acci\xf3n que modifique los datos."]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-b\xe1sico-de-uso-de-state",children:"Ejemplo b\xe1sico de uso de State"}),"\n",(0,o.jsxs)(n.p,{children:["Imagina que quieres crear un contador simple. El contador debe incrementar su valor cada vez que el usuario haga clic en un bot\xf3n. Aqu\xed es donde entra en juego el ",(0,o.jsx)(n.strong,{children:"State"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'import React, { useState } from \'react\';\n\nfunction Contador() {\n  // Declaramos una variable de estado llamada "contador"\n  // y una funci\xf3n para actualizarla, llamada "setContador".\n  const [contador, setContador] = useState(0);\n\n  // Funci\xf3n que se llama al hacer clic en el bot\xf3n\n  const incrementar = () => {\n    setContador(contador + 1); // Actualizamos el estado con el nuevo valor\n  };\n\n  return (\n    <div>\n      {/* Mostramos el valor actual del contador */}\n      <p>Has hecho clic {contador} veces</p>\n      {/* Bot\xf3n que llama a la funci\xf3n "incrementar" cuando se hace clic */}\n      <button onClick={incrementar}>Haz clic aqu\xed</button>\n    </div>\n  );\n}\n\nexport default Contador;\n'})}),"\n",(0,o.jsx)(n.h3,{id:"desglosando-el-ejemplo",children:"Desglosando el ejemplo"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Declaraci\xf3n del State"}),": Utilizamos el hook ",(0,o.jsx)(n.code,{children:"useState"})," para declarar una variable de estado llamada ",(0,o.jsx)(n.code,{children:"contador"}),". Le damos un valor inicial de ",(0,o.jsx)(n.code,{children:"0"}),". ",(0,o.jsx)(n.code,{children:"useState"})," nos devuelve un array con dos elementos: el valor actual del estado (",(0,o.jsx)(n.code,{children:"contador"}),") y una funci\xf3n para actualizar ese valor (",(0,o.jsx)(n.code,{children:"setContador"}),")."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Actualizaci\xf3n del State"}),": La funci\xf3n ",(0,o.jsx)(n.code,{children:"incrementar"})," llama a ",(0,o.jsx)(n.code,{children:"setContador"})," con el nuevo valor del contador, que es ",(0,o.jsx)(n.code,{children:"contador + 1"}),". Cada vez que ",(0,o.jsx)(n.code,{children:"setContador"})," es llamado, React actualiza el valor del estado y vuelve a renderizar el componente para reflejar los cambios."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Renderizado del componente"}),": El valor actual del contador se muestra en un p\xe1rrafo, y un bot\xf3n permite al usuario incrementar el contador haciendo clic en \xe9l."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"buenos-nombres-para-state",children:"Buenos nombres para State"}),"\n",(0,o.jsxs)(n.p,{children:["Elegir buenos nombres para tus variables de ",(0,o.jsx)(n.strong,{children:"State"})," es crucial para mantener tu c\xf3digo claro y f\xe1cil de entender. Un buen nombre debe ser:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Descriptivo"}),": El nombre debe reflejar claramente el prop\xf3sito del estado. Por ejemplo, si el estado controla un contador, ",(0,o.jsx)(n.code,{children:"contador"})," es un buen nombre."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Conciso"}),": Aunque debe ser descriptivo, tambi\xe9n debe ser breve. Evita nombres excesivamente largos o complejos."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Coherente"}),": Usa nombres coherentes a lo largo de tu aplicaci\xf3n. Si decides usar un estilo de nomenclatura, como ",(0,o.jsx)(n.code,{children:"camelCase"}),", aseg\xfarate de aplicarlo de manera consistente."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplos-de-buenos-nombres-para-state",children:"Ejemplos de buenos nombres para State"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"usuario"})}),": Para almacenar la informaci\xf3n del usuario actualmente autenticado."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"isCargando"})}),": Para indicar si una operaci\xf3n est\xe1 en curso."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"mensajeError"})}),": Para almacenar un mensaje de error que se mostrar\xe1 al usuario."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"listaTareas"})}),": Para manejar una lista de tareas en una aplicaci\xf3n de tareas."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-pr\xe1ctico-con-m\xfaltiples-estados",children:"Ejemplo pr\xe1ctico con m\xfaltiples estados"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import React, { useState } from 'react';\n\nfunction FormularioDeRegistro() {\n  const [nombre, setNombre] = useState('');\n  const [email, setEmail] = useState('');\n  const [isEnviado, setIsEnviado] = useState(false);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Aqu\xed podr\xedas manejar el env\xedo del formulario\n    setIsEnviado(true); // Actualizamos el estado para indicar que el formulario ha sido enviado\n  };\n\n  return (\n    <div>\n      <h1>Formulario de Registro</h1>\n      {isEnviado ? (\n        <p>Gracias por registrarte, {nombre}!</p>\n      ) : (\n        <form onSubmit={handleSubmit}>\n          <label>\n            Nombre:\n            <input\n              type=\"text\"\n              value={nombre}\n              onChange={(e) => setNombre(e.target.value)}\n            />\n          </label>\n          <br />\n          <label>\n            Email:\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </label>\n          <br />\n          <button type=\"submit\">Registrar</button>\n        </form>\n      )}\n    </div>\n  );\n}\n\nexport default FormularioDeRegistro;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"explicaci\xf3n-del-ejemplo",children:"Explicaci\xf3n del ejemplo"}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"nombre"})," y ",(0,o.jsx)(n.code,{children:"email"})," son variables de estado que almacenan los valores del formulario."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"isEnviado"})," es una variable de estado que indica si el formulario ha sido enviado."]}),"\n",(0,o.jsxs)(n.li,{children:["Dependiendo del valor de ",(0,o.jsx)(n.code,{children:"isEnviado"}),", se muestra un mensaje de agradecimiento o el formulario."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"useState"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Props vs State"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Manejo de formularios en React"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Renderizado condicional en React"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,o.jsxs)(n.p,{children:["El ",(0,o.jsx)(n.strong,{children:"State"})," en React es una herramienta fundamental para manejar y reflejar cambios din\xe1micos en la interfaz de usuario. Al elegir nombres para las variables de estado, es importante que sean descriptivos, concisos y coherentes. Utilizar el ",(0,o.jsx)(n.strong,{children:"State"})," de manera efectiva es clave para crear aplicaciones React interactivas y f\xe1ciles de mantener."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>l});var o=a(6540);const s={},r=o.createContext(s);function t(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);