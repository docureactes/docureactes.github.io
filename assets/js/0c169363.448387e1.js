"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[9736],{878:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var n=r(4848),o=r(8453);const i={},a="Razones para dividir Props complejos y ventajas de Props simples",d={id:"Props/3-7-Razones para dividir Props complejos y ventajas de Props simples",title:"Razones para dividir Props complejos y ventajas de Props simples",description:"\xbfPor qu\xe9 dividir Props complejos?",source:"@site/docs/3-Props/3-7-Razones para dividir Props complejos y ventajas de Props simples.md",sourceDirName:"3-Props",slug:"/Props/3-7-Razones para dividir Props complejos y ventajas de Props simples",permalink:"/Props/3-7-Razones para dividir Props complejos y ventajas de Props simples",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Uso de Props abreviados",permalink:"/Props/3-6-Uso de Props abreviados"},next:{title:"Puntos a tener en cuenta al trabajar con atributos HTML",permalink:"/Props/3-8-Puntos a tener en cuenta al trabajar con atributos HTML"}},l={},c=[{value:"\xbfPor qu\xe9 dividir Props complejos?",id:"por-qu\xe9-dividir-props-complejos",level:2},{value:"<strong>1. Facilita la comprensi\xf3n del c\xf3digo</strong>",id:"1-facilita-la-comprensi\xf3n-del-c\xf3digo",level:3},{value:"<strong>2. Mejora la reusabilidad de componentes</strong>",id:"2-mejora-la-reusabilidad-de-componentes",level:3},{value:"<strong>3. Facilita las pruebas unitarias</strong>",id:"3-facilita-las-pruebas-unitarias",level:3},{value:"<strong>4. Evita la sobrecarga de propiedades</strong>",id:"4-evita-la-sobrecarga-de-propiedades",level:3},{value:"<strong>Ventajas de usar Props simples</strong>",id:"ventajas-de-usar-props-simples",level:2},{value:"<strong>1. Claridad y simplicidad</strong>",id:"1-claridad-y-simplicidad",level:3},{value:"<strong>2. Mejor rendimiento</strong>",id:"2-mejor-rendimiento",level:3},{value:"<strong>3. Reducci\xf3n de errores</strong>",id:"3-reducci\xf3n-de-errores",level:3},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function t(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h1,{id:"razones-para-dividir-props-complejos-y-ventajas-de-props-simples",children:"Razones para dividir Props complejos y ventajas de Props simples"}),"\n",(0,n.jsx)(s.h2,{id:"por-qu\xe9-dividir-props-complejos",children:"\xbfPor qu\xe9 dividir Props complejos?"}),"\n",(0,n.jsxs)(s.p,{children:["En React, los componentes reciben datos a trav\xe9s de ",(0,n.jsx)(s.code,{children:"Props"}),". A veces, estos datos pueden volverse bastante complejos, conteniendo m\xfaltiples valores anidados en objetos o estructuras que son dif\xedciles de manejar. Dividir estos ",(0,n.jsx)(s.code,{children:"Props"})," complejos en otros m\xe1s simples puede traer varias ventajas, tanto para el desarrollo como para el mantenimiento del c\xf3digo."]}),"\n",(0,n.jsx)(s.h3,{id:"1-facilita-la-comprensi\xf3n-del-c\xf3digo",children:(0,n.jsx)(s.strong,{children:"1. Facilita la comprensi\xf3n del c\xf3digo"})}),"\n",(0,n.jsx)(s.p,{children:"Imagina que tienes un componente que recibe un objeto con varias propiedades anidadas:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-jsx",children:"function PerfilUsuario({ usuario }) {\n  return (\n    <div>\n      <h1>{usuario.nombre}</h1> {/* Nombre del usuario */}\n      <p>{usuario.direccion.calle}</p> {/* Calle de la direcci\xf3n del usuario */}\n      <p>{usuario.direccion.ciudad}</p> {/* Ciudad de la direcci\xf3n del usuario */}\n    </div>\n  );\n}\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Aunque este c\xf3digo funciona, puede ser dif\xedcil de seguir, especialmente si el objeto ",(0,n.jsx)(s.code,{children:"usuario"})," tiene muchas propiedades anidadas. Dividir estas propiedades en ",(0,n.jsx)(s.code,{children:"Props"})," m\xe1s simples puede hacer que el componente sea m\xe1s f\xe1cil de leer y mantener:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-jsx",children:"function PerfilUsuario({ nombre, calle, ciudad }) {\n  return (\n    <div>\n      <h1>{nombre}</h1> {/* Nombre del usuario */}\n      <p>{calle}</p> {/* Calle de la direcci\xf3n del usuario */}\n      <p>{ciudad}</p> {/* Ciudad de la direcci\xf3n del usuario */}\n    </div>\n  );\n}\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Ahora, el componente es m\xe1s claro. No tienes que preocuparte por la estructura del objeto ",(0,n.jsx)(s.code,{children:"usuario"}),", solo necesitas pasar las ",(0,n.jsx)(s.code,{children:"Props"})," que el componente requiere directamente."]}),"\n",(0,n.jsx)(s.h3,{id:"2-mejora-la-reusabilidad-de-componentes",children:(0,n.jsx)(s.strong,{children:"2. Mejora la reusabilidad de componentes"})}),"\n",(0,n.jsxs)(s.p,{children:["Cuando un componente espera recibir ",(0,n.jsx)(s.code,{children:"Props"})," simples, se vuelve m\xe1s f\xe1cil reutilizarlo en diferentes partes de tu aplicaci\xf3n. Por ejemplo, si otro componente necesita mostrar solo el nombre y la ciudad del usuario, puedes reutilizar el componente ",(0,n.jsx)(s.code,{children:"PerfilUsuario"})," f\xe1cilmente:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-jsx",children:'<PerfilUsuario nombre="Juan P\xe9rez" calle="-" ciudad="Madrid" />\n'})}),"\n",(0,n.jsxs)(s.p,{children:["No tienes que construir un objeto ",(0,n.jsx)(s.code,{children:"usuario"})," completo, lo que simplifica el uso del componente."]}),"\n",(0,n.jsx)(s.h3,{id:"3-facilita-las-pruebas-unitarias",children:(0,n.jsx)(s.strong,{children:"3. Facilita las pruebas unitarias"})}),"\n",(0,n.jsxs)(s.p,{children:["Al dividir ",(0,n.jsx)(s.code,{children:"Props"})," complejos en partes m\xe1s simples, cada parte del componente puede ser probada m\xe1s f\xe1cilmente. Es m\xe1s sencillo probar c\xf3mo el componente maneja una propiedad ",(0,n.jsx)(s.code,{children:"nombre"})," en lugar de tener que configurar un objeto ",(0,n.jsx)(s.code,{children:"usuario"})," completo para cada prueba:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-jsx",children:'test(\'Muestra correctamente el nombre del usuario\', () => {\n  const { getByText } = render(<PerfilUsuario nombre="Juan P\xe9rez" calle="-" ciudad="-" />);\n  expect(getByText(\'Juan P\xe9rez\')).toBeInTheDocument();\n});\n'})}),"\n",(0,n.jsx)(s.h3,{id:"4-evita-la-sobrecarga-de-propiedades",children:(0,n.jsx)(s.strong,{children:"4. Evita la sobrecarga de propiedades"})}),"\n",(0,n.jsxs)(s.p,{children:["A veces, los ",(0,n.jsx)(s.code,{children:"Props"})," complejos pueden contener mucha informaci\xf3n innecesaria que no es relevante para el componente actual. Al dividirlos, puedes pasar solo los datos que el componente necesita, lo que reduce la cantidad de informaci\xf3n que el componente tiene que procesar y gestionar."]}),"\n",(0,n.jsx)(s.h2,{id:"ventajas-de-usar-props-simples",children:(0,n.jsx)(s.strong,{children:"Ventajas de usar Props simples"})}),"\n",(0,n.jsx)(s.h3,{id:"1-claridad-y-simplicidad",children:(0,n.jsx)(s.strong,{children:"1. Claridad y simplicidad"})}),"\n",(0,n.jsxs)(s.p,{children:["Los ",(0,n.jsx)(s.code,{children:"Props"})," simples son m\xe1s f\xe1ciles de entender y trabajar con ellos. No es necesario desestructurar objetos complejos ni preocuparse por la jerarqu\xeda de datos. Esto lleva a un c\xf3digo m\xe1s limpio y legible, facilitando su mantenimiento a largo plazo."]}),"\n",(0,n.jsx)(s.h3,{id:"2-mejor-rendimiento",children:(0,n.jsx)(s.strong,{children:"2. Mejor rendimiento"})}),"\n",(0,n.jsxs)(s.p,{children:["Al pasar solo los ",(0,n.jsx)(s.code,{children:"Props"})," necesarios, puedes optimizar el rendimiento del componente, ya que no se est\xe1n manipulando ni renderizando datos innecesarios."]}),"\n",(0,n.jsx)(s.h3,{id:"3-reducci\xf3n-de-errores",children:(0,n.jsx)(s.strong,{children:"3. Reducci\xf3n de errores"})}),"\n",(0,n.jsxs)(s.p,{children:["Los ",(0,n.jsx)(s.code,{children:"Props"})," simples reducen la posibilidad de cometer errores relacionados con la estructura de los datos. Al no depender de objetos complejos, disminuye la probabilidad de acceder incorrectamente a una propiedad o de tener ",(0,n.jsx)(s.code,{children:"Props"})," indefinidos."]}),"\n",(0,n.jsx)(s.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.strong,{children:"Props en React"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.strong,{children:"Desestructuraci\xf3n de objetos en JavaScript"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.strong,{children:"Buenas pr\xe1cticas en React"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.strong,{children:"Pruebas unitarias con Jest y React Testing Library"})}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"resumen",children:"Resumen"}),"\n",(0,n.jsxs)(s.p,{children:["Dividir ",(0,n.jsx)(s.code,{children:"Props"})," complejos en partes m\xe1s simples trae beneficios significativos, como una mejor legibilidad, mayor facilidad para reutilizar componentes, facilidad en la realizaci\xf3n de pruebas unitarias y un mejor rendimiento. Trabajar con ",(0,n.jsx)(s.code,{children:"Props"})," simples hace que el desarrollo en React sea m\xe1s eficiente y menos propenso a errores."]})]})}function p(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(t,{...e})}):t(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>a,x:()=>d});var n=r(6540);const o={},i=n.createContext(o);function a(e){const s=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(i.Provider,{value:s},e.children)}}}]);