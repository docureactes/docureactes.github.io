"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[4828],{504:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>t});var o=a(4848),i=a(8453);const s={},r="Renderizado condicional y procesamiento de listas en JSX",c={id:"B\xe1sico/1-7-Renderizado condicional y procesamiento de listas en JSX",title:"Renderizado condicional y procesamiento de listas en JSX",description:"En React, uno de los aspectos m\xe1s potentes es la capacidad de mostrar contenido din\xe1mico basado en condiciones espec\xedficas y de procesar listas de elementos de manera eficiente. Estas habilidades son esenciales para construir interfaces interactivas y flexibles. A continuaci\xf3n, exploraremos c\xf3mo implementar renderizado condicional y c\xf3mo trabajar con listas en JSX, la sintaxis que utiliza React para definir la interfaz de usuario.",source:"@site/docs/1-B\xe1sico/1-7-Renderizado condicional y procesamiento de listas en JSX.md",sourceDirName:"1-B\xe1sico",slug:"/B\xe1sico/1-7-Renderizado condicional y procesamiento de listas en JSX",permalink:"/B\xe1sico/1-7-Renderizado condicional y procesamiento de listas en JSX",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Manejo de eventos en componentes",permalink:"/B\xe1sico/1-6-Manejo de eventos en componentes"},next:{title:"Introducci\xf3n a State y buenos nombres para State",permalink:"/State/2-1-Introducci\xf3n a State y buenos nombres para State"}},d={},t=[{value:"Renderizado condicional en JSX",id:"renderizado-condicional-en-jsx",level:2},{value:"Ejemplo con operador ternario",id:"ejemplo-con-operador-ternario",level:3},{value:"Ejemplo con operador <code>&amp;&amp;</code>",id:"ejemplo-con-operador-",level:3},{value:"Puntos a tener en cuenta:",id:"puntos-a-tener-en-cuenta",level:3},{value:"Procesamiento de listas en JSX",id:"procesamiento-de-listas-en-jsx",level:2},{value:"Ejemplo b\xe1sico de lista",id:"ejemplo-b\xe1sico-de-lista",level:3},{value:"Importancia del atributo <code>key</code>",id:"importancia-del-atributo-key",level:3},{value:"Ejemplo con objetos complejos",id:"ejemplo-con-objetos-complejos",level:3},{value:"Puntos a tener en cuenta:",id:"puntos-a-tener-en-cuenta-1",level:3},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"renderizado-condicional-y-procesamiento-de-listas-en-jsx",children:"Renderizado condicional y procesamiento de listas en JSX"}),"\n",(0,o.jsx)(n.p,{children:"En React, uno de los aspectos m\xe1s potentes es la capacidad de mostrar contenido din\xe1mico basado en condiciones espec\xedficas y de procesar listas de elementos de manera eficiente. Estas habilidades son esenciales para construir interfaces interactivas y flexibles. A continuaci\xf3n, exploraremos c\xf3mo implementar renderizado condicional y c\xf3mo trabajar con listas en JSX, la sintaxis que utiliza React para definir la interfaz de usuario."}),"\n",(0,o.jsx)(n.h2,{id:"renderizado-condicional-en-jsx",children:"Renderizado condicional en JSX"}),"\n",(0,o.jsxs)(n.p,{children:["El renderizado condicional te permite mostrar o esconder partes de la interfaz en funci\xf3n de condiciones l\xf3gicas. En JSX, puedes realizarlo utilizando operadores comunes como el operador ternario (",(0,o.jsx)(n.code,{children:"condici\xf3n ? verdadero : falso"}),") o mediante operadores l\xf3gicos como ",(0,o.jsx)(n.code,{children:"&&"})," para evaluar si una condici\xf3n es verdadera."]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-con-operador-ternario",children:"Ejemplo con operador ternario"}),"\n",(0,o.jsx)(n.p,{children:"Imagina que queremos mostrar un mensaje de bienvenida solo si el usuario est\xe1 autenticado. Podr\xedamos hacerlo de la siguiente manera:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"function MensajeBienvenida({ usuario }) {\n  return (\n    <div>\n      {usuario ? (\n        <h1>\xa1Hola, {usuario.nombre}!</h1> // Si el usuario existe, muestra el mensaje de bienvenida\n      ) : (\n        <h1>\xa1Bienvenido, invitado!</h1> // Si no hay usuario, muestra este mensaje\n      )}\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"ejemplo-con-operador-",children:["Ejemplo con operador ",(0,o.jsx)(n.code,{children:"&&"})]}),"\n",(0,o.jsxs)(n.p,{children:["En algunos casos, solo quieres renderizar algo si una condici\xf3n es verdadera y no necesitas un caso alternativo. Aqu\xed es donde el operador ",(0,o.jsx)(n.code,{children:"&&"})," es \xfatil:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"function AvisoDePago({ pagoRealizado }) {\n  return (\n    <div>\n      {pagoRealizado && <h2>Gracias por tu pago.</h2>} // Solo muestra este mensaje si el pago se ha realizado\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"puntos-a-tener-en-cuenta",children:"Puntos a tener en cuenta:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Condiciones simples:"})," Usa ",(0,o.jsx)(n.code,{children:"&&"})," cuando solo necesites mostrar algo si una condici\xf3n es verdadera."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Condiciones con alternativas:"})," Usa el operador ternario cuando tengas un caso ",(0,o.jsx)(n.code,{children:"si-no"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"procesamiento-de-listas-en-jsx",children:"Procesamiento de listas en JSX"}),"\n",(0,o.jsxs)(n.p,{children:["Trabajar con listas es una tarea com\xfan en React, especialmente cuando necesitas renderizar un conjunto de elementos similares. Esto se logra f\xe1cilmente utilizando el m\xe9todo ",(0,o.jsx)(n.code,{children:".map()"})," de los arrays en JavaScript."]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-b\xe1sico-de-lista",children:"Ejemplo b\xe1sico de lista"}),"\n",(0,o.jsx)(n.p,{children:"Supongamos que tenemos una lista de tareas que queremos mostrar:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"function ListaDeTareas({ tareas }) {\n  return (\n    <ul>\n      {tareas.map((tarea, index) => (\n        <li key={index}>{tarea}</li> // Renderiza cada tarea como un elemento <li>\n      ))}\n    </ul>\n  );\n}\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"importancia-del-atributo-key",children:["Importancia del atributo ",(0,o.jsx)(n.code,{children:"key"})]}),"\n",(0,o.jsxs)(n.p,{children:["El atributo ",(0,o.jsx)(n.code,{children:"key"})," es fundamental cuando se trabaja con listas en React. Proporciona a cada elemento un identificador \xfanico para que React pueda realizar un seguimiento eficiente de los cambios en la lista. La ",(0,o.jsx)(n.code,{children:"key"})," debe ser \xfanica entre elementos hermanos, lo que permite a React identificar y actualizar solo los elementos que han cambiado."]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-con-objetos-complejos",children:"Ejemplo con objetos complejos"}),"\n",(0,o.jsx)(n.p,{children:"En caso de trabajar con objetos m\xe1s complejos, la estructura podr\xeda verse as\xed:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"function ListaDeUsuarios({ usuarios }) {\n  return (\n    <ul>\n      {usuarios.map((usuario) => (\n        <li key={usuario.id}>\n          {usuario.nombre} - {usuario.edad} a\xf1os\n        </li>\n      ))}\n    </ul>\n  );\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Aqu\xed, utilizamos ",(0,o.jsx)(n.code,{children:"usuario.id"})," como la ",(0,o.jsx)(n.code,{children:"key"}),", que es preferible a usar el \xedndice del array, ya que el \xedndice puede causar problemas si la lista cambia de orden."]}),"\n",(0,o.jsx)(n.h3,{id:"puntos-a-tener-en-cuenta-1",children:"Puntos a tener en cuenta:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsxs)(n.strong,{children:["Siempre usa ",(0,o.jsx)(n.code,{children:"key"}),":"]})," Es crucial para mantener la eficiencia de renderizado en React."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsxs)(n.strong,{children:["Evita usar \xedndices como ",(0,o.jsx)(n.code,{children:"key"}),":"]})," Si los elementos pueden cambiar de posici\xf3n, es mejor usar un identificador \xfanico de cada objeto."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Renderizado condicional en React"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"Uso de operadores l\xf3gicos en JSX"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsxs)(n.strong,{children:["M\xe9todo ",(0,o.jsx)(n.code,{children:".map()"})," de JavaScript"]})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsxs)(n.strong,{children:["Uso adecuado del atributo ",(0,o.jsx)(n.code,{children:"key"})," en listas"]})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,o.jsxs)(n.p,{children:["El renderizado condicional y el procesamiento de listas en JSX son habilidades fundamentales en React. Utilizando operadores ternarios y ",(0,o.jsx)(n.code,{children:"&&"}),", puedes controlar qu\xe9 componentes mostrar en funci\xf3n de ciertas condiciones. Adem\xe1s, renderizar listas din\xe1micamente utilizando el m\xe9todo ",(0,o.jsx)(n.code,{children:".map()"})," y asegurar que cada elemento tenga una ",(0,o.jsx)(n.code,{children:"key"})," \xfanica permite construir interfaces interactivas y eficientes."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>c});var o=a(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);