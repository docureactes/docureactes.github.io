"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[3322],{7186:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>l});var i=n(4848),s=n(8453);const o={},r="Establecer valores iniciales correctos y eliminar estados innecesarios",t={id:"State/2-3-Establecer valores iniciales correctos y eliminar estados innecesarios",title:"Establecer valores iniciales correctos y eliminar estados innecesarios",description:"La importancia de un estado bien definido",source:"@site/docs/2-State/2-3-Establecer valores iniciales correctos y eliminar estados innecesarios.md",sourceDirName:"2-State",slug:"/State/2-3-Establecer valores iniciales correctos y eliminar estados innecesarios",permalink:"/State/2-3-Establecer valores iniciales correctos y eliminar estados innecesarios",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Gesti\xf3n de entradas del usuario con State",permalink:"/State/2-2-Gesti\xf3n de entradas del usuario con State"},next:{title:"Identificaci\xf3n y soluci\xf3n de problemas con valores que no se actualizan",permalink:"/State/2-4-Identificaci\xf3n y soluci\xf3n de problemas con valores que no se actualizan"}},c={},l=[{value:"La importancia de un estado bien definido",id:"la-importancia-de-un-estado-bien-definido",level:2},{value:"Establecer valores iniciales correctos",id:"establecer-valores-iniciales-correctos",level:2},{value:"Ejemplo 1: Estado inicial para un campo de texto",id:"ejemplo-1-estado-inicial-para-un-campo-de-texto",level:3},{value:"Ejemplo 2: Estado inicial para una lista",id:"ejemplo-2-estado-inicial-para-una-lista",level:3},{value:"Eliminar estados innecesarios",id:"eliminar-estados-innecesarios",level:2},{value:"Ejemplo: Evitar estados redundantes",id:"ejemplo-evitar-estados-redundantes",level:3},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function d(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.h1,{id:"establecer-valores-iniciales-correctos-y-eliminar-estados-innecesarios",children:"Establecer valores iniciales correctos y eliminar estados innecesarios"}),"\n",(0,i.jsx)(a.h2,{id:"la-importancia-de-un-estado-bien-definido",children:"La importancia de un estado bien definido"}),"\n",(0,i.jsxs)(a.p,{children:["En React, el ",(0,i.jsx)(a.code,{children:"State"})," es una de las piezas fundamentales que permite que los componentes mantengan y actualicen la informaci\xf3n a lo largo del ciclo de vida de la aplicaci\xf3n. Sin embargo, para que tu aplicaci\xf3n funcione de manera eficiente y sea f\xe1cil de mantener, es crucial establecer valores iniciales correctos para el estado y eliminar cualquier estado innecesario. Esto no solo mejora el rendimiento, sino que tambi\xe9n hace que tu c\xf3digo sea m\xe1s limpio y f\xe1cil de entender."]}),"\n",(0,i.jsx)(a.h2,{id:"establecer-valores-iniciales-correctos",children:"Establecer valores iniciales correctos"}),"\n",(0,i.jsx)(a.p,{children:"Cuando defines el estado de un componente, es importante pensar en qu\xe9 valor deber\xeda tener ese estado al inicio. Este valor inicial deber\xeda ser coherente con el tipo de datos que va a manejar y con la l\xf3gica de tu aplicaci\xf3n."}),"\n",(0,i.jsx)(a.h3,{id:"ejemplo-1-estado-inicial-para-un-campo-de-texto",children:"Ejemplo 1: Estado inicial para un campo de texto"}),"\n",(0,i.jsx)(a.p,{children:"Supongamos que tienes un formulario donde el usuario ingresa su nombre. Un valor inicial l\xf3gico para el estado que maneja este campo de texto ser\xeda una cadena vac\xeda:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-jsx",children:"import React, { useState } from 'react';\n\nfunction FormularioNombre() {\n  // Establecemos el estado inicial como una cadena vac\xeda\n  const [nombre, setNombre] = useState('');\n\n  return (\n    <div>\n      <label>Nombre:</label>\n      <input \n        type=\"text\" \n        value={nombre} \n        onChange={(e) => setNombre(e.target.value)} \n      />\n    </div>\n  );\n}\n\nexport default FormularioNombre;\n"})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.strong,{children:"Puntos a destacar:"})}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Coherencia:"})," El estado inicial (",(0,i.jsx)(a.code,{children:"nombre"}),") es una cadena vac\xeda porque esperamos que el usuario ingrese un texto."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Simplicidad:"})," No complicamos el estado con valores innecesarios."]}),"\n"]}),"\n",(0,i.jsx)(a.h3,{id:"ejemplo-2-estado-inicial-para-una-lista",children:"Ejemplo 2: Estado inicial para una lista"}),"\n",(0,i.jsx)(a.p,{children:"Si est\xe1s trabajando con una lista de elementos que inicialmente est\xe1 vac\xeda pero que se llenar\xe1 despu\xe9s de una llamada a una API, el estado inicial deber\xeda ser un array vac\xedo:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-jsx",children:"import React, { useState, useEffect } from 'react';\n\nfunction ListaDeTareas() {\n  // Estado inicial como un array vac\xedo\n  const [tareas, setTareas] = useState([]);\n\n  useEffect(() => {\n    // Simulamos la llamada a una API que devuelve un array de tareas\n    setTimeout(() => {\n      setTareas(['Tarea 1', 'Tarea 2', 'Tarea 3']);\n    }, 1000);\n  }, []);\n\n  return (\n    <ul>\n      {tareas.map((tarea, index) => (\n        <li key={index}>{tarea}</li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ListaDeTareas;\n"})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.strong,{children:"Puntos a destacar:"})}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Valor inicial apropiado:"})," Un array vac\xedo refleja correctamente que al inicio no hay tareas disponibles."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Facilidad para manejar la respuesta de la API:"})," Cuando los datos est\xe1n disponibles, el estado se actualiza sin complicaciones."]}),"\n"]}),"\n",(0,i.jsx)(a.h2,{id:"eliminar-estados-innecesarios",children:"Eliminar estados innecesarios"}),"\n",(0,i.jsx)(a.p,{children:"Otro aspecto crucial para mantener tu aplicaci\xf3n React eficiente es evitar estados innecesarios. Es com\xfan ver que se guarda en el estado informaci\xf3n que realmente no necesita estar ah\xed. Esto puede llevar a renderizados innecesarios y a un c\xf3digo m\xe1s dif\xedcil de mantener."}),"\n",(0,i.jsx)(a.h3,{id:"ejemplo-evitar-estados-redundantes",children:"Ejemplo: Evitar estados redundantes"}),"\n",(0,i.jsx)(a.p,{children:"Supongamos que tienes un componente que muestra si un usuario est\xe1 conectado o no, y este estado depende de la longitud de una lista de tareas. Una manera incorrecta ser\xeda almacenar tanto las tareas como un estado booleano para la conexi\xf3n:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-jsx",children:"import React, { useState } from 'react';\n\nfunction EstadoRedundante() {\n  const [tareas, setTareas] = useState(['Tarea 1', 'Tarea 2']);\n  const [usuarioConectado, setUsuarioConectado] = useState(false);\n\n  // Esta l\xf3gica est\xe1 duplicada y es innecesaria\n  setUsuarioConectado(tareas.length > 0);\n\n  return (\n    <div>\n      <p>Usuario conectado: {usuarioConectado ? 'S\xed' : 'No'}</p>\n    </div>\n  );\n}\n\nexport default EstadoRedundante;\n"})}),"\n",(0,i.jsxs)(a.p,{children:["En lugar de esto, podemos eliminar el estado ",(0,i.jsx)(a.code,{children:"usuarioConectado"})," y calcularlo directamente a partir de la longitud de la lista de tareas:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-jsx",children:"import React, { useState } from 'react';\n\nfunction EstadoOptimizado() {\n  const [tareas, setTareas] = useState(['Tarea 1', 'Tarea 2']);\n\n  // No necesitamos un estado adicional para verificar si el usuario est\xe1 conectado\n  const usuarioConectado = tareas.length > 0;\n\n  return (\n    <div>\n      <p>Usuario conectado: {usuarioConectado ? 'S\xed' : 'No'}</p>\n    </div>\n  );\n}\n\nexport default EstadoOptimizado;\n"})}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.strong,{children:"Puntos a destacar:"})}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Simplificaci\xf3n:"})," Eliminamos un estado innecesario (",(0,i.jsx)(a.code,{children:"usuarioConectado"}),")."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Eficiencia:"})," Reducimos la complejidad del componente, evitando renderizados adicionales."]}),"\n"]}),"\n",(0,i.jsx)(a.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"useState:"})," Profundiza en c\xf3mo utilizar ",(0,i.jsx)(a.code,{children:"useState"})," para manejar el estado en componentes funcionales."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Renderizado condicional:"})," Aprende m\xe1s sobre c\xf3mo optimizar el renderizado de componentes en React."]}),"\n",(0,i.jsxs)(a.li,{children:[(0,i.jsx)(a.strong,{children:"Desestructuraci\xf3n:"})," Explora c\xf3mo la desestructuraci\xf3n puede ayudarte a gestionar mejor los props y el estado."]}),"\n"]}),"\n",(0,i.jsx)(a.h2,{id:"resumen",children:"Resumen"}),"\n",(0,i.jsx)(a.p,{children:"Establecer valores iniciales correctos para el estado y eliminar estados innecesarios son pasos clave para optimizar tus componentes en React. Un estado bien definido garantiza que tu aplicaci\xf3n sea eficiente, f\xe1cil de mantener y comprensible. Adem\xe1s, evita la duplicaci\xf3n de l\xf3gica y asegura que tu c\xf3digo sea m\xe1s limpio y claro."})]})}function u(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>r,x:()=>t});var i=n(6540);const s={},o=i.createContext(s);function r(e){const a=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:a},e.children)}}}]);