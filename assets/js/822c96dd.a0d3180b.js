"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[1713],{9923:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>t});var s=a(4848),r=a(8453);const o={},i="Uso de Key dentro de listas",d={id:"Renderizado/6-3-Uso de Key dentro de listas",title:"Uso de Key dentro de listas",description:"En React, cuando trabajamos con listas, uno de los aspectos m\xe1s importantes a tener en cuenta es el uso de la propiedad key. Este concepto puede parecer un poco confuso al principio, pero es fundamental para asegurar que React maneje el DOM de manera eficiente y correcta.",source:"@site/docs/6-Renderizado/6-3-Uso de Key dentro de listas.md",sourceDirName:"6-Renderizado",slug:"/Renderizado/6-3-Uso de Key dentro de listas",permalink:"/Renderizado/6-3-Uso de Key dentro de listas",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tratamiento del valor 0 (cero) en JSX",permalink:"/Renderizado/6-2-Tratamiento del valor 0 (cero) en JSX"},next:{title:"Uso seguro de Raw HTML",permalink:"/Renderizado/6-4-Uso seguro de Raw HTML"}},c={},t=[{value:"\xbfQu\xe9 es una <code>key</code> en React?",id:"qu\xe9-es-una-key-en-react",level:2},{value:"Ejemplo b\xe1sico de una lista en React",id:"ejemplo-b\xe1sico-de-una-lista-en-react",level:3},{value:"A\xf1adiendo <code>key</code> para mejorar el rendimiento",id:"a\xf1adiendo-key-para-mejorar-el-rendimiento",level:3},{value:"<strong>\xbfPor qu\xe9 es importante usar <code>key</code>?</strong>",id:"por-qu\xe9-es-importante-usar-key",level:3},{value:"<strong>Errores comunes al usar <code>key</code></strong>",id:"errores-comunes-al-usar-key",level:3},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"uso-de-key-dentro-de-listas",children:"Uso de Key dentro de listas"}),"\n",(0,s.jsxs)(n.p,{children:["En React, cuando trabajamos con listas, uno de los aspectos m\xe1s importantes a tener en cuenta es el uso de la propiedad ",(0,s.jsx)(n.code,{children:"key"}),". Este concepto puede parecer un poco confuso al principio, pero es fundamental para asegurar que React maneje el DOM de manera eficiente y correcta."]}),"\n",(0,s.jsxs)(n.h2,{id:"qu\xe9-es-una-key-en-react",children:["\xbfQu\xe9 es una ",(0,s.jsx)(n.code,{children:"key"})," en React?"]}),"\n",(0,s.jsxs)(n.p,{children:["Una ",(0,s.jsx)(n.code,{children:"key"})," es un atributo especial que se utiliza cuando se generan listas de elementos en React. Sirve como un identificador \xfanico para cada elemento en la lista. React usa estas claves para identificar qu\xe9 elementos han cambiado, han sido a\xf1adidos o eliminados, permitiendo as\xed un renderizado m\xe1s eficiente."]}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-b\xe1sico-de-una-lista-en-react",children:"Ejemplo b\xe1sico de una lista en React"}),"\n",(0,s.jsxs)(n.p,{children:["Imaginemos que queremos mostrar una lista de frutas en nuestra aplicaci\xf3n. As\xed es como lo har\xedamos sin usar ",(0,s.jsx)(n.code,{children:"key"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\n\nfunction ListaDeFrutas() {\n  const frutas = ['Manzana', 'Banana', 'Cereza'];\n\n  return (\n    <ul>\n      {frutas.map((fruta) => (\n        <li>{fruta}</li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ListaDeFrutas;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["En este c\xf3digo, hemos creado una lista de frutas y la hemos renderizado en una lista no ordenada (",(0,s.jsx)(n.code,{children:"ul"}),"). Sin embargo, este c\xf3digo tiene un problema: no hemos proporcionado una ",(0,s.jsx)(n.code,{children:"key"})," para cada elemento de la lista."]}),"\n",(0,s.jsxs)(n.h3,{id:"a\xf1adiendo-key-para-mejorar-el-rendimiento",children:["A\xf1adiendo ",(0,s.jsx)(n.code,{children:"key"})," para mejorar el rendimiento"]}),"\n",(0,s.jsxs)(n.p,{children:["Vamos a a\xf1adir una ",(0,s.jsx)(n.code,{children:"key"})," para cada elemento en la lista. La ",(0,s.jsx)(n.code,{children:"key"})," debe ser \xfanica entre los hermanos, lo que significa que ning\xfan dos elementos pueden tener la misma ",(0,s.jsx)(n.code,{children:"key"})," dentro de la misma lista. Aqu\xed tienes c\xf3mo hacerlo:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\n\nfunction ListaDeFrutas() {\n  const frutas = ['Manzana', 'Banana', 'Cereza'];\n\n  return (\n    <ul>\n      {frutas.map((fruta, index) => (\n        <li key={index}>{fruta}</li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ListaDeFrutas;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["En este ejemplo, hemos usado el ",(0,s.jsx)(n.code,{children:"index"})," del array como ",(0,s.jsx)(n.code,{children:"key"}),". Sin embargo, ",(0,s.jsx)(n.strong,{children:"esto solo es recomendable en ciertos casos"}),". Si los elementos de la lista cambian de posici\xf3n o si la lista puede ser reordenada, es mejor utilizar un identificador \xfanico que no cambie, como un ",(0,s.jsx)(n.code,{children:"id"})," si est\xe1 disponible:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\n\nfunction ListaDeFrutas() {\n  const frutas = [\n    { id: 1, nombre: 'Manzana' },\n    { id: 2, nombre: 'Banana' },\n    { id: 3, nombre: 'Cereza' },\n  ];\n\n  return (\n    <ul>\n      {frutas.map((fruta) => (\n        <li key={fruta.id}>{fruta.nombre}</li>\n      ))}\n    </ul>\n  );\n}\n\nexport default ListaDeFrutas;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"por-qu\xe9-es-importante-usar-key",children:(0,s.jsxs)(n.strong,{children:["\xbfPor qu\xe9 es importante usar ",(0,s.jsx)(n.code,{children:"key"}),"?"]})}),"\n",(0,s.jsxs)(n.p,{children:["El uso de ",(0,s.jsx)(n.code,{children:"key"})," permite a React identificar y realizar un seguimiento de los elementos de manera m\xe1s eficiente. Cuando React actualiza la lista, utiliza las claves para saber exactamente qu\xe9 elementos han cambiado, lo que le permite minimizar el n\xfamero de actualizaciones en el DOM, mejorando as\xed el rendimiento de la aplicaci\xf3n."]}),"\n",(0,s.jsx)(n.h3,{id:"errores-comunes-al-usar-key",children:(0,s.jsxs)(n.strong,{children:["Errores comunes al usar ",(0,s.jsx)(n.code,{children:"key"})]})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["Usar ",(0,s.jsx)(n.code,{children:"index"})," como ",(0,s.jsx)(n.code,{children:"key"})," en listas que cambian din\xe1micamente:"]})," Si la lista es susceptible de ser reordenada, agregar o eliminar elementos, el uso del \xedndice del array como ",(0,s.jsx)(n.code,{children:"key"})," puede causar problemas. En estos casos, React podr\xeda no reconocer correctamente qu\xe9 elementos han cambiado, lo que puede generar errores visuales y de comportamiento."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["No usar ",(0,s.jsx)(n.code,{children:"key"})," cuando es necesario:"]})," Olvidar a\xf1adir ",(0,s.jsx)(n.code,{children:"key"})," puede llevar a advertencias en la consola de desarrollo y a un rendimiento menos \xf3ptimo en la aplicaci\xf3n."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"key"})," en React"]}),"\n",(0,s.jsx)(n.li,{children:"Listas y renderizado condicional en React"}),"\n",(0,s.jsx)(n.li,{children:"Identificadores \xfanicos en listas"}),"\n",(0,s.jsxs)(n.li,{children:["Optimizaci\xf3n del renderizado con ",(0,s.jsx)(n.code,{children:"key"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,s.jsxs)(n.p,{children:["El uso de ",(0,s.jsx)(n.code,{children:"key"})," en listas de React es crucial para garantizar un renderizado eficiente y correcto de los elementos. Las ",(0,s.jsx)(n.code,{children:"key"})," deben ser \xfanicas y estables, y es recomendable evitar el uso de \xedndices del array como ",(0,s.jsx)(n.code,{children:"key"})," cuando los elementos de la lista pueden cambiar de orden. Aplicar correctamente este concepto mejora tanto el rendimiento como la experiencia de desarrollo en React."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>d});var s=a(6540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);