"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[5057],{7537:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>t,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var s=o(4848),c=o(8453);const a={},i="Uso de useEffect con funciones con nombre",r={id:"Ciclo de vida/4-2-Uso de useEffect con funciones con nombre",title:"Uso de useEffect con funciones con nombre",description:"En el desarrollo con React, useEffect es un Hook crucial que nos permite manejar efectos secundarios en nuestros componentes, como llamadas a APIs, suscripciones o actualizaciones del DOM. A menudo, utilizamos funciones an\xf3nimas dentro de useEffect, pero en muchos casos es m\xe1s claro y organizado usar funciones con nombre. Veamos c\xf3mo y cu\xe1ndo hacerlo.",source:"@site/docs/4-Ciclo de vida/4-2-Uso de useEffect con funciones con nombre.md",sourceDirName:"4-Ciclo de vida",slug:"/Ciclo de vida/4-2-Uso de useEffect con funciones con nombre",permalink:"/Ciclo de vida/4-2-Uso de useEffect con funciones con nombre",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introducci\xf3n a useEffect y control del ciclo de vida",permalink:"/Ciclo de vida/4-1-Introducci\xf3n a useEffect y control del ciclo de vida"},next:{title:"Razones para que useEffect realice una sola tarea",permalink:"/Ciclo de vida/4-3-Razones para que useEffect realice una sola tarea"}},u={},l=[{value:"\xbfQu\xe9 es <code>useEffect</code>?",id:"qu\xe9-es-useeffect",level:2},{value:"Ventajas de usar funciones con nombre",id:"ventajas-de-usar-funciones-con-nombre",level:2},{value:"Ejemplo de uso con funciones con nombre",id:"ejemplo-de-uso-con-funciones-con-nombre",level:2},{value:"Limpieza de efectos secundarios con funciones con nombre",id:"limpieza-de-efectos-secundarios-con-funciones-con-nombre",level:3},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"uso-de-useeffect-con-funciones-con-nombre",children:"Uso de useEffect con funciones con nombre"}),"\n",(0,s.jsxs)(n.p,{children:["En el desarrollo con React, ",(0,s.jsx)(n.code,{children:"useEffect"})," es un Hook crucial que nos permite manejar efectos secundarios en nuestros componentes, como llamadas a APIs, suscripciones o actualizaciones del DOM. A menudo, utilizamos funciones an\xf3nimas dentro de ",(0,s.jsx)(n.code,{children:"useEffect"}),", pero en muchos casos es m\xe1s claro y organizado usar funciones con nombre. Veamos c\xf3mo y cu\xe1ndo hacerlo."]}),"\n",(0,s.jsxs)(n.h2,{id:"qu\xe9-es-useeffect",children:["\xbfQu\xe9 es ",(0,s.jsx)(n.code,{children:"useEffect"}),"?"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"useEffect"}),' es un Hook que se ejecuta despu\xe9s del renderizado de un componente. Puedes pensar en \xe9l como una forma de hacer que tu componente realice tareas "extra" despu\xe9s de que React ha actualizado el DOM. Por ejemplo, podr\xeda ser \xfatil para:']}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Llamar a una API"})," para obtener datos cuando el componente se monta."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configurar un temporizador"})," que se limpia cuando el componente se desmonta."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Suscribirse a eventos"})," que deben limpiarse posteriormente."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Aqu\xed hay un ejemplo b\xe1sico del uso de ",(0,s.jsx)(n.code,{children:"useEffect"})," con una funci\xf3n an\xf3nima:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import React, { useEffect } from 'react';\n\nfunction MiComponente() {\n  useEffect(() => {\n    console.log('Componente montado');\n    \n    return () => {\n      console.log('Componente desmontado');\n    };\n  }, []); // [] significa que este efecto solo se ejecuta una vez cuando el componente se monta.\n\n  return <div>Hola, React!</div>;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"ventajas-de-usar-funciones-con-nombre",children:"Ventajas de usar funciones con nombre"}),"\n",(0,s.jsxs)(n.p,{children:["Aunque el uso de funciones an\xf3nimas dentro de ",(0,s.jsx)(n.code,{children:"useEffect"})," es com\xfan, puede ser m\xe1s conveniente usar funciones con nombre en varias situaciones:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reutilizaci\xf3n"}),": Si necesitas llamar a la misma l\xf3gica desde otro lugar, una funci\xf3n con nombre puede ser reutilizable."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Claridad"}),": Una funci\xf3n con nombre puede hacer que el c\xf3digo sea m\xe1s legible, especialmente si el efecto es complejo."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Depuraci\xf3n"}),": Las funciones con nombre son m\xe1s f\xe1ciles de identificar en las herramientas de desarrollo, como las consolas o los perfiles de rendimiento."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"ejemplo-de-uso-con-funciones-con-nombre",children:"Ejemplo de uso con funciones con nombre"}),"\n",(0,s.jsx)(n.p,{children:"Supongamos que tienes un componente que necesita realizar una llamada a una API al montarse. Podr\xedas usar una funci\xf3n con nombre para manejar esto."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import React, { useEffect } from 'react';\n\nfunction MiComponente() {\n  // Definimos una funci\xf3n con nombre que realiza la llamada a la API\n  function obtenerDatos() {\n    console.log('Llamando a la API...');\n    // Aqu\xed ir\xeda la l\xf3gica de la llamada a la API\n  }\n\n  // Usamos la funci\xf3n con nombre dentro de useEffect\n  useEffect(() => {\n    obtenerDatos();\n  }, []); // [] asegura que la funci\xf3n solo se llame una vez, cuando el componente se monta.\n\n  return <div>Datos cargados</div>;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"limpieza-de-efectos-secundarios-con-funciones-con-nombre",children:"Limpieza de efectos secundarios con funciones con nombre"}),"\n",(0,s.jsx)(n.p,{children:"Otra situaci\xf3n com\xfan es cuando necesitas limpiar un efecto secundario, como desuscribirte de un evento o limpiar un temporizador. Usar una funci\xf3n con nombre para esta tarea puede hacer que tu c\xf3digo sea m\xe1s claro y f\xe1cil de seguir."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"import React, { useEffect } from 'react';\n\nfunction MiComponente() {\n  function configurarTemporizador() {\n    const id = setInterval(() => {\n      console.log('Temporizador en ejecuci\xf3n...');\n    }, 1000);\n    return id;\n  }\n\n  function limpiarTemporizador(id) {\n    clearInterval(id);\n    console.log('Temporizador limpiado');\n  }\n\n  useEffect(() => {\n    const idTemporizador = configurarTemporizador();\n\n    return () => {\n      limpiarTemporizador(idTemporizador);\n    };\n  }, []); // [] asegura que el efecto y la limpieza solo se ejecuten una vez.\n\n  return <div>Temporizador activo</div>;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"React Hooks"}),": Aprende m\xe1s sobre c\xf3mo usar los diferentes Hooks en React."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Funciones puras vs impuras"}),": Conceptos clave al escribir funciones dentro de ",(0,s.jsx)(n.code,{children:"useEffect"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optimizaci\xf3n de efectos secundarios"}),": T\xe9cnicas para evitar problemas de rendimiento al usar ",(0,s.jsx)(n.code,{children:"useEffect"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,s.jsxs)(n.p,{children:["El uso de ",(0,s.jsx)(n.code,{children:"useEffect"})," con funciones con nombre no solo mejora la legibilidad del c\xf3digo, sino que tambi\xe9n facilita la reutilizaci\xf3n y la depuraci\xf3n. Es una t\xe9cnica \xfatil en React para manejar efectos secundarios de manera organizada y clara."]})]})}function t(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>r});var s=o(6540);const c={},a=s.createContext(c);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);