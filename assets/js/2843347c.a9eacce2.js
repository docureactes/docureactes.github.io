"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[7873],{4870:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>t,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>r});var o=n(4848),c=n(8453);const i={},s="Gesti\xf3n de entradas del usuario con State",l={id:"State/2-2-Gesti\xf3n de entradas del usuario con State",title:"Gesti\xf3n de entradas del usuario con State",description:"Introducci\xf3n",source:"@site/docs/2-State/2-2-Gesti\xf3n de entradas del usuario con State.md",sourceDirName:"2-State",slug:"/State/2-2-Gesti\xf3n de entradas del usuario con State",permalink:"/State/2-2-Gesti\xf3n de entradas del usuario con State",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introducci\xf3n a State y buenos nombres para State",permalink:"/State/2-1-Introducci\xf3n a State y buenos nombres para State"},next:{title:"Establecer valores iniciales correctos y eliminar estados innecesarios",permalink:"/State/2-3-Establecer valores iniciales correctos y eliminar estados innecesarios"}},t={},r=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"\xbfQu\xe9 es <code>State</code>?",id:"qu\xe9-es-state",level:3},{value:"Ejemplo b\xe1sico: Controlando un campo de texto",id:"ejemplo-b\xe1sico-controlando-un-campo-de-texto",level:2},{value:"Explicaci\xf3n del c\xf3digo",id:"explicaci\xf3n-del-c\xf3digo",level:3},{value:"Conceptos clave",id:"conceptos-clave",level:2},{value:"Ejemplo adicional: Manejo de una casilla de verificaci\xf3n",id:"ejemplo-adicional-manejo-de-una-casilla-de-verificaci\xf3n",level:2},{value:"Explicaci\xf3n del c\xf3digo",id:"explicaci\xf3n-del-c\xf3digo-1",level:3},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function d(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.h1,{id:"gesti\xf3n-de-entradas-del-usuario-con-state",children:"Gesti\xf3n de entradas del usuario con State"}),"\n",(0,o.jsx)(a.h2,{id:"introducci\xf3n",children:"Introducci\xf3n"}),"\n",(0,o.jsxs)(a.p,{children:['En React, la gesti\xf3n de entradas del usuario es un aspecto crucial para construir interfaces interactivas y din\xe1micas. Cuando hablamos de "entradas del usuario", nos referimos a cualquier tipo de dato que el usuario pueda ingresar, como texto en un campo de formulario, la selecci\xf3n de una opci\xf3n en un men\xfa desplegable o la activaci\xf3n de un checkbox. Para manejar estos datos en React, utilizamos ',(0,o.jsx)(a.code,{children:"State"}),", que nos permite capturar y responder a los cambios que realiza el usuario."]}),"\n",(0,o.jsxs)(a.h3,{id:"qu\xe9-es-state",children:["\xbfQu\xe9 es ",(0,o.jsx)(a.code,{children:"State"}),"?"]}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.code,{children:"State"})," en React es un objeto que guarda informaci\xf3n sobre el componente que puede cambiar a lo largo del tiempo. Esta informaci\xf3n puede ser cualquier cosa, desde el valor de un campo de entrada hasta el estado de una casilla de verificaci\xf3n. Cada vez que el ",(0,o.jsx)(a.code,{children:"State"})," cambia, React vuelve a renderizar el componente para reflejar la actualizaci\xf3n en la interfaz de usuario."]}),"\n",(0,o.jsx)(a.h2,{id:"ejemplo-b\xe1sico-controlando-un-campo-de-texto",children:"Ejemplo b\xe1sico: Controlando un campo de texto"}),"\n",(0,o.jsxs)(a.p,{children:["Comencemos con un ejemplo sencillo para entender c\xf3mo podemos gestionar el valor de un campo de texto utilizando ",(0,o.jsx)(a.code,{children:"State"}),"."]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:"import React, { useState } from 'react';\n\nfunction MiFormulario() {\n  // Definimos el state para manejar el valor del campo de texto\n  const [nombre, setNombre] = useState(''); // Inicialmente, el nombre est\xe1 vac\xedo\n\n  // Funci\xf3n que se ejecuta cuando el usuario escribe en el campo de texto\n  const manejarCambio = (evento) => {\n    setNombre(evento.target.value); // Actualizamos el state con el valor actual del campo\n  };\n\n  return (\n    <div>\n      <h2>Formulario de Ejemplo</h2>\n      {/* Campo de texto controlado */}\n      <input\n        type=\"text\"\n        value={nombre} // El valor del input es el valor almacenado en el state\n        onChange={manejarCambio} // Se llama a manejarCambio cada vez que se escribe algo\n        placeholder=\"Escribe tu nombre\"\n      />\n      <p>Tu nombre es: {nombre}</p>\n    </div>\n  );\n}\n\nexport default MiFormulario;\n"})}),"\n",(0,o.jsx)(a.h3,{id:"explicaci\xf3n-del-c\xf3digo",children:"Explicaci\xf3n del c\xf3digo"}),"\n",(0,o.jsxs)(a.ol,{children:["\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"useState"}),": Aqu\xed usamos ",(0,o.jsx)(a.code,{children:"useState"})," para crear un estado local llamado ",(0,o.jsx)(a.code,{children:"nombre"}),", con un valor inicial de una cadena vac\xeda ",(0,o.jsx)(a.code,{children:"''"}),". ",(0,o.jsx)(a.code,{children:"setNombre"})," es la funci\xf3n que utilizaremos para actualizar este estado."]}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"manejarCambio"}),": Esta funci\xf3n se dispara cada vez que el usuario escribe algo en el campo de texto. ",(0,o.jsx)(a.code,{children:"evento.target.value"})," obtiene el valor actual del campo y luego ",(0,o.jsx)(a.code,{children:"setNombre"})," actualiza el estado ",(0,o.jsx)(a.code,{children:"nombre"})," con este valor."]}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Campo de texto controlado"}),": El input utiliza ",(0,o.jsx)(a.code,{children:"value={nombre}"})," para asegurarse de que su valor siempre refleje el estado ",(0,o.jsx)(a.code,{children:"nombre"}),". Adem\xe1s, ",(0,o.jsx)(a.code,{children:"onChange={manejarCambio}"})," asegura que cada vez que el usuario escriba algo, el estado se actualice."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(a.h2,{id:"conceptos-clave",children:"Conceptos clave"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Componentes controlados"}),": Un componente controlado es aquel cuyo valor es manejado por React. En nuestro ejemplo, el campo de texto es un componente controlado porque su valor est\xe1 ligado al estado ",(0,o.jsx)(a.code,{children:"nombre"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:[(0,o.jsxs)(a.strong,{children:["Actualizaci\xf3n del ",(0,o.jsx)(a.code,{children:"State"})]}),": Cada vez que llamamos a ",(0,o.jsx)(a.code,{children:"setNombre"}),", React vuelve a renderizar el componente, asegurando que la interfaz de usuario siempre est\xe9 sincronizada con el estado."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(a.h2,{id:"ejemplo-adicional-manejo-de-una-casilla-de-verificaci\xf3n",children:"Ejemplo adicional: Manejo de una casilla de verificaci\xf3n"}),"\n",(0,o.jsxs)(a.p,{children:["Supongamos que ahora queremos manejar una casilla de verificaci\xf3n (",(0,o.jsx)(a.code,{children:"checkbox"}),"). Este es otro ejemplo com\xfan de c\xf3mo gestionar entradas del usuario con ",(0,o.jsx)(a.code,{children:"State"}),"."]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-jsx",children:"import React, { useState } from 'react';\n\nfunction MiCheckbox() {\n  // Definimos el state para manejar el estado de la casilla de verificaci\xf3n\n  const [aceptaTerminos, setAceptaTerminos] = useState(false); // Inicialmente, la casilla est\xe1 desmarcada\n\n  // Funci\xf3n que se ejecuta cuando el usuario hace clic en la casilla\n  const manejarCambio = (evento) => {\n    setAceptaTerminos(evento.target.checked); // Actualizamos el state con el valor actual de la casilla\n  };\n\n  return (\n    <div>\n      <h2>Aceptar T\xe9rminos y Condiciones</h2>\n      {/* Casilla de verificaci\xf3n controlada */}\n      <input\n        type=\"checkbox\"\n        checked={aceptaTerminos} // El estado de la casilla depende del state\n        onChange={manejarCambio} // Se llama a manejarCambio cuando el usuario cambia el estado de la casilla\n      />\n      <label>\n        He le\xeddo y acepto los t\xe9rminos y condiciones\n      </label>\n      <p>{aceptaTerminos ? 'Gracias por aceptar los t\xe9rminos.' : 'Por favor, acepta los t\xe9rminos.'}</p>\n    </div>\n  );\n}\n\nexport default MiCheckbox;\n"})}),"\n",(0,o.jsx)(a.h3,{id:"explicaci\xf3n-del-c\xf3digo-1",children:"Explicaci\xf3n del c\xf3digo"}),"\n",(0,o.jsxs)(a.ol,{children:["\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"useState"}),": Creamos un estado llamado ",(0,o.jsx)(a.code,{children:"aceptaTerminos"})," con un valor inicial de ",(0,o.jsx)(a.code,{children:"false"}),", indicando que la casilla de verificaci\xf3n est\xe1 desmarcada al inicio."]}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"manejarCambio"}),": Esta funci\xf3n se ejecuta cada vez que el usuario cambia el estado de la casilla. ",(0,o.jsx)(a.code,{children:"evento.target.checked"})," obtiene el estado actual (marcada o desmarcada) de la casilla, y luego ",(0,o.jsx)(a.code,{children:"setAceptaTerminos"})," actualiza el estado ",(0,o.jsx)(a.code,{children:"aceptaTerminos"})," con este valor."]}),"\n"]}),"\n",(0,o.jsxs)(a.li,{children:["\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.strong,{children:"Checkbox controlado"}),": El checkbox utiliza ",(0,o.jsx)(a.code,{children:"checked={aceptaTerminos}"})," para mantener su estado sincronizado con ",(0,o.jsx)(a.code,{children:"aceptaTerminos"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(a.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.code,{children:"State"})," en React"]}),"\n",(0,o.jsx)(a.li,{children:"Componentes controlados en formularios"}),"\n",(0,o.jsx)(a.li,{children:"Manejo de eventos en React"}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.code,{children:"useState"})," y su uso en entradas de usuario"]}),"\n"]}),"\n",(0,o.jsx)(a.h2,{id:"resumen",children:"Resumen"}),"\n",(0,o.jsxs)(a.p,{children:["Manejar entradas del usuario en React con ",(0,o.jsx)(a.code,{children:"State"})," es esencial para crear interfaces din\xe1micas. Utilizando ",(0,o.jsx)(a.code,{children:"useState"}),", podemos capturar y actualizar el valor de diferentes tipos de entradas, como campos de texto y casillas de verificaci\xf3n. Es importante entender c\xf3mo funcionan los componentes controlados, ya que nos permiten mantener el valor de los elementos del formulario sincronizado con el estado del componente, asegurando una interfaz de usuario reactiva y coherente."]})]})}function u(e={}){const{wrapper:a}={...(0,c.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>l});var o=n(6540);const c={},i=o.createContext(c);function s(e){const a=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),o.createElement(i.Provider,{value:a},e.children)}}}]);