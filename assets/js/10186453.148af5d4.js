"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[8797],{368:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=s(4848),r=s(8453);const a={},t="Diferencias entre State y Props",i={id:"Props/3-2-Diferencias entre State y Props",title:"Diferencias entre State y Props",description:"Cuando trabajamos con React, es esencial entender la diferencia entre State y Props. Ambos son fundamentales para manejar la informaci\xf3n dentro de los componentes, pero tienen prop\xf3sitos y comportamientos distintos.",source:"@site/docs/3-Props/3-2-Diferencias entre State y Props.md",sourceDirName:"3-Props",slug:"/Props/3-2-Diferencias entre State y Props",permalink:"/Props/3-2-Diferencias entre State y Props",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introducci\xf3n a Props y buenos nombres para Props",permalink:"/Props/3-1-Introducci\xf3n a Props y buenos nombres para Props"},next:{title:"Ejemplos de copias y operaciones innecesarias con Props",permalink:"/Props/3-3-Ejemplos de copias y operaciones innecesarias con Props"}},c={},l=[{value:"\xbfQu\xe9 es el State?",id:"qu\xe9-es-el-state",level:2},{value:"Caracter\xedsticas del State:",id:"caracter\xedsticas-del-state",level:3},{value:"Ejemplo de uso del State:",id:"ejemplo-de-uso-del-state",level:3},{value:"\xbfQu\xe9 son los Props?",id:"qu\xe9-son-los-props",level:2},{value:"Caracter\xedsticas de los Props:",id:"caracter\xedsticas-de-los-props",level:3},{value:"Ejemplo de uso de Props:",id:"ejemplo-de-uso-de-props",level:3},{value:"Diferencias clave entre State y Props",id:"diferencias-clave-entre-state-y-props",level:2},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"diferencias-entre-state-y-props",children:"Diferencias entre State y Props"}),"\n",(0,o.jsxs)(n.p,{children:["Cuando trabajamos con React, es esencial entender la diferencia entre ",(0,o.jsx)(n.strong,{children:"State"})," y ",(0,o.jsx)(n.strong,{children:"Props"}),". Ambos son fundamentales para manejar la informaci\xf3n dentro de los componentes, pero tienen prop\xf3sitos y comportamientos distintos."]}),"\n",(0,o.jsx)(n.h2,{id:"qu\xe9-es-el-state",children:"\xbfQu\xe9 es el State?"}),"\n",(0,o.jsxs)(n.p,{children:["El ",(0,o.jsx)(n.strong,{children:"State"})," es un objeto especial que permite a los componentes de React almacenar y gestionar datos que cambian a lo largo del tiempo. Cada vez que el estado de un componente cambia, React vuelve a renderizar el componente para reflejar esos cambios en la interfaz de usuario."]}),"\n",(0,o.jsx)(n.h3,{id:"caracter\xedsticas-del-state",children:"Caracter\xedsticas del State:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Mutable"}),": El estado puede cambiar a lo largo del tiempo, lo que permite actualizar la interfaz cuando se producen eventos, como la entrada de un usuario o la carga de datos desde una API."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Local al componente"}),": El estado es privado y solo es accesible desde el componente donde se define."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Causa re-renderizados"}),": Cuando el estado cambia, React vuelve a renderizar el componente para mostrar la nueva informaci\xf3n."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-de-uso-del-state",children:"Ejemplo de uso del State:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'import React, { useState } from \'react\';\n\nfunction Contador() {\n  // Definimos un estado llamado "contador" y una funci\xf3n para actualizarlo "setContador"\n  const [contador, setContador] = useState(0);\n\n  // Funci\xf3n para incrementar el contador\n  const incrementar = () => {\n    setContador(contador + 1);\n  };\n\n  return (\n    <div>\n      <p>Has hecho clic {contador} veces</p>\n      {/* Cuando se hace clic en el bot\xf3n, llamamos a la funci\xf3n incrementar */}\n      <button onClick={incrementar}>Incrementar</button>\n    </div>\n  );\n}\n\nexport default Contador;\n'})}),"\n",(0,o.jsxs)(n.p,{children:["En este ejemplo, el estado ",(0,o.jsx)(n.code,{children:"contador"})," se inicializa en 0 y se incrementa cada vez que el usuario hace clic en el bot\xf3n. El componente se vuelve a renderizar autom\xe1ticamente cada vez que cambia el valor del estado."]}),"\n",(0,o.jsx)(n.h2,{id:"qu\xe9-son-los-props",children:"\xbfQu\xe9 son los Props?"}),"\n",(0,o.jsxs)(n.p,{children:["Los ",(0,o.jsx)(n.strong,{children:"Props"}),' (abreviatura de "properties") son como los "argumentos" que pasamos a una funci\xf3n, pero en este caso se los pasamos a los componentes. Permiten que un componente padre pase datos a un componente hijo, haciendo que el componente hijo sea reutilizable y m\xe1s din\xe1mico.']}),"\n",(0,o.jsx)(n.h3,{id:"caracter\xedsticas-de-los-props",children:"Caracter\xedsticas de los Props:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Inmutables"}),': Los Props no pueden ser modificados dentro del componente que los recibe. Son "de solo lectura".']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Se pasan desde un componente padre a un componente hijo"}),": Esto permite a los componentes comunicarse entre s\xed, pero siempre en una sola direcci\xf3n: de padre a hijo."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"No causan re-renderizados por s\xed mismos"}),": Si un componente padre cambia los props que pasa a un hijo, el hijo se volver\xe1 a renderizar con los nuevos valores, pero los props en s\xed mismos no causan renderizados."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-de-uso-de-props",children:"Ejemplo de uso de Props:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'import React from \'react\';\n\n// Componente hijo que recibe un prop llamado "nombre"\nfunction Saludo({ nombre }) {\n  return <h1>Hola, {nombre}!</h1>;\n}\n\n// Componente padre que pasa un prop al componente hijo\nfunction App() {\n  return (\n    <div>\n      {/* Pasamos el prop "nombre" con el valor "Marta" */}\n      <Saludo nombre="Marta" />\n    </div>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Aqu\xed, el componente ",(0,o.jsx)(n.code,{children:"Saludo"})," recibe un prop ",(0,o.jsx)(n.code,{children:"nombre"})," y lo utiliza para mostrar un saludo personalizado. Este valor es pasado desde el componente ",(0,o.jsx)(n.code,{children:"App"}),", lo que demuestra c\xf3mo los props permiten que los componentes sean reutilizables con diferentes datos."]}),"\n",(0,o.jsx)(n.h2,{id:"diferencias-clave-entre-state-y-props",children:"Diferencias clave entre State y Props"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Mutabilidad"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"State"}),": Mutable. Puede cambiar dentro del componente."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Props"}),": Inmutables. No se pueden cambiar dentro del componente que los recibe."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Origen"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"State"}),": Se define y gestiona dentro del propio componente."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Props"}),": Se pasan desde un componente padre a un componente hijo."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Causa de re-renderizados"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"State"}),": Los cambios en el estado desencadenan un re-renderizado del componente."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Props"}),": Si un prop cambia en el componente padre, el componente hijo se vuelve a renderizar con los nuevos valores."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Uso"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"State"}),": Ideal para manejar datos que cambian con el tiempo, como entradas de usuario, datos din\xe1micos, etc."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Props"}),": Utilizados para pasar datos y funciones a componentes hijos para que se comporten de manera espec\xedfica o muestren cierta informaci\xf3n."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"React State"}),"\n",(0,o.jsx)(n.li,{children:"React Props"}),"\n",(0,o.jsx)(n.li,{children:"Ciclo de vida de los componentes"}),"\n",(0,o.jsx)(n.li,{children:"Comunicaci\xf3n entre componentes"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,o.jsxs)(n.p,{children:["El ",(0,o.jsx)(n.strong,{children:"State"})," y los ",(0,o.jsx)(n.strong,{children:"Props"})," son conceptos fundamentales en React, cada uno con un prop\xf3sito claro. Mientras que el State es mutable y se usa para gestionar datos locales y cambiantes dentro de un componente, los Props son inmutables y se utilizan para pasar datos desde un componente padre a uno hijo. Comprender la diferencia entre ambos es crucial para construir aplicaciones React eficientes y bien organizadas."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>i});var o=s(6540);const r={},a=o.createContext(r);function t(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);