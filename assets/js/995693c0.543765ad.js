"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[3145],{7518:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>t});var c=a(4848),s=a(8453);const r={},o="useReducer",i={id:"Hook/7-5-useReducer",title:"useReducer",description:"El hook useReducer en React es una herramienta poderosa que te permite gestionar el estado de un componente de manera m\xe1s estructurada y predecible, especialmente cuando el estado es complejo o involucra m\xfaltiples valores. A continuaci\xf3n, exploraremos c\xf3mo funciona, cu\xe1ndo es \xfatil y c\xf3mo puedes implementarlo en tus proyectos de React.",source:"@site/docs/7-Hook/7-5-useReducer.md",sourceDirName:"7-Hook",slug:"/Hook/7-5-useReducer",permalink:"/Hook/7-5-useReducer",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useMemo",permalink:"/Hook/7-4-useMemo"},next:{title:"useLayoutEffect",permalink:"/Hook/7-6-useLayoutEffect"}},d={},t=[{value:"\xbfQu\xe9 es <code>useReducer</code>?",id:"qu\xe9-es-usereducer",level:2},{value:"Sintaxis b\xe1sica",id:"sintaxis-b\xe1sica",level:3},{value:"Ejemplo sencillo de <code>useReducer</code>",id:"ejemplo-sencillo-de-usereducer",level:2},{value:"Paso 1: Definir el reductor",id:"paso-1-definir-el-reductor",level:3},{value:"Paso 2: Usar <code>useReducer</code> en el componente",id:"paso-2-usar-usereducer-en-el-componente",level:3},{value:"Explicaci\xf3n del c\xf3digo",id:"explicaci\xf3n-del-c\xf3digo",level:3},{value:"\xbfCu\xe1ndo usar <code>useReducer</code>?",id:"cu\xe1ndo-usar-usereducer",level:2},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h1,{id:"usereducer",children:"useReducer"}),"\n",(0,c.jsxs)(n.p,{children:["El ",(0,c.jsxs)(n.strong,{children:["hook ",(0,c.jsx)(n.code,{children:"useReducer"})]})," en React es una herramienta poderosa que te permite gestionar el estado de un componente de manera m\xe1s estructurada y predecible, especialmente cuando el estado es complejo o involucra m\xfaltiples valores. A continuaci\xf3n, exploraremos c\xf3mo funciona, cu\xe1ndo es \xfatil y c\xf3mo puedes implementarlo en tus proyectos de React."]}),"\n",(0,c.jsxs)(n.h2,{id:"qu\xe9-es-usereducer",children:["\xbfQu\xe9 es ",(0,c.jsx)(n.code,{children:"useReducer"}),"?"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"useReducer"})," es un hook que te permite manejar el estado de un componente a trav\xe9s de una ",(0,c.jsx)(n.strong,{children:"funci\xf3n reductora"})," (reducer). Un ",(0,c.jsx)(n.strong,{children:"reductor"})," es una funci\xf3n que toma el estado actual y una acci\xf3n, y devuelve un nuevo estado. Este patr\xf3n es muy com\xfan en la programaci\xf3n funcional y es especialmente \xfatil cuando el estado de tu componente involucra varias piezas de informaci\xf3n que cambian de manera interrelacionada."]}),"\n",(0,c.jsx)(n.h3,{id:"sintaxis-b\xe1sica",children:"Sintaxis b\xe1sica"}),"\n",(0,c.jsxs)(n.p,{children:["La funci\xf3n ",(0,c.jsx)(n.code,{children:"useReducer"})," toma dos argumentos principales:"]}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"reducer"})}),": Una funci\xf3n que define c\xf3mo el estado cambia en respuesta a las acciones."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"initialState"})}),": El estado inicial del componente."]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["La llamada a ",(0,c.jsx)(n.code,{children:"useReducer"})," devuelve un arreglo con dos elementos:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"state"})}),": El estado actual."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"dispatch"})}),": Una funci\xf3n que se utiliza para enviar acciones que modifican el estado."]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-jsx",children:"const [state, dispatch] = useReducer(reducer, initialState);\n"})}),"\n",(0,c.jsxs)(n.h2,{id:"ejemplo-sencillo-de-usereducer",children:["Ejemplo sencillo de ",(0,c.jsx)(n.code,{children:"useReducer"})]}),"\n",(0,c.jsxs)(n.p,{children:["Imaginemos que queremos gestionar el estado de un contador que puede incrementarse, decrementarse y resetearse. Usaremos ",(0,c.jsx)(n.code,{children:"useReducer"})," para manejar estas acciones."]}),"\n",(0,c.jsx)(n.h3,{id:"paso-1-definir-el-reductor",children:"Paso 1: Definir el reductor"}),"\n",(0,c.jsx)(n.p,{children:"Primero, definimos nuestra funci\xf3n reductora que especifica c\xf3mo el estado cambia en respuesta a cada acci\xf3n."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-jsx",children:"function contadorReducer(state, action) {\n  switch (action.type) {\n    case 'incrementar':\n      return { count: state.count + 1 }; // Incrementa el contador\n    case 'decrementar':\n      return { count: state.count - 1 }; // Decrementa el contador\n    case 'resetear':\n      return { count: 0 }; // Resetea el contador a 0\n    default:\n      throw new Error(`Acci\xf3n desconocida: ${action.type}`);\n  }\n}\n"})}),"\n",(0,c.jsxs)(n.h3,{id:"paso-2-usar-usereducer-en-el-componente",children:["Paso 2: Usar ",(0,c.jsx)(n.code,{children:"useReducer"})," en el componente"]}),"\n",(0,c.jsxs)(n.p,{children:["Ahora, en nuestro componente, utilizamos ",(0,c.jsx)(n.code,{children:"useReducer"})," para gestionar el estado del contador."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-jsx",children:"import React, { useReducer } from 'react';\n\nfunction Contador() {\n  const initialState = { count: 0 }; // Estado inicial del contador\n\n  // Hook useReducer para manejar el estado\n  const [state, dispatch] = useReducer(contadorReducer, initialState);\n\n  return (\n    <div>\n      <p>Contador: {state.count}</p> {/* Muestra el valor actual del contador */}\n      <button onClick={() => dispatch({ type: 'incrementar' })}>\n        Incrementar\n      </button>\n      <button onClick={() => dispatch({ type: 'decrementar' })}>\n        Decrementar\n      </button>\n      <button onClick={() => dispatch({ type: 'resetear' })}>\n        Resetear\n      </button>\n    </div>\n  );\n}\n\nexport default Contador;\n"})}),"\n",(0,c.jsx)(n.h3,{id:"explicaci\xf3n-del-c\xf3digo",children:"Explicaci\xf3n del c\xf3digo"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Estado inicial"}),": El contador comienza en ",(0,c.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Reductor"}),": La funci\xf3n ",(0,c.jsx)(n.code,{children:"contadorReducer"})," define c\xf3mo el estado cambia basado en la acci\xf3n recibida (",(0,c.jsx)(n.code,{children:"incrementar"}),", ",(0,c.jsx)(n.code,{children:"decrementar"}),", ",(0,c.jsx)(n.code,{children:"resetear"}),")."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Dispatch"}),": La funci\xf3n ",(0,c.jsx)(n.code,{children:"dispatch"})," se usa para enviar acciones al reductor. Cada bot\xf3n en nuestro componente env\xeda una acci\xf3n diferente para cambiar el estado del contador."]}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"cu\xe1ndo-usar-usereducer",children:["\xbfCu\xe1ndo usar ",(0,c.jsx)(n.code,{children:"useReducer"}),"?"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"useReducer"})," es especialmente \xfatil cuando:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"El estado es complejo"}),": Si tienes m\xfaltiples campos de estado que necesitan cambiar juntos de manera l\xf3gica, ",(0,c.jsx)(n.code,{children:"useReducer"})," puede ayudar a gestionar esas interacciones."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Hay muchas acciones posibles"}),": Cuando las acciones que afectan el estado son variadas y necesitan ser manejadas de manera centralizada."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Necesitas una l\xf3gica de estado m\xe1s avanzada"}),": Si necesitas m\xe1s que simples actualizaciones de estado (por ejemplo, operaciones de l\xf3gica condicional), un reductor puede organizar mejor esta complejidad."]}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Programaci\xf3n funcional"}),": Aprende m\xe1s sobre el paradigma de la programaci\xf3n funcional y c\xf3mo se relaciona con el uso de ",(0,c.jsx)(n.code,{children:"useReducer"}),"."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Patr\xf3n de dise\xf1o Redux"}),": Explora c\xf3mo ",(0,c.jsx)(n.code,{children:"useReducer"})," se relaciona con Redux, una librer\xeda popular para manejar el estado global en aplicaciones React."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Optimizaci\xf3n de estado en React"}),": Profundiza en c\xf3mo ",(0,c.jsx)(n.code,{children:"useReducer"})," puede contribuir a una gesti\xf3n de estado m\xe1s eficiente en aplicaciones grandes."]}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,c.jsxs)(n.p,{children:["El hook ",(0,c.jsx)(n.code,{children:"useReducer"})," es una herramienta valiosa para manejar estados complejos en React. A trav\xe9s de una funci\xf3n reductora, puedes controlar de manera precisa c\xf3mo el estado cambia en respuesta a diversas acciones, proporcionando una estructura clara y organizada a tu l\xf3gica de estado. Es especialmente \xfatil cuando el estado involucra m\xfaltiples valores interrelacionados o cuando necesitas manejar varias acciones que afectan ese estado."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var c=a(6540);const s={},r=c.createContext(s);function o(e){const n=c.useContext(r);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),c.createElement(r.Provider,{value:n},e.children)}}}]);