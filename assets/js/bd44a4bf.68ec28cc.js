"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[8250],{1850:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>c});var s=o(4848),i=o(8453);const l={},a="Styled-Components",t={id:"Estilo/9-3-Styled-Components",title:"Styled-Components",description:"Styled-Components es una librer\xeda muy popular en el ecosistema de React que permite escribir estilos CSS directamente en los componentes, utilizando una sintaxis que combina JavaScript y CSS. Este enfoque, conocido como CSS-in-JS, simplifica la gesti\xf3n de estilos al asociar los estilos directamente con los componentes, evitando conflictos globales de CSS y facilitando la creaci\xf3n de interfaces m\xe1s predecibles y modulares.",source:"@site/docs/9-Estilo/9-3-Styled-Components.md",sourceDirName:"9-Estilo",slug:"/Estilo/9-3-Styled-Components",permalink:"/Estilo/9-3-Styled-Components",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Emotion",permalink:"/Estilo/9-2-Emotion"},next:{title:"M\xf3dulos CSS",permalink:"/Estilo/9-4-M\xf3dulos CSS"}},r={},c=[{value:"\xbfQu\xe9 son los Styled-Components?",id:"qu\xe9-son-los-styled-components",level:2},{value:"Ejemplo b\xe1sico",id:"ejemplo-b\xe1sico",level:3},{value:"\xbfQu\xe9 hace especial a Styled-Components?",id:"qu\xe9-hace-especial-a-styled-components",level:3},{value:"Ejemplo con props din\xe1micos",id:"ejemplo-con-props-din\xe1micos",level:3},{value:"Ventajas de usar Styled-Components",id:"ventajas-de-usar-styled-components",level:2},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"styled-components",children:"Styled-Components"}),"\n",(0,s.jsx)(n.p,{children:"Styled-Components es una librer\xeda muy popular en el ecosistema de React que permite escribir estilos CSS directamente en los componentes, utilizando una sintaxis que combina JavaScript y CSS. Este enfoque, conocido como CSS-in-JS, simplifica la gesti\xf3n de estilos al asociar los estilos directamente con los componentes, evitando conflictos globales de CSS y facilitando la creaci\xf3n de interfaces m\xe1s predecibles y modulares."}),"\n",(0,s.jsx)(n.h2,{id:"qu\xe9-son-los-styled-components",children:"\xbfQu\xe9 son los Styled-Components?"}),"\n",(0,s.jsx)(n.p,{children:"Styled-Components permite definir componentes de React con estilos embebidos en ellos. Estos estilos se definen utilizando plantillas literales de ES6, lo que significa que puedes escribir CSS dentro de una cadena de texto especial, y luego usarla como un componente de React."}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-b\xe1sico",children:"Ejemplo b\xe1sico"}),"\n",(0,s.jsxs)(n.p,{children:["Aqu\xed tienes un ejemplo simple de c\xf3mo utilizar ",(0,s.jsx)(n.code,{children:"styled-components"})," para crear un bot\xf3n con estilo:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Importamos la librer\xeda styled-components\nimport styled from 'styled-components';\n\n// Definimos un bot\xf3n con estilos espec\xedficos\nconst BotonEstilizado = styled.button`\n  background-color: #6200ea; /* Color de fondo */\n  color: white; /* Color del texto */\n  padding: 10px 20px; /* Espaciado interno del bot\xf3n */\n  border: none; /* Sin borde */\n  border-radius: 5px; /* Esquinas redondeadas */\n  cursor: pointer; /* Cambia el cursor al pasar sobre el bot\xf3n */\n  font-size: 16px; /* Tama\xf1o de la fuente */\n  \n  /* Estilo para el estado de hover (cuando el usuario pasa el cursor sobre el bot\xf3n) */\n  &:hover {\n    background-color: #3700b3; /* Cambia el color de fondo al hacer hover */\n  }\n`;\n\n// Uso del componente estilizado en una aplicaci\xf3n\nfunction App() {\n  return (\n    <div>\n      {/* Aqu\xed usamos nuestro bot\xf3n estilizado como cualquier otro componente */}\n      <BotonEstilizado>Haz clic aqu\xed</BotonEstilizado>\n    </div>\n  );\n}\n\nexport default App;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"qu\xe9-hace-especial-a-styled-components",children:"\xbfQu\xe9 hace especial a Styled-Components?"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Encapsulamiento de estilos"}),": Cada componente tiene sus propios estilos, lo que evita que estos se filtren o afecten a otros elementos de la p\xe1gina."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Propiedades din\xe1micas"}),": Puedes pasar props a tus componentes estilizados para cambiar din\xe1micamente sus estilos."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reutilizaci\xf3n de estilos"}),": Es f\xe1cil crear componentes base con estilos compartidos y extenderlos para crear variaciones."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-con-props-din\xe1micos",children:"Ejemplo con props din\xe1micos"}),"\n",(0,s.jsxs)(n.p,{children:["Veamos c\xf3mo se pueden utilizar las ",(0,s.jsx)(n.code,{children:"props"})," para cambiar los estilos de un componente:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// Definimos un bot\xf3n que cambia su color basado en una prop\nconst BotonPersonalizado = styled.button`\n  background-color: ${(props) => props.primary ? '#6200ea' : 'white'}; /* Color de fondo basado en la prop \"primary\" */\n  color: ${(props) => props.primary ? 'white' : '#6200ea'}; /* Color del texto basado en la prop \"primary\" */\n  padding: 10px 20px;\n  border: 2px solid #6200ea; /* Borde de color fijo */\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 16px;\n  \n  &:hover {\n    background-color: ${(props) => props.primary ? '#3700b3' : '#e1bee7'}; /* Cambio de color en hover */\n  }\n`;\n\nfunction App() {\n  return (\n    <div>\n      {/* Bot\xf3n primario con estilos diferentes */}\n      <BotonPersonalizado primary>Bot\xf3n Primario</BotonPersonalizado>\n      {/* Bot\xf3n secundario */}\n      <BotonPersonalizado>Bot\xf3n Secundario</BotonPersonalizado>\n    </div>\n  );\n}\n\nexport default App;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["En este ejemplo, el bot\xf3n cambia de color seg\xfan la prop ",(0,s.jsx)(n.code,{children:"primary"})," que se le pase, permitiendo una mayor flexibilidad y personalizaci\xf3n."]}),"\n",(0,s.jsx)(n.h2,{id:"ventajas-de-usar-styled-components",children:"Ventajas de usar Styled-Components"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modularidad"}),": Al encapsular los estilos en los componentes, es m\xe1s f\xe1cil mantener y escalar las aplicaciones."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Eliminaci\xf3n de conflictos de nombres"}),": No tienes que preocuparte por que los estilos se sobrescriban accidentalmente, como ocurre a veces con el CSS tradicional."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexibilidad y personalizaci\xf3n"}),": Los estilos pueden depender de las ",(0,s.jsx)(n.code,{children:"props"})," que pasas al componente, lo que permite crear componentes altamente reutilizables y personalizables."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CSS-in-JS"}),": Concepto detr\xe1s de Styled-Components y otras librer\xedas similares."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Props en Styled-Components"}),": C\xf3mo usar props para crear estilos din\xe1micos."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Extendiendo componentes"}),": T\xe9cnicas para reutilizar y extender estilos en Styled-Components."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Temas en Styled-Components"}),": Uso de themes para manejar estilos globales en la aplicaci\xf3n."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,s.jsxs)(n.p,{children:["Styled-Components es una poderosa herramienta en React que permite escribir estilos CSS directamente dentro de los componentes usando JavaScript. Este enfoque facilita la modularidad, elimina conflictos de estilos y ofrece una manera flexible de crear interfaces de usuario. Los ejemplos muestran c\xf3mo definir componentes estilizados y personalizarlos con ",(0,s.jsx)(n.code,{children:"props"}),", destacando la simplicidad y el poder de esta librer\xeda."]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>t});var s=o(6540);const i={},l=s.createContext(i);function a(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);