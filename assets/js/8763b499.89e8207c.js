"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[6821],{3258:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>d});var o=s(4848),a=s(8453);const l={},i="Estilo en l\xednea",t={id:"Estilo/9-1-Estilo en l\xednea",title:"Estilo en l\xednea",description:"Cuando trabajas con React, uno de los temas clave es c\xf3mo aplicar estilos a tus componentes. Una de las maneras m\xe1s directas y r\xe1pidas de hacerlo es usando estilos en l\xednea. Este m\xe9todo es muy similar a c\xf3mo se estilizan elementos directamente en HTML usando el atributo style, pero con algunas diferencias importantes que exploraremos a continuaci\xf3n.",source:"@site/docs/9-Estilo/9-1-Estilo en l\xednea.md",sourceDirName:"9-Estilo",slug:"/Estilo/9-1-Estilo en l\xednea",permalink:"/Estilo/9-1-Estilo en l\xednea",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"T\xe9cnicas de optimizaci\xf3n del renderizado",permalink:"/Optimizaci\xf3n/8-2-T\xe9cnicas de optimizaci\xf3n del renderizado"},next:{title:"Emotion",permalink:"/Estilo/9-2-Emotion"}},r={},d=[{value:"\xbfQu\xe9 es el estilo en l\xednea?",id:"qu\xe9-es-el-estilo-en-l\xednea",level:2},{value:"Ejemplo b\xe1sico",id:"ejemplo-b\xe1sico",level:3},{value:"Ventajas y desventajas del estilo en l\xednea",id:"ventajas-y-desventajas-del-estilo-en-l\xednea",level:2},{value:"Ventajas",id:"ventajas",level:3},{value:"Desventajas",id:"desventajas",level:3},{value:"Aplicaci\xf3n de estilos din\xe1micos",id:"aplicaci\xf3n-de-estilos-din\xe1micos",level:2},{value:"Ejemplo con estilos din\xe1micos",id:"ejemplo-con-estilos-din\xe1micos",level:3},{value:"\xbfCu\xe1ndo usar estilos en l\xednea?",id:"cu\xe1ndo-usar-estilos-en-l\xednea",level:2},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"estilo-en-l\xednea",children:"Estilo en l\xednea"}),"\n",(0,o.jsxs)(n.p,{children:["Cuando trabajas con React, uno de los temas clave es c\xf3mo aplicar estilos a tus componentes. Una de las maneras m\xe1s directas y r\xe1pidas de hacerlo es usando ",(0,o.jsx)(n.strong,{children:"estilos en l\xednea"}),". Este m\xe9todo es muy similar a c\xf3mo se estilizan elementos directamente en HTML usando el atributo ",(0,o.jsx)(n.code,{children:"style"}),", pero con algunas diferencias importantes que exploraremos a continuaci\xf3n."]}),"\n",(0,o.jsx)(n.h2,{id:"qu\xe9-es-el-estilo-en-l\xednea",children:"\xbfQu\xe9 es el estilo en l\xednea?"}),"\n",(0,o.jsxs)(n.p,{children:["En React, los ",(0,o.jsx)(n.strong,{children:"estilos en l\xednea"})," se aplican directamente a los elementos dentro del JSX mediante el atributo ",(0,o.jsx)(n.code,{children:"style"}),". Este atributo toma un ",(0,o.jsx)(n.strong,{children:"objeto"})," de JavaScript donde las propiedades CSS se expresan en forma de pares clave-valor. Las claves son las propiedades CSS, pero en lugar de usar la notaci\xf3n con guiones (",(0,o.jsx)(n.code,{children:"-"}),"), se usa la ",(0,o.jsx)(n.strong,{children:"notaci\xf3n camelCase"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-b\xe1sico",children:"Ejemplo b\xe1sico"}),"\n",(0,o.jsx)(n.p,{children:"Supongamos que queremos aplicar un color de fondo azul y un margen superior de 20 p\xedxeles a un bot\xf3n. As\xed es como lo har\xedamos en React:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\n\nfunction BotonConEstilo() {\n  return (\n    <button \n      style={{\n        backgroundColor: 'blue', // Color de fondo azul\n        marginTop: '20px'        // Margen superior de 20 p\xedxeles\n      }}\n    >\n      \xa1Haz clic aqu\xed!\n    </button>\n  );\n}\n\nexport default BotonConEstilo;\n"})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"backgroundColor"})}),": Corresponde a la propiedad CSS ",(0,o.jsx)(n.code,{children:"background-color"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"marginTop"})}),": Corresponde a la propiedad CSS ",(0,o.jsx)(n.code,{children:"margin-top"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["F\xedjate en que usamos ",(0,o.jsx)(n.strong,{children:"camelCase"})," para las propiedades CSS que normalmente tendr\xedan guiones. Esto se debe a que en JavaScript, los nombres de las propiedades de los objetos no pueden contener guiones."]}),"\n",(0,o.jsx)(n.h2,{id:"ventajas-y-desventajas-del-estilo-en-l\xednea",children:"Ventajas y desventajas del estilo en l\xednea"}),"\n",(0,o.jsx)(n.h3,{id:"ventajas",children:"Ventajas"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Simplicidad"}),": Puedes aplicar estilos r\xe1pidamente sin necesidad de configurar archivos CSS externos."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Espec\xedfico para un componente"}),": Los estilos se aplican \xfanicamente al componente donde se definen, lo que reduce la posibilidad de conflictos de estilo."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Din\xe1mico"}),": Puedes calcular valores de estilo en tiempo real usando JavaScript, lo cual es muy \xfatil cuando el estilo depende del estado o de las props."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"desventajas",children:"Desventajas"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Falta de reutilizaci\xf3n"}),": Los estilos en l\xednea no son reutilizables, lo que puede llevar a la duplicaci\xf3n de c\xf3digo."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Complejidad en estilos complejos"}),": Gestionar estilos complejos en l\xednea puede volverse dif\xedcil y desordenado."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Limitaciones de CSS"}),": Algunas caracter\xedsticas de CSS, como las pseudoclases (",(0,o.jsx)(n.code,{children:":hover"}),", ",(0,o.jsx)(n.code,{children:":focus"}),") y los selectores avanzados, no pueden aplicarse directamente con estilos en l\xednea."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"aplicaci\xf3n-de-estilos-din\xe1micos",children:"Aplicaci\xf3n de estilos din\xe1micos"}),"\n",(0,o.jsx)(n.p,{children:"Una de las grandes ventajas de los estilos en l\xednea es la capacidad de aplicar estilos din\xe1micos. Esto es especialmente \xfatil cuando el estilo depende de alguna variable de estado o prop."}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-con-estilos-din\xe1micos",children:"Ejemplo con estilos din\xe1micos"}),"\n",(0,o.jsxs)(n.p,{children:["Imaginemos un bot\xf3n que cambia de color seg\xfan una prop llamada ",(0,o.jsx)(n.code,{children:"esImportante"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"import React from 'react';\n\nfunction BotonDinamico({ esImportante }) {\n  return (\n    <button\n      style={{\n        backgroundColor: esImportante ? 'red' : 'gray', // Si es importante, el fondo es rojo; si no, es gris\n        padding: '10px',\n        color: 'white'\n      }}\n    >\n      {esImportante ? '\xa1Importante!' : 'Normal'}\n    </button>\n  );\n}\n\nexport default BotonDinamico;\n"})}),"\n",(0,o.jsx)(n.p,{children:"En este ejemplo:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"esImportante"})}),": Es una prop que determina si el bot\xf3n es importante o no."]}),"\n",(0,o.jsxs)(n.li,{children:["El color de fondo cambia din\xe1micamente seg\xfan el valor de ",(0,o.jsx)(n.code,{children:"esImportante"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Este es un ejemplo claro de c\xf3mo los estilos en l\xednea pueden aprovecharse para crear interfaces din\xe1micas e interactivas."}),"\n",(0,o.jsx)(n.h2,{id:"cu\xe1ndo-usar-estilos-en-l\xednea",children:"\xbfCu\xe1ndo usar estilos en l\xednea?"}),"\n",(0,o.jsxs)(n.p,{children:["El uso de estilos en l\xednea es ideal para componentes simples o cuando los estilos est\xe1n muy estrechamente ligados al comportamiento del componente. Sin embargo, para proyectos m\xe1s grandes o cuando los estilos se vuelven complejos, es mejor considerar otras alternativas como CSS en archivos separados, ",(0,o.jsx)(n.strong,{children:"CSS-in-JS"})," o ",(0,o.jsx)(n.strong,{children:"Styled Components"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"camelCase en JavaScript"}),": Investiga m\xe1s sobre por qu\xe9 se usa camelCase en lugar de notaci\xf3n con guiones."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"CSS-in-JS"}),": Explora alternativas a los estilos en l\xednea para proyectos m\xe1s grandes."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Props en React"}),": Aprende c\xf3mo las props pueden afectar la presentaci\xf3n visual de un componente."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,o.jsx)(n.p,{children:"El uso de estilos en l\xednea en React es una forma r\xe1pida y directa de aplicar CSS directamente a los componentes, aprovechando la flexibilidad de JavaScript. Aunque es ideal para estilos simples y espec\xedficos, puede volverse limitado cuando los estilos son m\xe1s complejos o necesitan ser reutilizables. Es fundamental entender cu\xe1ndo es conveniente usar estilos en l\xednea y cu\xe1ndo es mejor optar por otras soluciones de estilo en proyectos m\xe1s grandes."})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>t});var o=s(6540);const a={},l=o.createContext(a);function i(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);