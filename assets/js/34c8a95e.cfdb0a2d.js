"use strict";(self.webpackChunkdocubook=self.webpackChunkdocubook||[]).push([[4375],{3499:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var s=o(4848),a=o(8453);const r={},t="Consideraciones al estructurar componentes",i={id:"Componente/5-7-Consideraciones al estructurar componentes",title:"Consideraciones al estructurar componentes",description:"Cuando desarrollas aplicaciones en React, es crucial estructurar tus componentes de manera que sean f\xe1ciles de mantener, reutilizables y comprensibles. A continuaci\xf3n, exploraremos algunas pr\xe1cticas recomendadas para lograr una buena estructura en tus componentes.",source:"@site/docs/5-Componente/5-7-Consideraciones al estructurar componentes.md",sourceDirName:"5-Componente",slug:"/Componente/5-7-Consideraciones al estructurar componentes",permalink:"/Componente/5-7-Consideraciones al estructurar componentes",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Configuraci\xf3n de displayName",permalink:"/Componente/5-6-Configuraci\xf3n de displayName"},next:{title:"Componentes de orden superior (HOC)",permalink:"/Componente/5-8-Componentes de orden superior (HOC)"}},c={},l=[{value:"<strong>1. Componentes peque\xf1os y enfocados en una sola tarea</strong>",id:"1-componentes-peque\xf1os-y-enfocados-en-una-sola-tarea",level:2},{value:"Ejemplo:",id:"ejemplo",level:3},{value:"<strong>2. Reutilizaci\xf3n de componentes</strong>",id:"2-reutilizaci\xf3n-de-componentes",level:2},{value:"Ejemplo:",id:"ejemplo-1",level:3},{value:"<strong>3. Componentes contenedores y presentacionales</strong>",id:"3-componentes-contenedores-y-presentacionales",level:2},{value:"Ejemplo:",id:"ejemplo-2",level:3},{value:"<strong>4. Organizaci\xf3n de archivos y carpetas</strong>",id:"4-organizaci\xf3n-de-archivos-y-carpetas",level:2},{value:"Ejemplo de estructura de carpetas:",id:"ejemplo-de-estructura-de-carpetas",level:3},{value:"<strong>5. Uso de nombres significativos</strong>",id:"5-uso-de-nombres-significativos",level:2},{value:"Ejemplo:",id:"ejemplo-3",level:3},{value:"M\xe1s informaci\xf3n",id:"m\xe1s-informaci\xf3n",level:2},{value:"Resumen",id:"resumen",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"consideraciones-al-estructurar-componentes",children:"Consideraciones al estructurar componentes"}),"\n",(0,s.jsx)(n.p,{children:"Cuando desarrollas aplicaciones en React, es crucial estructurar tus componentes de manera que sean f\xe1ciles de mantener, reutilizables y comprensibles. A continuaci\xf3n, exploraremos algunas pr\xe1cticas recomendadas para lograr una buena estructura en tus componentes."}),"\n",(0,s.jsx)(n.h2,{id:"1-componentes-peque\xf1os-y-enfocados-en-una-sola-tarea",children:(0,s.jsx)(n.strong,{children:"1. Componentes peque\xf1os y enfocados en una sola tarea"})}),"\n",(0,s.jsx)(n.p,{children:"Un principio clave en React es mantener tus componentes peque\xf1os y con una \xfanica responsabilidad. Esto significa que cada componente debe hacer solo una cosa, pero hacerlo bien. Si un componente se vuelve demasiado grande o complejo, considera dividirlo en varios componentes m\xe1s peque\xf1os."}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo",children:"Ejemplo:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// Componente que muestra un bot\xf3n y un contador\nfunction Contador() {\n  const [conteo, setConteo] = useState(0);\n\n  // Funci\xf3n para manejar el clic del bot\xf3n\n  const manejarClic = () => setConteo(conteo + 1);\n\n  return (\n    <div>\n      <p>Has hecho clic {conteo} veces</p>\n      <Boton manejarClic={manejarClic} />\n    </div>\n  );\n}\n\n// Componente de bot\xf3n\nfunction Boton({ manejarClic }) {\n  return (\n    <button onClick={manejarClic}>\n      Haz clic aqu\xed\n    </button>\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Punto clave:"})," El componente ",(0,s.jsx)(n.code,{children:"Contador"})," se enfoca en manejar el estado del contador, mientras que ",(0,s.jsx)(n.code,{children:"Boton"})," solo se encarga de la l\xf3gica del bot\xf3n, haciendo que cada componente sea m\xe1s manejable y reutilizable."]}),"\n",(0,s.jsx)(n.h2,{id:"2-reutilizaci\xf3n-de-componentes",children:(0,s.jsx)(n.strong,{children:"2. Reutilizaci\xf3n de componentes"})}),"\n",(0,s.jsx)(n.p,{children:"En lugar de duplicar c\xf3digo, es recomendable crear componentes reutilizables. Esto no solo reduce la cantidad de c\xf3digo que necesitas mantener, sino que tambi\xe9n asegura consistencia en la interfaz de usuario."}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-1",children:"Ejemplo:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// Componente reutilizable para un bot\xf3n\nfunction Boton({ manejarClic, texto }) {\n  return (\n    <button onClick={manejarClic}>\n      {texto}\n    </button>\n  );\n}\n\n// Uso del componente reutilizable\nfunction App() {\n  return (\n    <div>\n      <Boton manejarClic={() => alert('Bot\xf3n 1')} texto=\"Bot\xf3n 1\" />\n      <Boton manejarClic={() => alert('Bot\xf3n 2')} texto=\"Bot\xf3n 2\" />\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Punto clave:"})," El componente ",(0,s.jsx)(n.code,{children:"Boton"})," se puede reutilizar en diferentes contextos, simplemente cambiando los props que se le pasan."]}),"\n",(0,s.jsx)(n.h2,{id:"3-componentes-contenedores-y-presentacionales",children:(0,s.jsx)(n.strong,{children:"3. Componentes contenedores y presentacionales"})}),"\n",(0,s.jsx)(n.p,{children:"Una pr\xe1ctica com\xfan es separar la l\xf3gica de los componentes de la presentaci\xf3n. Esto se logra mediante la creaci\xf3n de componentes contenedores y componentes presentacionales."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Componentes contenedores:"})," Manejan la l\xf3gica del negocio, como la gesti\xf3n del estado o la comunicaci\xf3n con una API."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Componentes presentacionales:"})," Se encargan de c\xf3mo se muestra la UI."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-2",children:"Ejemplo:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// Componente contenedor que maneja la l\xf3gica del estado\nfunction ContenedorListaUsuarios() {\n  const [usuarios, setUsuarios] = useState([]);\n\n  useEffect(() => {\n    // Simula la carga de datos\n    setUsuarios(['Juan', 'Mar\xeda', 'Carlos']);\n  }, []);\n\n  return <ListaUsuarios usuarios={usuarios} />;\n}\n\n// Componente presentacional que muestra la lista de usuarios\nfunction ListaUsuarios({ usuarios }) {\n  return (\n    <ul>\n      {usuarios.map((usuario, index) => (\n        <li key={index}>{usuario}</li>\n      ))}\n    </ul>\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Punto clave:"})," El componente ",(0,s.jsx)(n.code,{children:"ContenedorListaUsuarios"})," maneja la l\xf3gica y pasa los datos al componente ",(0,s.jsx)(n.code,{children:"ListaUsuarios"}),", que solo se preocupa de c\xf3mo presentar esos datos."]}),"\n",(0,s.jsx)(n.h2,{id:"4-organizaci\xf3n-de-archivos-y-carpetas",children:(0,s.jsx)(n.strong,{children:"4. Organizaci\xf3n de archivos y carpetas"})}),"\n",(0,s.jsx)(n.p,{children:"Organizar adecuadamente tus archivos y carpetas facilita la navegaci\xf3n y el mantenimiento del proyecto. Una estructura com\xfan es agrupar componentes por funcionalidades o caracter\xedsticas."}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-de-estructura-de-carpetas",children:"Ejemplo de estructura de carpetas:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"src/\n\u2502\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 Boton/\n\u2502   \u2502   \u251c\u2500\u2500 Boton.jsx\n\u2502   \u2502   \u2514\u2500\u2500 Boton.css\n\u2502   \u251c\u2500\u2500 ListaUsuarios/\n\u2502   \u2502   \u251c\u2500\u2500 ContenedorListaUsuarios.jsx\n\u2502   \u2502   \u2514\u2500\u2500 ListaUsuarios.jsx\n\u2502   \u2514\u2500\u2500 Contador/\n\u2502       \u251c\u2500\u2500 Contador.jsx\n\u2502       \u2514\u2500\u2500 Contador.css\n\u2502\n\u2514\u2500\u2500 App.js\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Punto clave:"})," Al tener componentes organizados por carpetas, es m\xe1s f\xe1cil localizar y mantener cada pieza del c\xf3digo."]}),"\n",(0,s.jsx)(n.h2,{id:"5-uso-de-nombres-significativos",children:(0,s.jsx)(n.strong,{children:"5. Uso de nombres significativos"})}),"\n",(0,s.jsx)(n.p,{children:"Elegir nombres descriptivos y consistentes para tus componentes, funciones y variables es esencial para que el c\xf3digo sea intuitivo y f\xe1cil de seguir."}),"\n",(0,s.jsx)(n.h3,{id:"ejemplo-3",children:"Ejemplo:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// Ejemplo de un nombre significativo para un componente que muestra detalles de un usuario\nfunction DetallesUsuario({ nombre, edad }) {\n  return (\n    <div>\n      <h2>Nombre: {nombre}</h2>\n      <p>Edad: {edad}</p>\n    </div>\n  );\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Punto clave:"})," El nombre ",(0,s.jsx)(n.code,{children:"DetallesUsuario"})," describe claramente lo que hace el componente, facilitando su comprensi\xf3n."]}),"\n",(0,s.jsx)(n.h2,{id:"m\xe1s-informaci\xf3n",children:"M\xe1s informaci\xf3n"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Componentes contenedores vs. presentacionales"}),"\n",(0,s.jsx)(n.li,{children:"Nombres de componentes en React"}),"\n",(0,s.jsx)(n.li,{children:"Organizaci\xf3n de proyectos React"}),"\n",(0,s.jsx)(n.li,{children:"Reutilizaci\xf3n de componentes"}),"\n",(0,s.jsx)(n.li,{children:"Desacoplamiento de l\xf3gica y presentaci\xf3n en React"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"resumen",children:"Resumen"}),"\n",(0,s.jsx)(n.p,{children:"Al estructurar componentes en React, es importante mantenerlos peque\xf1os y enfocados, reutilizarlos cuando sea posible, y separar la l\xf3gica de la presentaci\xf3n. Una buena organizaci\xf3n de archivos y el uso de nombres significativos hacen que tu c\xf3digo sea m\xe1s f\xe1cil de mantener y entender. Estos principios te ayudar\xe1n a crear aplicaciones React m\xe1s limpias y escalables."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>i});var s=o(6540);const a={},r=s.createContext(a);function t(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);